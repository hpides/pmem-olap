predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var 0..100000000: INT____00002 :: is_defined_var :: var_is_introduced;
var 0..1000000: INT____00004 :: is_defined_var :: var_is_introduced;
var 0..100000000: INT____00006 :: is_defined_var :: var_is_introduced;
var 0..1000000: INT____00008 :: is_defined_var :: var_is_introduced;
var 0..100000000: INT____00010 :: is_defined_var :: var_is_introduced;
var 0..1000000: INT____00012 :: is_defined_var :: var_is_introduced;
var 0..100000000: INT____00014 :: is_defined_var :: var_is_introduced;
var 0..1000000: INT____00016 :: is_defined_var :: var_is_introduced;
var 0..100000000: INT____00018 :: is_defined_var :: var_is_introduced;
var 0..1000000: INT____00020 :: is_defined_var :: var_is_introduced;
var 0..100000000: INT____00022 :: is_defined_var :: var_is_introduced;
var 0..1000000: INT____00024 :: is_defined_var :: var_is_introduced;
var 0..100000000: INT____00026 :: is_defined_var :: var_is_introduced;
var 0..1000000: INT____00028 :: is_defined_var :: var_is_introduced;
var 0..100000000: INT____00030 :: is_defined_var :: var_is_introduced;
var 0..1000000: INT____00032 :: is_defined_var :: var_is_introduced;
var 0..100000000: INT____00034 :: is_defined_var :: var_is_introduced;
var 0..1000000: INT____00036 :: is_defined_var :: var_is_introduced;
var 0..100000000: INT____00038 :: is_defined_var :: var_is_introduced;
var 0..1000000: INT____00040 :: is_defined_var :: var_is_introduced;
var 0..100000000: INT____00042 :: is_defined_var :: var_is_introduced;
var 0..1000000: INT____00044 :: is_defined_var :: var_is_introduced;
var 0..100000000: INT____00046 :: is_defined_var :: var_is_introduced;
var 0..1000000: INT____00048 :: is_defined_var :: var_is_introduced;
var 0..10000: p____00001;
var 0..10000: p____00005;
var 0..10000: p____00009;
var 0..10000: p____00013;
var 0..10000: p____00017;
var 0..10000: p____00021;
var 0..10000: p____00025;
var 0..10000: p____00029;
var 0..10000: p____00033;
var 0..10000: p____00037;
var 0..10000: p____00041;
var 0..10000: p____00045;
array [1..4] of var 0..1000: x :: output_array([1..4]);
constraint all_different_int(x);
constraint int_le(x[1], x[2]);
constraint int_le(x[2], x[3]);
constraint int_le(x[3], x[4]);
constraint int_lin_eq([-1, 1], [INT____00004, INT____00002], 1) :: defines_var(INT____00004);
constraint int_lin_eq([-1, 1], [INT____00008, INT____00006], 1) :: defines_var(INT____00008);
constraint int_lin_eq([-1, 1], [INT____00012, INT____00010], 1) :: defines_var(INT____00012);
constraint int_lin_eq([-1, 1], [INT____00016, INT____00014], 1) :: defines_var(INT____00016);
constraint int_lin_eq([-1, 1], [INT____00020, INT____00018], 1) :: defines_var(INT____00020);
constraint int_lin_eq([-1, 1], [INT____00024, INT____00022], 1) :: defines_var(INT____00024);
constraint int_lin_eq([-1, 1], [INT____00028, INT____00026], 1) :: defines_var(INT____00028);
constraint int_lin_eq([-1, 1], [INT____00032, INT____00030], 1) :: defines_var(INT____00032);
constraint int_lin_eq([-1, 1], [INT____00036, INT____00034], 1) :: defines_var(INT____00036);
constraint int_lin_eq([-1, 1], [INT____00040, INT____00038], 1) :: defines_var(INT____00040);
constraint int_lin_eq([-1, 1], [INT____00044, INT____00042], 1) :: defines_var(INT____00044);
constraint int_lin_eq([-1, 1], [INT____00048, INT____00046], 1) :: defines_var(INT____00048);
constraint int_times(p____00001, p____00001, INT____00002) :: defines_var(INT____00002);
constraint int_times(p____00005, p____00005, INT____00006) :: defines_var(INT____00006);
constraint int_times(p____00009, p____00009, INT____00010) :: defines_var(INT____00010);
constraint int_times(p____00013, p____00013, INT____00014) :: defines_var(INT____00014);
constraint int_times(p____00017, p____00017, INT____00018) :: defines_var(INT____00018);
constraint int_times(p____00021, p____00021, INT____00022) :: defines_var(INT____00022);
constraint int_times(p____00025, p____00025, INT____00026) :: defines_var(INT____00026);
constraint int_times(p____00029, p____00029, INT____00030) :: defines_var(INT____00030);
constraint int_times(p____00033, p____00033, INT____00034) :: defines_var(INT____00034);
constraint int_times(p____00037, p____00037, INT____00038) :: defines_var(INT____00038);
constraint int_times(p____00041, p____00041, INT____00042) :: defines_var(INT____00042);
constraint int_times(p____00045, p____00045, INT____00046) :: defines_var(INT____00046);
constraint int_times(x[1], x[2], INT____00004);
constraint int_times(x[1], x[3], INT____00008);
constraint int_times(x[1], x[4], INT____00012);
constraint int_times(x[2], x[1], INT____00016);
constraint int_times(x[2], x[3], INT____00020);
constraint int_times(x[2], x[4], INT____00024);
constraint int_times(x[3], x[1], INT____00028);
constraint int_times(x[3], x[2], INT____00032);
constraint int_times(x[3], x[4], INT____00036);
constraint int_times(x[4], x[1], INT____00040);
constraint int_times(x[4], x[2], INT____00044);
constraint int_times(x[4], x[3], INT____00048);
solve  :: int_search(x, first_fail, indomain_split, complete) satisfy;
