predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..6] of set of int: available = [3..6, 3..4, 2..5, 2..4, 3..4, 1..6];
array [1..6] of var 1..6: x :: output_array([1..6]);
constraint all_different_int(x);
constraint set_in(x[1], 3..6);
constraint set_in(x[2], 3..4);
constraint set_in(x[3], 2..5);
constraint set_in(x[4], 2..4);
constraint set_in(x[5], 3..4);
solve  :: int_search(x, first_fail, indomain, complete) satisfy;
