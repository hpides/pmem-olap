predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var bool: BOOL____00003 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00005 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00007 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00009 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00011 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00012 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00014 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00016 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00018 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00020 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00022 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00013 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00015 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00017 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00019 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00021 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00023 :: is_defined_var :: var_is_introduced;
var 1..7: INT____00024 :: is_defined_var :: var_is_introduced;
var 1..7: r :: output_var = INT____00024;
array [1..6] of var 0..1: runs_ix____00001;
array [1..6] of var 1..6: x :: output_array([1..6]);
constraint bool2int(BOOL____00012, INT____00013) :: defines_var(INT____00013);
constraint bool2int(BOOL____00014, INT____00015) :: defines_var(INT____00015);
constraint bool2int(BOOL____00016, INT____00017) :: defines_var(INT____00017);
constraint bool2int(BOOL____00018, INT____00019) :: defines_var(INT____00019);
constraint bool2int(BOOL____00020, INT____00021) :: defines_var(INT____00021);
constraint bool2int(BOOL____00022, INT____00023) :: defines_var(INT____00023);
constraint int_eq(runs_ix____00001[1], 1);
constraint int_eq(x[1], 1);
constraint int_eq(x[2], 1);
constraint int_eq(x[3], 2);
constraint int_eq(x[4], 2);
constraint int_eq(x[5], 1);
constraint int_eq(x[6], 1);
constraint int_eq_reif(runs_ix____00001[1], 0, BOOL____00012) :: defines_var(BOOL____00012);
constraint int_eq_reif(runs_ix____00001[2], 0, BOOL____00014) :: defines_var(BOOL____00014);
constraint int_eq_reif(runs_ix____00001[2], 1, BOOL____00003);
constraint int_eq_reif(runs_ix____00001[3], 0, BOOL____00016) :: defines_var(BOOL____00016);
constraint int_eq_reif(runs_ix____00001[3], 1, BOOL____00005);
constraint int_eq_reif(runs_ix____00001[4], 0, BOOL____00018) :: defines_var(BOOL____00018);
constraint int_eq_reif(runs_ix____00001[4], 1, BOOL____00007);
constraint int_eq_reif(runs_ix____00001[5], 0, BOOL____00020) :: defines_var(BOOL____00020);
constraint int_eq_reif(runs_ix____00001[5], 1, BOOL____00009);
constraint int_eq_reif(runs_ix____00001[6], 0, BOOL____00022) :: defines_var(BOOL____00022);
constraint int_eq_reif(runs_ix____00001[6], 1, BOOL____00011);
constraint int_eq_reif(x[1], x[2], BOOL____00003) :: defines_var(BOOL____00003);
constraint int_eq_reif(x[2], x[3], BOOL____00005) :: defines_var(BOOL____00005);
constraint int_eq_reif(x[3], x[4], BOOL____00007) :: defines_var(BOOL____00007);
constraint int_eq_reif(x[4], x[5], BOOL____00009) :: defines_var(BOOL____00009);
constraint int_eq_reif(x[5], x[6], BOOL____00011) :: defines_var(BOOL____00011);
constraint int_lin_eq([-1, 1, 1, 1, 1, 1, 1], [INT____00024, INT____00013, INT____00015, INT____00017, INT____00019, INT____00021, INT____00023], -1) :: defines_var(INT____00024);
solve satisfy;
