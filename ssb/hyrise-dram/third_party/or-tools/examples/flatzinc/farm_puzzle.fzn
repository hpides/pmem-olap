predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..5] of var int: c :: output_array([0..4]);
var 22..22: number_of_legs = 22;
array [1..7] of var 2..4: x;
constraint global_cardinality(x, [0, 1, 2, 3, 4], c);
constraint int_le(x[1], x[2]);
constraint int_le(x[2], x[3]);
constraint int_le(x[3], x[4]);
constraint int_le(x[4], x[5]);
constraint int_le(x[5], x[6]);
constraint int_le(x[6], x[7]);
constraint int_lin_eq([1, 1, 1, 1, 1, 1, 1], [x[1], x[2], x[3], x[4], x[5], x[6], x[7]], 22);
constraint set_in(x[1], {2, 4});
constraint set_in(x[2], {2, 4});
constraint set_in(x[3], {2, 4});
constraint set_in(x[4], {2, 4});
constraint set_in(x[5], {2, 4});
constraint set_in(x[6], {2, 4});
constraint set_in(x[7], {2, 4});
solve satisfy;
