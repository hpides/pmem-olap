predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var 1..9: A :: output_var;
var 1..9: B :: output_var;
var 1..9: C :: output_var;
var 1..9: D :: output_var;
var 1..9: E :: output_var;
var 1..9: F :: output_var;
var 1..9: G :: output_var;
var 1..9: H :: output_var;
var 1..9: I :: output_var;
var 111..999: INT____00001 :: is_defined_var :: var_is_introduced;
var 11..99: INT____00002 :: is_defined_var :: var_is_introduced;
var 11..99: INT____00004 :: is_defined_var :: var_is_introduced;
var 11..99: INT____00005 :: is_defined_var :: var_is_introduced;
var 1221..9801: INT____00006 :: is_defined_var :: var_is_introduced;
var 1221..98901: s :: output_var = INT____00006;
array [1..9] of var 1..9: x = [A, B, C, D, E, F, G, H, I];
constraint all_different_int(x);
constraint int_eq(INT____00006, 7448);
constraint int_lin_eq([-1, 10, 1], [INT____00002, D, E], 0) :: defines_var(INT____00002);
constraint int_lin_eq([-1, 10, 1], [INT____00004, F, G], 0) :: defines_var(INT____00004);
constraint int_lin_eq([-1, 10, 1], [INT____00005, H, I], 0) :: defines_var(INT____00005);
constraint int_lin_eq([-1, 100, 10, 1], [INT____00001, A, B, C], 0) :: defines_var(INT____00001);
constraint int_lin_le([10, 1, -10, -1], [F, G, H, I], 0);
constraint int_times(INT____00001, INT____00002, INT____00006);
constraint int_times(INT____00004, INT____00005, INT____00006) :: defines_var(INT____00006);
solve  :: int_search(x, first_fail, indomain, complete) satisfy;
