var bool: A :: output_var;
var bool: B :: output_var;
var bool: BOOL____00003 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00004 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00005 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00006 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00007 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00008 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00009 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00010 :: is_defined_var :: var_is_introduced;
var bool: C :: output_var;
var bool: D :: output_var;
var 0..1: INT____00001 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00002 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00011 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00012 :: is_defined_var :: var_is_introduced;
var bool: M1 :: output_var = A;
var bool: M2 :: output_var = BOOL____00003;
var bool: M3 :: output_var = BOOL____00004;
var bool: M4 :: output_var = BOOL____00005;
var bool: M5 :: output_var = BOOL____00006;
var bool: M6 :: output_var = BOOL____00007;
var bool: M7 :: output_var = BOOL____00008;
var bool: M8 :: output_var = BOOL____00010;
constraint array_bool_and([A, B], BOOL____00005) :: defines_var(BOOL____00005);
constraint array_bool_and([A, BOOL____00003], BOOL____00004) :: defines_var(BOOL____00004);
constraint array_bool_and([A, C], BOOL____00006) :: defines_var(BOOL____00006);
constraint array_bool_and([BOOL____00008, M8], BOOL____00009) :: defines_var(BOOL____00009);
constraint array_bool_or([BOOL____00005, BOOL____00006], BOOL____00007) :: defines_var(BOOL____00007);
constraint bool2int(A, INT____00011) :: defines_var(INT____00011);
constraint bool2int(B, INT____00001) :: defines_var(INT____00001);
constraint bool2int(C, INT____00002) :: defines_var(INT____00002);
constraint bool2int(D, INT____00012) :: defines_var(INT____00012);
constraint bool_le_reif(BOOL____00004, BOOL____00007, BOOL____00008) :: defines_var(BOOL____00008);
constraint bool_le_reif(BOOL____00009, A, BOOL____00010) :: defines_var(BOOL____00010);
constraint int_lin_eq([1, 1, 1, 1], [INT____00001, INT____00002, INT____00011, INT____00012], 1);
constraint int_lin_le_reif([-1, -1], [INT____00001, INT____00002], -1, BOOL____00003) :: defines_var(BOOL____00003);
solve satisfy;
