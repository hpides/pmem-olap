predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var bool: BOOL____00001 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00002 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00003 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00004 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00005 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00006 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00007 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00008 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00009 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00010 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00011 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00012 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00013 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00014 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00015 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00016 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00017 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00018 :: is_defined_var :: var_is_introduced;
array [1..10] of var 1..10: x :: output_array([1..10]);
constraint all_different_int(x);
constraint array_bool_or([BOOL____00001, BOOL____00002], true);
constraint array_bool_or([BOOL____00003, BOOL____00004], true);
constraint array_bool_or([BOOL____00005, BOOL____00006], true);
constraint array_bool_or([BOOL____00007, BOOL____00008], true);
constraint array_bool_or([BOOL____00009, BOOL____00010], true);
constraint array_bool_or([BOOL____00011, BOOL____00012], true);
constraint array_bool_or([BOOL____00013, BOOL____00014], true);
constraint array_bool_or([BOOL____00015, BOOL____00016], true);
constraint array_bool_or([BOOL____00017, BOOL____00018], true);
constraint int_eq(x[6], 7);
constraint int_lin_eq_reif([-1, 1], [x[1], x[2]], -2, BOOL____00002) :: defines_var(BOOL____00002);
constraint int_lin_eq_reif([-1, 1], [x[1], x[2]], 3, BOOL____00001) :: defines_var(BOOL____00001);
constraint int_lin_eq_reif([-1, 1], [x[2], x[3]], -2, BOOL____00004) :: defines_var(BOOL____00004);
constraint int_lin_eq_reif([-1, 1], [x[2], x[3]], 3, BOOL____00003) :: defines_var(BOOL____00003);
constraint int_lin_eq_reif([-1, 1], [x[3], x[4]], -2, BOOL____00006) :: defines_var(BOOL____00006);
constraint int_lin_eq_reif([-1, 1], [x[3], x[4]], 3, BOOL____00005) :: defines_var(BOOL____00005);
constraint int_lin_eq_reif([-1, 1], [x[4], x[5]], -2, BOOL____00008) :: defines_var(BOOL____00008);
constraint int_lin_eq_reif([-1, 1], [x[4], x[5]], 3, BOOL____00007) :: defines_var(BOOL____00007);
constraint int_lin_eq_reif([-1, 1], [x[5], x[6]], -2, BOOL____00010) :: defines_var(BOOL____00010);
constraint int_lin_eq_reif([-1, 1], [x[5], x[6]], 3, BOOL____00009) :: defines_var(BOOL____00009);
constraint int_lin_eq_reif([-1, 1], [x[6], x[7]], -2, BOOL____00012) :: defines_var(BOOL____00012);
constraint int_lin_eq_reif([-1, 1], [x[6], x[7]], 3, BOOL____00011) :: defines_var(BOOL____00011);
constraint int_lin_eq_reif([-1, 1], [x[7], x[8]], -2, BOOL____00014) :: defines_var(BOOL____00014);
constraint int_lin_eq_reif([-1, 1], [x[7], x[8]], 3, BOOL____00013) :: defines_var(BOOL____00013);
constraint int_lin_eq_reif([-1, 1], [x[8], x[9]], -2, BOOL____00016) :: defines_var(BOOL____00016);
constraint int_lin_eq_reif([-1, 1], [x[8], x[9]], 3, BOOL____00015) :: defines_var(BOOL____00015);
constraint int_lin_eq_reif([-1, 1], [x[9], x[10]], -2, BOOL____00018) :: defines_var(BOOL____00018);
constraint int_lin_eq_reif([-1, 1], [x[9], x[10]], 3, BOOL____00017) :: defines_var(BOOL____00017);
solve satisfy;
