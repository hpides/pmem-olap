predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var 1..9: C1;
var 1..9: C2;
var 1..9: C3;
var 1..9: C4;
var 1..9: C5;
var 1..9: C6;
var 1..8: C7;
var 4..9: C8;
var 1..8: C9;
var 1..81: INT____00002 :: is_defined_var :: var_is_introduced;
var 2..18: INT____00004 :: is_defined_var :: var_is_introduced;
array [1..9] of var 1..9: LD :: output_array([1..9]) = [C1, C2, C3, C4, C5, C6, C7, C8, C9];
constraint all_different_int(LD);
constraint int_lin_le([1, 1, 1, -1], [C2, C3, C6, C8], -1);
constraint int_lt(C9, C8);
constraint int_plus(C7, C6, C4);
constraint int_ne(C1, 1);
constraint int_ne(C2, 2);
constraint int_ne(C3, 3);
constraint int_ne(C4, 4);
constraint int_ne(C5, 5);
constraint int_ne(C6, 6);
constraint int_ne(C7, 7);
constraint int_ne(C8, 8);
constraint int_plus(C8, C9, INT____00004) :: defines_var(INT____00004);
constraint int_times(C1, C2, INT____00002) :: defines_var(INT____00002);
constraint int_times(INT____00002, C3, INT____00004);
solve satisfy;
