predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var -9..9: INT____00003 :: is_defined_var :: var_is_introduced;
var 0..9: INT____00004 :: is_defined_var :: var_is_introduced;
var -9..9: INT____00005 :: is_defined_var :: var_is_introduced;
var 0..9: INT____00006 :: is_defined_var :: var_is_introduced;
var -9..9: INT____00007 :: is_defined_var :: var_is_introduced;
var 0..9: INT____00008 :: is_defined_var :: var_is_introduced;
var -9..9: INT____00009 :: is_defined_var :: var_is_introduced;
var 0..9: INT____00010 :: is_defined_var :: var_is_introduced;
var -9..9: INT____00011 :: is_defined_var :: var_is_introduced;
var 0..9: INT____00012 :: is_defined_var :: var_is_introduced;
var -9..9: INT____00013 :: is_defined_var :: var_is_introduced;
var 0..9: INT____00014 :: is_defined_var :: var_is_introduced;
var -9..9: INT____00015 :: is_defined_var :: var_is_introduced;
var 0..9: INT____00016 :: is_defined_var :: var_is_introduced;
var -9..9: INT____00017 :: is_defined_var :: var_is_introduced;
var 0..9: INT____00018 :: is_defined_var :: var_is_introduced;
var -9..9: INT____00019 :: is_defined_var :: var_is_introduced;
var 0..9: INT____00020 :: is_defined_var :: var_is_introduced;
var 0..81: INT____00021 :: is_defined_var :: var_is_introduced;
var 0..6: c :: output_var = 4;
array [1..9] of var 0..9: gcc1____00001;
array [1..9] of var 0..9: gcc2____00002;
array [1..6] of var 1..9: variables1 :: output_array([1..6]);
array [1..6] of var 1..9: variables2 :: output_array([1..6]);
constraint global_cardinality(variables1, [1, 2, 3, 4, 5, 6, 7, 8, 9], gcc1____00001);
constraint global_cardinality(variables2, [1, 2, 3, 4, 5, 6, 7, 8, 9], gcc2____00002);
constraint int_abs(INT____00003, INT____00004) :: defines_var(INT____00004);
constraint int_abs(INT____00005, INT____00006) :: defines_var(INT____00006);
constraint int_abs(INT____00007, INT____00008) :: defines_var(INT____00008);
constraint int_abs(INT____00009, INT____00010) :: defines_var(INT____00010);
constraint int_abs(INT____00011, INT____00012) :: defines_var(INT____00012);
constraint int_abs(INT____00013, INT____00014) :: defines_var(INT____00014);
constraint int_abs(INT____00015, INT____00016) :: defines_var(INT____00016);
constraint int_abs(INT____00017, INT____00018) :: defines_var(INT____00018);
constraint int_abs(INT____00019, INT____00020) :: defines_var(INT____00020);
constraint int_div(INT____00021, 2, 4);
constraint int_eq(variables1[1], 9);
constraint int_eq(variables1[2], 9);
constraint int_eq(variables1[3], 9);
constraint int_eq(variables1[4], 9);
constraint int_eq(variables1[5], 9);
constraint int_eq(variables1[6], 1);
constraint int_eq(variables2[1], 9);
constraint int_eq(variables2[2], 1);
constraint int_eq(variables2[3], 1);
constraint int_eq(variables2[4], 1);
constraint int_eq(variables2[5], 1);
constraint int_eq(variables2[6], 8);
constraint int_lin_eq([-1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [INT____00021, INT____00004, INT____00006, INT____00008, INT____00010, INT____00012, INT____00014, INT____00016, INT____00018, INT____00020], 0) :: defines_var(INT____00021);
constraint int_plus(INT____00003, gcc2____00002[1], gcc1____00001[1]) :: defines_var(INT____00003);
constraint int_plus(INT____00005, gcc2____00002[2], gcc1____00001[2]) :: defines_var(INT____00005);
constraint int_plus(INT____00007, gcc2____00002[3], gcc1____00001[3]) :: defines_var(INT____00007);
constraint int_plus(INT____00009, gcc2____00002[4], gcc1____00001[4]) :: defines_var(INT____00009);
constraint int_plus(INT____00011, gcc2____00002[5], gcc1____00001[5]) :: defines_var(INT____00011);
constraint int_plus(INT____00013, gcc2____00002[6], gcc1____00001[6]) :: defines_var(INT____00013);
constraint int_plus(INT____00015, gcc2____00002[7], gcc1____00001[7]) :: defines_var(INT____00015);
constraint int_plus(INT____00017, gcc2____00002[8], gcc1____00001[8]) :: defines_var(INT____00017);
constraint int_plus(INT____00019, gcc2____00002[9], gcc1____00001[9]) :: defines_var(INT____00019);
solve satisfy;
