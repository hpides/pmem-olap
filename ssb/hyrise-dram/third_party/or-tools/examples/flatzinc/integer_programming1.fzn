predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var 1..100: INT____00001 :: is_defined_var :: var_is_introduced;
var 1..100: INT____00002 :: is_defined_var :: var_is_introduced;
var 1..10: a :: output_var;
var 1..10: b :: output_var;
var 1..10: c :: output_var;
var 2..200: z;
constraint all_different_int([a, b, c]);
constraint int_plus(INT____00001, INT____00002, z);
constraint int_times(a, b, INT____00001) :: defines_var(INT____00001);
constraint int_times(b, c, INT____00002) :: defines_var(INT____00002);
solve maximize z;
