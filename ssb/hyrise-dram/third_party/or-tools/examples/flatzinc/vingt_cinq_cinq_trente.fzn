predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var 1..9: C;
var 0..9: E;
var 0..9: G;
var 0..9: I;
var 0..9: N;
var 0..9: Q;
var 0..9: R;
var 1..9: T;
var 1..9: V;
array [1..9] of var 0..9: fd :: output_array([1..9]) = [V, I, N, G, T, C, Q, R, E];
constraint all_different_int(fd);
constraint int_lin_eq([2000, -1001, 10, 1200, 20, 2, -10000, -100009, 10000], [C, E, G, I, N, Q, R, T, V], 0);
solve satisfy;
