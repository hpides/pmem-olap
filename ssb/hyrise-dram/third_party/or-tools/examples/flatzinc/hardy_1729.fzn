var int: INT____00001 :: is_defined_var :: var_is_introduced;
var int: INT____00002 :: is_defined_var :: var_is_introduced;
var int: INT____00003 :: is_defined_var :: var_is_introduced;
var int: INT____00004 :: is_defined_var :: var_is_introduced;
var int: INT____00006 :: is_defined_var :: var_is_introduced;
var int: INT____00007 :: is_defined_var :: var_is_introduced;
var int: INT____00008 :: is_defined_var :: var_is_introduced;
var int: INT____00009 :: is_defined_var :: var_is_introduced;
var int: INT____00010 :: is_defined_var :: var_is_introduced;
var int: X1 :: output_var;
var int: X2 :: output_var;
var int: Y1 :: output_var;
var int: Y2 :: output_var;
var int: Z :: output_var = INT____00010;
constraint int_le(1, INT____00001);
constraint int_le(1, INT____00002);
constraint int_le(1, INT____00003);
constraint int_le(1, INT____00004);
constraint int_le(1, INT____00006);
constraint int_le(1, INT____00007);
constraint int_le(1, INT____00008);
constraint int_le(1, INT____00009);
constraint int_le(1, X1);
constraint int_le(1, X2);
constraint int_le(1, Y1);
constraint int_le(1, Y2);
constraint int_le(2, INT____00010);
constraint int_le(2, Z);
constraint int_le(X1, X2);
constraint int_le(Y1, Y2);
constraint int_ne(X1, Y1);
constraint int_ne(X1, Y2);
constraint int_plus(INT____00002, INT____00004, INT____00010);
constraint int_plus(INT____00007, INT____00009, INT____00010) :: defines_var(INT____00010);
constraint int_times(INT____00001, X1, INT____00002) :: defines_var(INT____00002);
constraint int_times(INT____00003, X2, INT____00004) :: defines_var(INT____00004);
constraint int_times(INT____00006, Y1, INT____00007) :: defines_var(INT____00007);
constraint int_times(INT____00008, Y2, INT____00009) :: defines_var(INT____00009);
constraint int_times(X1, X1, INT____00001) :: defines_var(INT____00001);
constraint int_times(X2, X2, INT____00003) :: defines_var(INT____00003);
constraint int_times(Y1, Y1, INT____00006) :: defines_var(INT____00006);
constraint int_times(Y2, Y2, INT____00008) :: defines_var(INT____00008);
solve satisfy;
