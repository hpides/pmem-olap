predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..9] of set of int: s = [1..3, {1, 3, 4}, {2, 5, 6}, {2, 3, 5}, 1..3, 4..6, {3, 4, 6}, {3, 5, 6}, {2, 3, 5}];
array [1..9] of var 1..6: x :: output_array([1..3, 1..3]);
constraint all_different_int([x[1], x[2], x[3]]);
constraint all_different_int([x[1], x[4], x[7]]);
constraint all_different_int([x[2], x[5], x[8]]);
constraint all_different_int([x[3], x[6], x[9]]);
constraint all_different_int([x[4], x[5], x[6]]);
constraint all_different_int([x[7], x[8], x[9]]);
constraint set_in(x[1], 1..3);
constraint set_in(x[2], {1, 3, 4});
constraint set_in(x[3], {2, 5, 6});
constraint set_in(x[4], {2, 3, 5});
constraint set_in(x[5], 1..3);
constraint set_in(x[6], 4..6);
constraint set_in(x[7], {3, 4, 6});
constraint set_in(x[8], {3, 5, 6});
constraint set_in(x[9], {2, 3, 5});
solve  :: int_search([x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9]], first_fail, indomain, complete) satisfy;
