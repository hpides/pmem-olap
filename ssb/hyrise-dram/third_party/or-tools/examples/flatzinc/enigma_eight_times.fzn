predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var 10000..99999: x;
var 1..9: x1 :: output_var;
var 0..9: x2 :: output_var;
var 0..9: x3 :: output_var;
var 0..9: x4 :: output_var;
var 0..9: x5 :: output_var;
var 80000..99999: y;
var 1..9: y1 :: output_var;
var 0..9: y2 :: output_var;
var 0..9: y3 :: output_var;
var 0..9: y4 :: output_var;
var 0..9: y5 :: output_var;
constraint all_different_int([x1, x2, x3, x4, x5, y1, y2, y3, y4, y5]);
constraint int_lin_eq([-1, 8], [y, x], 0);
constraint int_lin_eq([-1, 10000, 1000, 100, 10, 1], [x, x1, x2, x3, x4, x5], 0);
constraint int_lin_eq([-1, 10000, 1000, 100, 10, 1], [y, y1, y2, y3, y4, y5], 0);
constraint int_lin_le([-1, -1, -1, -1, -1, 1, 1, 1, 1, 1], [x1, x2, x3, x4, x5, y1, y2, y3, y4, y5], -1);
solve  :: int_search([x1, x2, x3, x4, x5, y1, y2, y3, y4, y5], first_fail, indomain, complete) satisfy;
