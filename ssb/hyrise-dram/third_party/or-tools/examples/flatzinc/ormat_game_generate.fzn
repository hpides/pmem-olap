predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..16] of var 0..1: overlays :: output_array([1..4, 1..4]);
constraint int_lin_eq([-1, -1, -1, -1], [overlays[1], overlays[2], overlays[3], overlays[4]], -1);
constraint int_lin_eq([-1, -1, -1, -1], [overlays[1], overlays[5], overlays[9], overlays[13]], -1);
constraint int_lin_eq([-1, -1, -1, -1], [overlays[2], overlays[6], overlays[10], overlays[14]], -1);
constraint int_lin_eq([-1, -1, -1, -1], [overlays[3], overlays[7], overlays[11], overlays[15]], -1);
constraint int_lin_eq([-1, -1, -1, -1], [overlays[4], overlays[8], overlays[12], overlays[16]], -1);
constraint int_lin_eq([-1, -1, -1, -1], [overlays[5], overlays[6], overlays[7], overlays[8]], -1);
constraint int_lin_eq([-1, -1, -1, -1], [overlays[9], overlays[10], overlays[11], overlays[12]], -1);
constraint int_lin_eq([-1, -1, -1, -1], [overlays[13], overlays[14], overlays[15], overlays[16]], -1);
solve satisfy;
