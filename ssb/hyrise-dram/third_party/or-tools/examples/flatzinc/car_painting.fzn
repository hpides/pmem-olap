predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..10] of int: colors = [1, 2, 3, 4, 1, 2, 3, 4, 1, 2];
var bool: BOOL____00019 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00022 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00025 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00028 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00031 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00034 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00037 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00040 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00043 :: is_defined_var :: var_is_introduced;
var -1..8: INT____00001 :: is_defined_var :: var_is_introduced;
var 0..3: INT____00002 :: is_defined_var :: var_is_introduced;
var -2..7: INT____00003 :: is_defined_var :: var_is_introduced;
var 0..3: INT____00004 :: is_defined_var :: var_is_introduced;
var -3..6: INT____00005 :: is_defined_var :: var_is_introduced;
var 0..3: INT____00006 :: is_defined_var :: var_is_introduced;
var -4..5: INT____00007 :: is_defined_var :: var_is_introduced;
var 0..3: INT____00008 :: is_defined_var :: var_is_introduced;
var -5..4: INT____00009 :: is_defined_var :: var_is_introduced;
var 0..3: INT____00010 :: is_defined_var :: var_is_introduced;
var -6..3: INT____00011 :: is_defined_var :: var_is_introduced;
var 0..3: INT____00012 :: is_defined_var :: var_is_introduced;
var -7..2: INT____00013 :: is_defined_var :: var_is_introduced;
var 0..3: INT____00014 :: is_defined_var :: var_is_introduced;
var -8..1: INT____00015 :: is_defined_var :: var_is_introduced;
var 0..3: INT____00016 :: is_defined_var :: var_is_introduced;
var 1..4: INT____00017 :: is_defined_var :: var_is_introduced;
var 1..4: INT____00018 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00020 :: is_defined_var :: var_is_introduced;
var 1..4: INT____00021 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00023 :: is_defined_var :: var_is_introduced;
var 1..4: INT____00024 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00026 :: is_defined_var :: var_is_introduced;
var 1..4: INT____00027 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00029 :: is_defined_var :: var_is_introduced;
var 1..4: INT____00030 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00032 :: is_defined_var :: var_is_introduced;
var 1..4: INT____00033 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00035 :: is_defined_var :: var_is_introduced;
var 1..4: INT____00036 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00038 :: is_defined_var :: var_is_introduced;
var 1..4: INT____00039 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00041 :: is_defined_var :: var_is_introduced;
var 1..4: INT____00042 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00044 :: is_defined_var :: var_is_introduced;
var 0..9: INT____00045 :: is_defined_var :: var_is_introduced;
var 0..42: INT____00046 :: is_defined_var :: var_is_introduced;
var 0..42: distance :: output_var = INT____00046;
var 0..9: num_purgings :: output_var = INT____00045;
array [1..10] of var 1..10: x :: output_array([1..10]);
constraint all_different_int(x);
constraint array_int_element(x[1], colors, INT____00018) :: defines_var(INT____00018);
constraint array_int_element(x[2], colors, INT____00017) :: defines_var(INT____00017);
constraint array_int_element(x[3], colors, INT____00021) :: defines_var(INT____00021);
constraint array_int_element(x[4], colors, INT____00024) :: defines_var(INT____00024);
constraint array_int_element(x[5], colors, INT____00027) :: defines_var(INT____00027);
constraint array_int_element(x[6], colors, INT____00030) :: defines_var(INT____00030);
constraint array_int_element(x[7], colors, INT____00033) :: defines_var(INT____00033);
constraint array_int_element(x[8], colors, INT____00036) :: defines_var(INT____00036);
constraint array_int_element(x[9], colors, INT____00039) :: defines_var(INT____00039);
constraint array_int_element(x[10], colors, INT____00042) :: defines_var(INT____00042);
constraint bool2int(BOOL____00019, INT____00020) :: defines_var(INT____00020);
constraint bool2int(BOOL____00022, INT____00023) :: defines_var(INT____00023);
constraint bool2int(BOOL____00025, INT____00026) :: defines_var(INT____00026);
constraint bool2int(BOOL____00028, INT____00029) :: defines_var(INT____00029);
constraint bool2int(BOOL____00031, INT____00032) :: defines_var(INT____00032);
constraint bool2int(BOOL____00034, INT____00035) :: defines_var(INT____00035);
constraint bool2int(BOOL____00037, INT____00038) :: defines_var(INT____00038);
constraint bool2int(BOOL____00040, INT____00041) :: defines_var(INT____00041);
constraint bool2int(BOOL____00043, INT____00044) :: defines_var(INT____00044);
constraint int_abs(INT____00001, INT____00002) :: defines_var(INT____00002);
constraint int_abs(INT____00003, INT____00004) :: defines_var(INT____00004);
constraint int_abs(INT____00005, INT____00006) :: defines_var(INT____00006);
constraint int_abs(INT____00007, INT____00008) :: defines_var(INT____00008);
constraint int_abs(INT____00009, INT____00010) :: defines_var(INT____00010);
constraint int_abs(INT____00011, INT____00012) :: defines_var(INT____00012);
constraint int_abs(INT____00013, INT____00014) :: defines_var(INT____00014);
constraint int_abs(INT____00015, INT____00016) :: defines_var(INT____00016);
constraint int_lin_eq([-1, 1], [INT____00001, x[2]], 2) :: defines_var(INT____00001);
constraint int_lin_eq([-1, 1], [INT____00003, x[3]], 3) :: defines_var(INT____00003);
constraint int_lin_eq([-1, 1], [INT____00005, x[4]], 4) :: defines_var(INT____00005);
constraint int_lin_eq([-1, 1], [INT____00007, x[5]], 5) :: defines_var(INT____00007);
constraint int_lin_eq([-1, 1], [INT____00009, x[6]], 6) :: defines_var(INT____00009);
constraint int_lin_eq([-1, 1], [INT____00011, x[7]], 7) :: defines_var(INT____00011);
constraint int_lin_eq([-1, 1], [INT____00013, x[8]], 8) :: defines_var(INT____00013);
constraint int_lin_eq([-1, 1], [INT____00015, x[9]], 9) :: defines_var(INT____00015);
constraint int_lin_eq([-1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [INT____00045, INT____00020, INT____00023, INT____00026, INT____00029, INT____00032, INT____00035, INT____00038, INT____00041, INT____00044], 0) :: defines_var(INT____00045);
constraint int_lin_eq([-1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1], [INT____00046, INT____00002, INT____00004, INT____00006, INT____00008, INT____00010, INT____00012, INT____00014, INT____00016, x[1], x[10]], -9) :: defines_var(INT____00046);
constraint int_lin_le([-1], [x[10]], -7);
constraint int_lin_le([1], [x[1]], 4);
constraint int_ne_reif(INT____00017, INT____00018, BOOL____00019) :: defines_var(BOOL____00019);
constraint int_ne_reif(INT____00021, INT____00017, BOOL____00022) :: defines_var(BOOL____00022);
constraint int_ne_reif(INT____00024, INT____00021, BOOL____00025) :: defines_var(BOOL____00025);
constraint int_ne_reif(INT____00027, INT____00024, BOOL____00028) :: defines_var(BOOL____00028);
constraint int_ne_reif(INT____00030, INT____00027, BOOL____00031) :: defines_var(BOOL____00031);
constraint int_ne_reif(INT____00033, INT____00030, BOOL____00034) :: defines_var(BOOL____00034);
constraint int_ne_reif(INT____00036, INT____00033, BOOL____00037) :: defines_var(BOOL____00037);
constraint int_ne_reif(INT____00039, INT____00036, BOOL____00040) :: defines_var(BOOL____00040);
constraint int_ne_reif(INT____00042, INT____00039, BOOL____00043) :: defines_var(BOOL____00043);
solve  :: int_search(x, most_constrained, indomain_split, complete) minimize INT____00045;
