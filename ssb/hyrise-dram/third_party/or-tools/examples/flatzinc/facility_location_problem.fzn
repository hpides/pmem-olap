array [1..12] of int: costs = [20, 40, 50, 48, 15, 26, 26, 35, 18, 24, 50, 35];
array [1..3] of int: demands = [80, 70, 40];
array [1..4] of int: fixed_cost = [400, 500, 300, 150];
var bool: BOOL____00014 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00016 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00018 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00020 :: is_defined_var :: var_is_introduced;
var 0..100: INT____00001 :: is_defined_var :: var_is_introduced;
var 0..100: INT____00002 :: is_defined_var :: var_is_introduced;
var 0..100: INT____00003 :: is_defined_var :: var_is_introduced;
var 0..100: INT____00004 :: is_defined_var :: var_is_introduced;
var 0..100: INT____00005 :: is_defined_var :: var_is_introduced;
var 0..100: INT____00006 :: is_defined_var :: var_is_introduced;
var 0..100: INT____00007 :: is_defined_var :: var_is_introduced;
var 0..100: INT____00008 :: is_defined_var :: var_is_introduced;
var 0..100: INT____00009 :: is_defined_var :: var_is_introduced;
var 0..100: INT____00010 :: is_defined_var :: var_is_introduced;
var 0..100: INT____00011 :: is_defined_var :: var_is_introduced;
var 0..100: INT____00012 :: is_defined_var :: var_is_introduced;
var 400..11400: INT____00021 :: is_defined_var :: var_is_introduced;
var 0..11400: INT____00022 :: is_defined_var :: var_is_introduced;
var 500..9400: INT____00023 :: is_defined_var :: var_is_introduced;
var 0..9400: INT____00024 :: is_defined_var :: var_is_introduced;
var 300..8200: INT____00025 :: is_defined_var :: var_is_introduced;
var 0..8200: INT____00026 :: is_defined_var :: var_is_introduced;
var 150..11050: INT____00027 :: is_defined_var :: var_is_introduced;
var 0..11050: INT____00028 :: is_defined_var :: var_is_introduced;
var 0..10000: INT____00029 :: is_defined_var :: var_is_introduced;
array [1..4] of var 0..1: open :: output_array([1..4]);
array [1..12] of var 0..100: ships :: output_array([1..4, 1..3]);
var 0..10000: tot_cost :: output_var = INT____00029;
constraint array_bool_or([BOOL____00020, BOOL____00016], true);
constraint bool_le(BOOL____00014, BOOL____00016);
constraint int_eq_reif(open[1], 1, BOOL____00014);
constraint int_eq_reif(open[2], 1, BOOL____00016);
constraint int_eq_reif(open[3], 1, BOOL____00018);
constraint int_eq_reif(open[4], 1, BOOL____00020);
constraint int_lin_eq([-1, 20, 40, 50], [INT____00021, ships[1], ships[2], ships[3]], -400) :: defines_var(INT____00021);
constraint int_lin_eq([-1, 24, 50, 35], [INT____00027, ships[10], ships[11], ships[12]], -150) :: defines_var(INT____00027);
constraint int_lin_eq([-1, 26, 35, 18], [INT____00025, ships[7], ships[8], ships[9]], -300) :: defines_var(INT____00025);
constraint int_lin_eq([-1, 48, 15, 26], [INT____00023, ships[4], ships[5], ships[6]], -500) :: defines_var(INT____00023);
constraint int_lin_eq([-1, 1, 1, 1, 1], [INT____00029, INT____00022, INT____00024, INT____00026, INT____00028], 0) :: defines_var(INT____00029);
constraint int_lin_le([1, 1, 1], [INT____00001, INT____00002, INT____00003], 100);
constraint int_lin_le([1, 1, 1], [INT____00004, INT____00005, INT____00006], 100);
constraint int_lin_le([1, 1, 1], [INT____00007, INT____00008, INT____00009], 100);
constraint int_lin_le([1, 1, 1], [INT____00010, INT____00011, INT____00012], 100);
constraint int_lin_le([-1, -1, -1, -1], [INT____00001, INT____00004, INT____00007, INT____00010], -80);
constraint int_lin_le([-1, -1, -1, -1], [INT____00002, INT____00005, INT____00008, INT____00011], -70);
constraint int_lin_le([-1, -1, -1, -1], [INT____00003, INT____00006, INT____00009, INT____00012], -40);
constraint int_lin_le([1, 1, 1, 1], [open[1], open[2], open[3], open[4]], 3);
constraint int_lin_le_reif([-1, -1, -1], [ships[1], ships[2], ships[3]], -1, BOOL____00014) :: defines_var(BOOL____00014);
constraint int_lin_le_reif([-1, -1, -1], [ships[4], ships[5], ships[6]], -1, BOOL____00016) :: defines_var(BOOL____00016);
constraint int_lin_le_reif([-1, -1, -1], [ships[7], ships[8], ships[9]], -1, BOOL____00018) :: defines_var(BOOL____00018);
constraint int_lin_le_reif([-1, -1, -1], [ships[10], ships[11], ships[12]], -1, BOOL____00020) :: defines_var(BOOL____00020);
constraint int_times(open[1], INT____00021, INT____00022) :: defines_var(INT____00022);
constraint int_times(open[1], ships[1], INT____00001) :: defines_var(INT____00001);
constraint int_times(open[1], ships[2], INT____00002) :: defines_var(INT____00002);
constraint int_times(open[1], ships[3], INT____00003) :: defines_var(INT____00003);
constraint int_times(open[2], INT____00023, INT____00024) :: defines_var(INT____00024);
constraint int_times(open[2], ships[4], INT____00004) :: defines_var(INT____00004);
constraint int_times(open[2], ships[5], INT____00005) :: defines_var(INT____00005);
constraint int_times(open[2], ships[6], INT____00006) :: defines_var(INT____00006);
constraint int_times(open[3], INT____00025, INT____00026) :: defines_var(INT____00026);
constraint int_times(open[3], ships[7], INT____00007) :: defines_var(INT____00007);
constraint int_times(open[3], ships[8], INT____00008) :: defines_var(INT____00008);
constraint int_times(open[3], ships[9], INT____00009) :: defines_var(INT____00009);
constraint int_times(open[4], INT____00027, INT____00028) :: defines_var(INT____00028);
constraint int_times(open[4], ships[10], INT____00010) :: defines_var(INT____00010);
constraint int_times(open[4], ships[11], INT____00011) :: defines_var(INT____00011);
constraint int_times(open[4], ships[12], INT____00012) :: defines_var(INT____00012);
solve  :: int_search([open[1], open[2], open[3], open[4], ships[1], ships[2], ships[3], ships[4], ships[5], ships[6], ships[7], ships[8], ships[9], ships[10], ships[11], ships[12]], smallest, indomain_split, complete) minimize INT____00029;
