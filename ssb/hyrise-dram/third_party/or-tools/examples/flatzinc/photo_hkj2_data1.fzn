predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..34] of int: preferences = [0, 2, 0, 4, 0, 7, 1, 4, 1, 8, 2, 3, 2, 4, 3, 0, 3, 4, 4, 5, 4, 0, 5, 0, 5, 8, 6, 2, 6, 7, 7, 8, 7, 6];
var bool: BOOL____00001 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00002 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00005 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00006 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00008 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00011 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00012 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00014 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00017 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00018 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00020 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00023 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00024 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00026 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00029 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00030 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00032 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00035 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00036 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00040 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00041 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00045 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00046 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00050 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00051 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00053 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00056 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00057 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00061 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00062 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00066 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00067 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00071 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00072 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00074 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00077 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00078 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00082 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00083 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00087 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00088 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00092 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00093 :: is_defined_var :: var_is_introduced;
var -8..8: INT____00003 :: is_defined_var :: var_is_introduced;
var 0..8: INT____00004 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00007 :: is_defined_var :: var_is_introduced;
var -8..8: INT____00009 :: is_defined_var :: var_is_introduced;
var 0..8: INT____00010 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00013 :: is_defined_var :: var_is_introduced;
var -8..8: INT____00015 :: is_defined_var :: var_is_introduced;
var 0..8: INT____00016 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00019 :: is_defined_var :: var_is_introduced;
var -8..8: INT____00021 :: is_defined_var :: var_is_introduced;
var 0..8: INT____00022 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00025 :: is_defined_var :: var_is_introduced;
var -8..8: INT____00027 :: is_defined_var :: var_is_introduced;
var 0..8: INT____00028 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00031 :: is_defined_var :: var_is_introduced;
var -8..8: INT____00033 :: is_defined_var :: var_is_introduced;
var 0..8: INT____00034 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00037 :: is_defined_var :: var_is_introduced;
var -8..8: INT____00038 :: is_defined_var :: var_is_introduced;
var 0..8: INT____00039 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00042 :: is_defined_var :: var_is_introduced;
var -8..8: INT____00043 :: is_defined_var :: var_is_introduced;
var 0..8: INT____00044 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00047 :: is_defined_var :: var_is_introduced;
var -8..8: INT____00048 :: is_defined_var :: var_is_introduced;
var 0..8: INT____00049 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00052 :: is_defined_var :: var_is_introduced;
var -8..8: INT____00054 :: is_defined_var :: var_is_introduced;
var 0..8: INT____00055 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00058 :: is_defined_var :: var_is_introduced;
var -8..8: INT____00059 :: is_defined_var :: var_is_introduced;
var 0..8: INT____00060 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00063 :: is_defined_var :: var_is_introduced;
var -8..8: INT____00064 :: is_defined_var :: var_is_introduced;
var 0..8: INT____00065 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00068 :: is_defined_var :: var_is_introduced;
var -8..8: INT____00069 :: is_defined_var :: var_is_introduced;
var 0..8: INT____00070 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00073 :: is_defined_var :: var_is_introduced;
var -8..8: INT____00075 :: is_defined_var :: var_is_introduced;
var 0..8: INT____00076 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00079 :: is_defined_var :: var_is_introduced;
var -8..8: INT____00080 :: is_defined_var :: var_is_introduced;
var 0..8: INT____00081 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00084 :: is_defined_var :: var_is_introduced;
var -8..8: INT____00085 :: is_defined_var :: var_is_introduced;
var 0..8: INT____00086 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00089 :: is_defined_var :: var_is_introduced;
var -8..8: INT____00090 :: is_defined_var :: var_is_introduced;
var 0..8: INT____00091 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00094 :: is_defined_var :: var_is_introduced;
var 0..17: INT____00095 :: is_defined_var :: var_is_introduced;
array [1..9] of var 0..8: positions :: output_array([0..8]);
var 0..17: z :: output_var = INT____00095;
constraint all_different_int(positions);
constraint array_bool_and([BOOL____00005, BOOL____00002, BOOL____00001], BOOL____00006) :: defines_var(BOOL____00006);
constraint array_bool_and([BOOL____00011, BOOL____00008, BOOL____00001], BOOL____00012) :: defines_var(BOOL____00012);
constraint array_bool_and([BOOL____00017, BOOL____00014, BOOL____00001], BOOL____00018) :: defines_var(BOOL____00018);
constraint array_bool_and([BOOL____00023, BOOL____00008, BOOL____00020], BOOL____00024) :: defines_var(BOOL____00024);
constraint array_bool_and([BOOL____00029, BOOL____00026, BOOL____00020], BOOL____00030) :: defines_var(BOOL____00030);
constraint array_bool_and([BOOL____00035, BOOL____00032, BOOL____00002], BOOL____00036) :: defines_var(BOOL____00036);
constraint array_bool_and([BOOL____00040, BOOL____00008, BOOL____00002], BOOL____00041) :: defines_var(BOOL____00041);
constraint array_bool_and([BOOL____00045, BOOL____00001, BOOL____00032], BOOL____00046) :: defines_var(BOOL____00046);
constraint array_bool_and([BOOL____00050, BOOL____00008, BOOL____00032], BOOL____00051) :: defines_var(BOOL____00051);
constraint array_bool_and([BOOL____00056, BOOL____00053, BOOL____00008], BOOL____00057) :: defines_var(BOOL____00057);
constraint array_bool_and([BOOL____00061, BOOL____00001, BOOL____00008], BOOL____00062) :: defines_var(BOOL____00062);
constraint array_bool_and([BOOL____00066, BOOL____00001, BOOL____00053], BOOL____00067) :: defines_var(BOOL____00067);
constraint array_bool_and([BOOL____00071, BOOL____00026, BOOL____00053], BOOL____00072) :: defines_var(BOOL____00072);
constraint array_bool_and([BOOL____00077, BOOL____00002, BOOL____00074], BOOL____00078) :: defines_var(BOOL____00078);
constraint array_bool_and([BOOL____00082, BOOL____00014, BOOL____00074], BOOL____00083) :: defines_var(BOOL____00083);
constraint array_bool_and([BOOL____00087, BOOL____00026, BOOL____00014], BOOL____00088) :: defines_var(BOOL____00088);
constraint array_bool_and([BOOL____00092, BOOL____00074, BOOL____00014], BOOL____00093) :: defines_var(BOOL____00093);
constraint bool2int(BOOL____00006, INT____00007) :: defines_var(INT____00007);
constraint bool2int(BOOL____00012, INT____00013) :: defines_var(INT____00013);
constraint bool2int(BOOL____00018, INT____00019) :: defines_var(INT____00019);
constraint bool2int(BOOL____00024, INT____00025) :: defines_var(INT____00025);
constraint bool2int(BOOL____00030, INT____00031) :: defines_var(INT____00031);
constraint bool2int(BOOL____00036, INT____00037) :: defines_var(INT____00037);
constraint bool2int(BOOL____00041, INT____00042) :: defines_var(INT____00042);
constraint bool2int(BOOL____00046, INT____00047) :: defines_var(INT____00047);
constraint bool2int(BOOL____00051, INT____00052) :: defines_var(INT____00052);
constraint bool2int(BOOL____00057, INT____00058) :: defines_var(INT____00058);
constraint bool2int(BOOL____00062, INT____00063) :: defines_var(INT____00063);
constraint bool2int(BOOL____00067, INT____00068) :: defines_var(INT____00068);
constraint bool2int(BOOL____00072, INT____00073) :: defines_var(INT____00073);
constraint bool2int(BOOL____00078, INT____00079) :: defines_var(INT____00079);
constraint bool2int(BOOL____00083, INT____00084) :: defines_var(INT____00084);
constraint bool2int(BOOL____00088, INT____00089) :: defines_var(INT____00089);
constraint bool2int(BOOL____00093, INT____00094) :: defines_var(INT____00094);
constraint int_abs(INT____00003, INT____00004) :: defines_var(INT____00004);
constraint int_abs(INT____00009, INT____00010) :: defines_var(INT____00010);
constraint int_abs(INT____00015, INT____00016) :: defines_var(INT____00016);
constraint int_abs(INT____00021, INT____00022) :: defines_var(INT____00022);
constraint int_abs(INT____00027, INT____00028) :: defines_var(INT____00028);
constraint int_abs(INT____00033, INT____00034) :: defines_var(INT____00034);
constraint int_abs(INT____00038, INT____00039) :: defines_var(INT____00039);
constraint int_abs(INT____00043, INT____00044) :: defines_var(INT____00044);
constraint int_abs(INT____00048, INT____00049) :: defines_var(INT____00049);
constraint int_abs(INT____00054, INT____00055) :: defines_var(INT____00055);
constraint int_abs(INT____00059, INT____00060) :: defines_var(INT____00060);
constraint int_abs(INT____00064, INT____00065) :: defines_var(INT____00065);
constraint int_abs(INT____00069, INT____00070) :: defines_var(INT____00070);
constraint int_abs(INT____00075, INT____00076) :: defines_var(INT____00076);
constraint int_abs(INT____00080, INT____00081) :: defines_var(INT____00081);
constraint int_abs(INT____00085, INT____00086) :: defines_var(INT____00086);
constraint int_abs(INT____00090, INT____00091) :: defines_var(INT____00091);
constraint int_eq_reif(INT____00004, 1, BOOL____00005) :: defines_var(BOOL____00005);
constraint int_eq_reif(INT____00010, 1, BOOL____00011) :: defines_var(BOOL____00011);
constraint int_eq_reif(INT____00016, 1, BOOL____00017) :: defines_var(BOOL____00017);
constraint int_eq_reif(INT____00022, 1, BOOL____00023) :: defines_var(BOOL____00023);
constraint int_eq_reif(INT____00028, 1, BOOL____00029) :: defines_var(BOOL____00029);
constraint int_eq_reif(INT____00034, 1, BOOL____00035) :: defines_var(BOOL____00035);
constraint int_eq_reif(INT____00039, 1, BOOL____00040) :: defines_var(BOOL____00040);
constraint int_eq_reif(INT____00044, 1, BOOL____00045) :: defines_var(BOOL____00045);
constraint int_eq_reif(INT____00049, 1, BOOL____00050) :: defines_var(BOOL____00050);
constraint int_eq_reif(INT____00055, 1, BOOL____00056) :: defines_var(BOOL____00056);
constraint int_eq_reif(INT____00060, 1, BOOL____00061) :: defines_var(BOOL____00061);
constraint int_eq_reif(INT____00065, 1, BOOL____00066) :: defines_var(BOOL____00066);
constraint int_eq_reif(INT____00070, 1, BOOL____00071) :: defines_var(BOOL____00071);
constraint int_eq_reif(INT____00076, 1, BOOL____00077) :: defines_var(BOOL____00077);
constraint int_eq_reif(INT____00081, 1, BOOL____00082) :: defines_var(BOOL____00082);
constraint int_eq_reif(INT____00086, 1, BOOL____00087) :: defines_var(BOOL____00087);
constraint int_eq_reif(INT____00091, 1, BOOL____00092) :: defines_var(BOOL____00092);
constraint int_le_reif(1, positions[1], BOOL____00001) :: defines_var(BOOL____00001);
constraint int_le_reif(1, positions[2], BOOL____00020) :: defines_var(BOOL____00020);
constraint int_le_reif(1, positions[3], BOOL____00002) :: defines_var(BOOL____00002);
constraint int_le_reif(1, positions[4], BOOL____00032) :: defines_var(BOOL____00032);
constraint int_le_reif(1, positions[5], BOOL____00008) :: defines_var(BOOL____00008);
constraint int_le_reif(1, positions[6], BOOL____00053) :: defines_var(BOOL____00053);
constraint int_le_reif(1, positions[7], BOOL____00074) :: defines_var(BOOL____00074);
constraint int_le_reif(1, positions[8], BOOL____00014) :: defines_var(BOOL____00014);
constraint int_le_reif(1, positions[9], BOOL____00026) :: defines_var(BOOL____00026);
constraint int_lin_eq([-1, -1, 1], [INT____00043, positions[1], positions[4]], 0) :: defines_var(INT____00043);
constraint int_lin_eq([-1, -1, 1], [INT____00059, positions[1], positions[5]], 0) :: defines_var(INT____00059);
constraint int_lin_eq([-1, -1, 1], [INT____00064, positions[1], positions[6]], 0) :: defines_var(INT____00064);
constraint int_lin_eq([-1, -1, 1], [INT____00075, positions[3], positions[7]], 0) :: defines_var(INT____00075);
constraint int_lin_eq([-1, -1, 1], [INT____00090, positions[7], positions[8]], 0) :: defines_var(INT____00090);
constraint int_lin_eq([-1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [INT____00095, INT____00007, INT____00013, INT____00019, INT____00025, INT____00031, INT____00037, INT____00042, INT____00047, INT____00052, INT____00058, INT____00063, INT____00068, INT____00073, INT____00079, INT____00084, INT____00089, INT____00094], 0) :: defines_var(INT____00095);
constraint int_plus(INT____00003, positions[3], positions[1]) :: defines_var(INT____00003);
constraint int_plus(INT____00009, positions[5], positions[1]) :: defines_var(INT____00009);
constraint int_plus(INT____00015, positions[8], positions[1]) :: defines_var(INT____00015);
constraint int_plus(INT____00021, positions[5], positions[2]) :: defines_var(INT____00021);
constraint int_plus(INT____00027, positions[9], positions[2]) :: defines_var(INT____00027);
constraint int_plus(INT____00033, positions[4], positions[3]) :: defines_var(INT____00033);
constraint int_plus(INT____00038, positions[5], positions[3]) :: defines_var(INT____00038);
constraint int_plus(INT____00048, positions[5], positions[4]) :: defines_var(INT____00048);
constraint int_plus(INT____00054, positions[6], positions[5]) :: defines_var(INT____00054);
constraint int_plus(INT____00069, positions[9], positions[6]) :: defines_var(INT____00069);
constraint int_plus(INT____00080, positions[8], positions[7]) :: defines_var(INT____00080);
constraint int_plus(INT____00085, positions[9], positions[8]) :: defines_var(INT____00085);
solve  :: int_search(positions, first_fail, indomain, complete) satisfy;
