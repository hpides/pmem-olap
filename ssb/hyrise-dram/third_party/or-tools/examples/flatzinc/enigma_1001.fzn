predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var 10..99: Divisor;
array [1..6] of var 1..99: Multipliers;
array [1..6] of var int: Numbers;
var 10..9801: INT____00006 :: var_is_introduced = Numbers[6];
var 10..9801: INT____00005 :: var_is_introduced = Numbers[5];
var 10..9801: INT____00004 :: var_is_introduced = Numbers[4];
var 10..9801: INT____00003 :: var_is_introduced = Numbers[3];
var 10..9801: INT____00002 :: var_is_introduced = Numbers[2];
var 10..9801: INT____00001 :: var_is_introduced = Numbers[1];
array [1..12] of var 1..9: X :: output_array([1..12]);
constraint all_different_int(Multipliers);
constraint int_eq(Multipliers[1], 2);
constraint int_lin_eq([1, -100, -10, -1], [Numbers[1], X[1], X[2], X[3]], 0);
constraint int_lin_eq([1, -100, -10, -1], [Numbers[2], X[3], X[4], X[5]], 0);
constraint int_lin_eq([1, -100, -10, -1], [Numbers[3], X[5], X[6], X[7]], 0);
constraint int_lin_eq([1, -100, -10, -1], [Numbers[4], X[7], X[8], X[9]], 0);
constraint int_lin_eq([1, -100, -10, -1], [Numbers[5], X[9], X[10], X[11]], 0);
constraint int_lin_eq([1, -1, -100, -10], [Numbers[6], X[1], X[11], X[12]], 0);
constraint int_ne(X[2], X[1]);
constraint int_ne(X[3], X[2]);
constraint int_ne(X[4], X[3]);
constraint int_ne(X[5], X[4]);
constraint int_ne(X[6], X[5]);
constraint int_ne(X[7], X[6]);
constraint int_ne(X[8], X[7]);
constraint int_ne(X[9], X[8]);
constraint int_ne(X[10], X[9]);
constraint int_ne(X[11], X[10]);
constraint int_ne(X[12], X[1]);
constraint int_ne(X[12], X[11]);
constraint int_times(Multipliers[1], Divisor, Numbers[1]);
constraint int_times(Multipliers[2], Divisor, Numbers[2]);
constraint int_times(Multipliers[3], Divisor, Numbers[3]);
constraint int_times(Multipliers[4], Divisor, Numbers[4]);
constraint int_times(Multipliers[5], Divisor, Numbers[5]);
constraint int_times(Multipliers[6], Divisor, Numbers[6]);
solve  :: int_search(X, first_fail, indomain, complete) satisfy;
