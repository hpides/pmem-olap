array [1..30] of int: Dependencies = [2, 1, 4, 1, 3, 2, 5, 3, 5, 4, 7, 3, 7, 4, 6, 4, 6, 3, 8, 6, 9, 8, 10, 7, 10, 5, 10, 9, 11, 10];
array [1..11] of int: Times = [7, 3, 1, 8, 1, 1, 1, 3, 2, 1, 1];
var 0..330: INT____00001 :: is_defined_var :: var_is_introduced;
array [1..11] of var 0..30: Start :: output_array([1..11]);
var 0..330: SumTimes :: output_var = INT____00001;
constraint int_lin_eq([-1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [INT____00001, Start[1], Start[2], Start[3], Start[4], Start[5], Start[6], Start[7], Start[8], Start[9], Start[10], Start[11]], 0) :: defines_var(INT____00001);
constraint int_lin_le([1, -1], [Start[1], Start[2]], -7);
constraint int_lin_le([1, -1], [Start[1], Start[4]], -7);
constraint int_lin_le([1, -1], [Start[2], Start[3]], -3);
constraint int_lin_le([1, -1], [Start[3], Start[5]], -1);
constraint int_lin_le([1, -1], [Start[3], Start[6]], -1);
constraint int_lin_le([1, -1], [Start[3], Start[7]], -1);
constraint int_lin_le([1, -1], [Start[4], Start[5]], -8);
constraint int_lin_le([1, -1], [Start[4], Start[6]], -8);
constraint int_lin_le([1, -1], [Start[4], Start[7]], -8);
constraint int_lin_le([1, -1], [Start[5], Start[10]], -1);
constraint int_lin_le([1, -1], [Start[6], Start[8]], -1);
constraint int_lin_le([1, -1], [Start[7], Start[10]], -1);
constraint int_lin_le([1, -1], [Start[8], Start[9]], -3);
constraint int_lin_le([1, -1], [Start[9], Start[10]], -2);
constraint int_lin_le([1, -1], [Start[10], Start[11]], -1);
solve minimize Start[11];
