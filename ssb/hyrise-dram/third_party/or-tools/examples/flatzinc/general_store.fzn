predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var 0..9: A;
var 0..9: B;
var 0..9: C;
var 0..9: E;
var 0..9: H;
var 0..9: L;
var 0..9: O;
var 0..9: P;
var 0..9: S;
var 0..9: W;
array [1..10] of var 0..9: x :: output_array([1..10]) = [C, H, E, S, A, B, O, W, P, L];
constraint all_different_int(x);
constraint int_lin_eq([-698690, 101000, 223000, 2342, 25001, -89790, 10610, 1011032, 12049, 111], [A, B, C, E, H, L, O, P, S, W], 0);
solve  :: int_search(x, first_fail, indomain_min, complete) satisfy;
