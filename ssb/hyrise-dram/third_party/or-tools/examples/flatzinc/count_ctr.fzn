var bool: BOOL____00001 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00003 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00005 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00007 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00009 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00002 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00004 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00006 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00008 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00010 :: is_defined_var :: var_is_introduced;
var 1..5: nvar :: output_var;
var 0..5: val :: output_var;
array [1..5] of var 1..5: x :: output_array([1..5]);
constraint bool2int(BOOL____00001, INT____00002) :: defines_var(INT____00002);
constraint bool2int(BOOL____00003, INT____00004) :: defines_var(INT____00004);
constraint bool2int(BOOL____00005, INT____00006) :: defines_var(INT____00006);
constraint bool2int(BOOL____00007, INT____00008) :: defines_var(INT____00008);
constraint bool2int(BOOL____00009, INT____00010) :: defines_var(INT____00010);
constraint int_eq(4, x[1]);
constraint int_eq(4, x[4]);
constraint int_eq(5, x[2]);
constraint int_eq(5, x[3]);
constraint int_eq(5, x[5]);
constraint int_le_reif(val, x[1], BOOL____00001) :: defines_var(BOOL____00001);
constraint int_le_reif(val, x[2], BOOL____00003) :: defines_var(BOOL____00003);
constraint int_le_reif(val, x[3], BOOL____00005) :: defines_var(BOOL____00005);
constraint int_le_reif(val, x[4], BOOL____00007) :: defines_var(BOOL____00007);
constraint int_le_reif(val, x[5], BOOL____00009) :: defines_var(BOOL____00009);
constraint int_lin_le([-1, -1, -1, -1, -1, 1], [INT____00002, INT____00004, INT____00006, INT____00008, INT____00010, nvar], 0);
solve satisfy;
