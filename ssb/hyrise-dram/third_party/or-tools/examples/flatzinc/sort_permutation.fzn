predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..6] of var 1..9: from :: output_array([1..6]);
array [1..6] of var 1..6: permutation :: output_array([1..6]);
array [1..6] of var 1..9: to :: output_array([1..6]);
constraint all_different_int(permutation);
constraint array_var_int_element(permutation[1], from, to[1]);
constraint array_var_int_element(permutation[1], to, from[1]);
constraint array_var_int_element(permutation[2], from, to[2]);
constraint array_var_int_element(permutation[2], to, from[2]);
constraint array_var_int_element(permutation[3], from, to[3]);
constraint array_var_int_element(permutation[3], to, from[3]);
constraint array_var_int_element(permutation[4], from, to[4]);
constraint array_var_int_element(permutation[4], to, from[4]);
constraint array_var_int_element(permutation[5], from, to[5]);
constraint array_var_int_element(permutation[5], to, from[5]);
constraint array_var_int_element(permutation[6], from, to[6]);
constraint array_var_int_element(permutation[6], to, from[6]);
constraint int_eq(from[1], 1);
constraint int_eq(from[2], 9);
constraint int_eq(from[3], 1);
constraint int_eq(from[4], 5);
constraint int_eq(from[5], 2);
constraint int_eq(from[6], 1);
constraint int_eq(to[1], 1);
constraint int_eq(to[2], 1);
constraint int_eq(to[3], 1);
constraint int_eq(to[4], 2);
constraint int_eq(to[5], 5);
constraint int_eq(to[6], 9);
constraint int_le(to[1], to[2]);
constraint int_le(to[2], to[3]);
constraint int_le(to[3], to[4]);
constraint int_le(to[4], to[5]);
constraint int_le(to[5], to[6]);
solve satisfy;
