var bool: BOOL____00001 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00002 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00003 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00005 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00006 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00007 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00009 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00010 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00011 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00013 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00014 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00015 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00017 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00018 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00019 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00021 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00022 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00023 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00025 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00026 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00027 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00029 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00030 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00031 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00033 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00034 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00035 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00004 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00008 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00012 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00016 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00020 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00024 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00028 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00032 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00036 :: is_defined_var :: var_is_introduced;
var 0..9: nchange :: output_var = 3;
array [1..10] of var 1..3: x :: output_array([1..10]);
array [1..10] of var 1..8: y :: output_array([1..10]);
constraint array_bool_or([BOOL____00001, BOOL____00002], BOOL____00003) :: defines_var(BOOL____00003);
constraint array_bool_or([BOOL____00005, BOOL____00006], BOOL____00007) :: defines_var(BOOL____00007);
constraint array_bool_or([BOOL____00009, BOOL____00010], BOOL____00011) :: defines_var(BOOL____00011);
constraint array_bool_or([BOOL____00013, BOOL____00014], BOOL____00015) :: defines_var(BOOL____00015);
constraint array_bool_or([BOOL____00017, BOOL____00018], BOOL____00019) :: defines_var(BOOL____00019);
constraint array_bool_or([BOOL____00021, BOOL____00022], BOOL____00023) :: defines_var(BOOL____00023);
constraint array_bool_or([BOOL____00025, BOOL____00026], BOOL____00027) :: defines_var(BOOL____00027);
constraint array_bool_or([BOOL____00029, BOOL____00030], BOOL____00031) :: defines_var(BOOL____00031);
constraint array_bool_or([BOOL____00033, BOOL____00034], BOOL____00035) :: defines_var(BOOL____00035);
constraint bool2int(BOOL____00003, INT____00004) :: defines_var(INT____00004);
constraint bool2int(BOOL____00007, INT____00008) :: defines_var(INT____00008);
constraint bool2int(BOOL____00011, INT____00012) :: defines_var(INT____00012);
constraint bool2int(BOOL____00015, INT____00016) :: defines_var(INT____00016);
constraint bool2int(BOOL____00019, INT____00020) :: defines_var(INT____00020);
constraint bool2int(BOOL____00023, INT____00024) :: defines_var(INT____00024);
constraint bool2int(BOOL____00027, INT____00028) :: defines_var(INT____00028);
constraint bool2int(BOOL____00031, INT____00032) :: defines_var(INT____00032);
constraint bool2int(BOOL____00035, INT____00036) :: defines_var(INT____00036);
constraint int_eq(1, x[7]);
constraint int_eq(1, x[8]);
constraint int_eq(1, x[9]);
constraint int_eq(3, x[1]);
constraint int_eq(3, x[2]);
constraint int_eq(3, x[3]);
constraint int_eq(3, x[4]);
constraint int_eq(3, x[5]);
constraint int_eq(3, x[6]);
constraint int_eq(3, x[10]);
constraint int_eq(3, y[7]);
constraint int_eq(4, y[5]);
constraint int_eq(5, y[1]);
constraint int_eq(6, y[8]);
constraint int_eq(6, y[9]);
constraint int_eq(7, y[2]);
constraint int_eq(7, y[3]);
constraint int_eq(7, y[6]);
constraint int_eq(7, y[10]);
constraint int_eq(8, y[4]);
constraint int_lin_eq([-1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, INT____00004, INT____00008, INT____00012, INT____00016, INT____00020, INT____00024, INT____00028, INT____00032, INT____00036], 0);
constraint int_lt_reif(y[2], y[1], BOOL____00002) :: defines_var(BOOL____00002);
constraint int_lt_reif(y[3], y[2], BOOL____00006) :: defines_var(BOOL____00006);
constraint int_lt_reif(y[4], y[3], BOOL____00010) :: defines_var(BOOL____00010);
constraint int_lt_reif(y[5], y[4], BOOL____00014) :: defines_var(BOOL____00014);
constraint int_lt_reif(y[6], y[5], BOOL____00018) :: defines_var(BOOL____00018);
constraint int_lt_reif(y[7], y[6], BOOL____00022) :: defines_var(BOOL____00022);
constraint int_lt_reif(y[8], y[7], BOOL____00026) :: defines_var(BOOL____00026);
constraint int_lt_reif(y[9], y[8], BOOL____00030) :: defines_var(BOOL____00030);
constraint int_lt_reif(y[10], y[9], BOOL____00034) :: defines_var(BOOL____00034);
constraint int_ne_reif(x[1], x[2], BOOL____00001) :: defines_var(BOOL____00001);
constraint int_ne_reif(x[2], x[3], BOOL____00005) :: defines_var(BOOL____00005);
constraint int_ne_reif(x[3], x[4], BOOL____00009) :: defines_var(BOOL____00009);
constraint int_ne_reif(x[4], x[5], BOOL____00013) :: defines_var(BOOL____00013);
constraint int_ne_reif(x[5], x[6], BOOL____00017) :: defines_var(BOOL____00017);
constraint int_ne_reif(x[6], x[7], BOOL____00021) :: defines_var(BOOL____00021);
constraint int_ne_reif(x[7], x[8], BOOL____00025) :: defines_var(BOOL____00025);
constraint int_ne_reif(x[8], x[9], BOOL____00029) :: defines_var(BOOL____00029);
constraint int_ne_reif(x[9], x[10], BOOL____00033) :: defines_var(BOOL____00033);
solve satisfy;
