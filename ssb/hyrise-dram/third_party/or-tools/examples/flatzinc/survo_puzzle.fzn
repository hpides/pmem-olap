predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..6] of int: colsums = [22, 11, 42, 32, 27, 37];
array [1..18] of int: matrix = [0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0];
array [1..3] of int: rowsums = [30, 86, 55];
array [1..18] of var 1..18: x :: output_array([1..3, 1..6]);
constraint all_different_int([x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10], x[11], x[12], x[13], x[14], x[15], x[16], x[17], x[18]]);
constraint int_eq(18, x[9]);
constraint int_lin_eq([1, 1, 1], [x[1], x[7], x[13]], 22);
constraint int_lin_eq([1, 1, 1], [x[2], x[8], x[14]], 11);
constraint int_lin_eq([1, 1, 1], [x[3], x[9], x[15]], 42);
constraint int_lin_eq([1, 1, 1], [x[4], x[10], x[16]], 32);
constraint int_lin_eq([1, 1, 1], [x[5], x[11], x[17]], 27);
constraint int_lin_eq([1, 1, 1], [x[6], x[12], x[18]], 37);
constraint int_lin_eq([1, 1, 1, 1, 1, 1], [x[1], x[2], x[3], x[4], x[5], x[6]], 30);
constraint int_lin_eq([1, 1, 1, 1, 1, 1], [x[7], x[8], x[9], x[10], x[11], x[12]], 86);
constraint int_lin_eq([1, 1, 1, 1, 1, 1], [x[13], x[14], x[15], x[16], x[17], x[18]], 55);
solve  :: int_search([x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10], x[11], x[12], x[13], x[14], x[15], x[16], x[17], x[18]], first_fail, indomain_min, complete) satisfy;
