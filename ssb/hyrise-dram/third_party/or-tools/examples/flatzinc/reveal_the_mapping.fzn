predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..5] of set of int: circles = [1..2, 2..4, 4..6, 6..8, 8..9];
array [1..9] of var 1..9: x :: output_array([1..9]);
constraint all_different_int(x);
constraint int_lin_eq([1, 1], [x[1], x[2]], 11);
constraint int_lin_eq([1, 1], [x[8], x[9]], 11);
constraint int_lin_eq([1, 1, 1], [x[2], x[3], x[4]], 11);
constraint int_lin_eq([1, 1, 1], [x[4], x[5], x[6]], 11);
constraint int_lin_eq([1, 1, 1], [x[6], x[7], x[8]], 11);
solve satisfy;
