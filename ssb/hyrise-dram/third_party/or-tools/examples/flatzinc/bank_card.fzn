predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var 0..9: a;
var 0..9: b;
var 0..9: c;
var 0..9: d;
array [1..4] of var 0..9: x :: output_array([1..4]) = [a, b, c, d];
constraint all_different_int(x);
constraint int_lin_eq([-30, -3, 10, 1], [a, b, c, d], 0);
constraint int_lin_eq([1, -20, -2, 10], [a, b, c, d], 0);
solve  :: int_search(x, first_fail, indomain, complete) satisfy;
