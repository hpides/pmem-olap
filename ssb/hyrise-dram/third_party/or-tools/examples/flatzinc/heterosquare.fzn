predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var 3..27: INT____00001 :: is_defined_var :: var_is_introduced;
var 3..27: INT____00002 :: is_defined_var :: var_is_introduced;
array [1..3] of var 1..27: col_sums :: output_array([1..3]);
var 3..27: diag1 :: output_var = INT____00001;
var 3..27: diag2 :: output_var = INT____00002;
array [1..9] of var 1..9: mat :: output_array([1..3, 1..3]);
array [1..3] of var 1..27: row_sums :: output_array([1..3]);
constraint all_different_int([row_sums[1], row_sums[2], row_sums[3], col_sums[1], col_sums[2], col_sums[3], diag1, diag2]);
constraint all_different_int([mat[1], mat[2], mat[3], mat[4], mat[5], mat[6], mat[7], mat[8], mat[9]]);
constraint int_lin_eq([-1, 1, 1, 1], [INT____00001, mat[1], mat[5], mat[9]], 0) :: defines_var(INT____00001);
constraint int_lin_eq([-1, 1, 1, 1], [INT____00002, mat[3], mat[5], mat[7]], 0) :: defines_var(INT____00002);
constraint int_lin_eq([-1, 1, 1, 1], [col_sums[1], mat[1], mat[4], mat[7]], 0);
constraint int_lin_eq([-1, 1, 1, 1], [col_sums[2], mat[2], mat[5], mat[8]], 0);
constraint int_lin_eq([-1, 1, 1, 1], [col_sums[3], mat[3], mat[6], mat[9]], 0);
constraint int_lin_eq([1, 1, 1, -1], [mat[1], mat[2], mat[3], row_sums[1]], 0);
constraint int_lin_eq([1, 1, 1, -1], [mat[4], mat[5], mat[6], row_sums[2]], 0);
constraint int_lin_eq([1, 1, 1, -1], [mat[7], mat[8], mat[9], row_sums[3]], 0);
constraint int_lt(mat[2], mat[4]);
constraint minimum_int(mat[1], [mat[1], mat[3], mat[7], mat[9]]);
solve  :: int_search([mat[1], mat[2], mat[3], mat[4], mat[5], mat[6], mat[7], mat[8], mat[9]], first_fail, indomain, complete) satisfy;
