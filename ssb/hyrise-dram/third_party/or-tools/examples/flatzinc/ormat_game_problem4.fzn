predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..384] of int: overlays = [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
array [1..16] of int: problem = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0];
var bool: BOOL____00002 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00003 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00004 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00005 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00006 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00007 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00008 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00009 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00010 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00011 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00012 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00013 :: is_defined_var :: var_is_introduced;
var 1..24: INT____00001 :: is_defined_var :: var_is_introduced;
var 1..24: num_overlays :: output_var = INT____00001;
array [1..24] of var 0..1: x :: output_array([1..24]);
constraint array_bool_or([false, false, false, false, BOOL____00003, BOOL____00002], true);
constraint array_bool_or([false, false, false, false, BOOL____00006, BOOL____00004], true);
constraint array_bool_or([false, false, false, false, BOOL____00007, BOOL____00005], true);
constraint array_bool_or([false, false, false, false, BOOL____00009, BOOL____00008], true);
constraint array_bool_or([false, false, false, false, BOOL____00012, BOOL____00010], true);
constraint array_bool_or([false, false, false, false, BOOL____00013, BOOL____00011], true);
constraint array_bool_or([false, false, BOOL____00010, BOOL____00008, BOOL____00004, BOOL____00002], true);
constraint array_bool_or([false, false, BOOL____00011, BOOL____00009, BOOL____00005, BOOL____00003], true);
constraint array_bool_or([false, false, BOOL____00011, BOOL____00010, BOOL____00005, BOOL____00004], true);
constraint array_bool_or([false, false, BOOL____00012, BOOL____00009, BOOL____00006, BOOL____00003], true);
constraint array_bool_or([false, false, BOOL____00013, BOOL____00008, BOOL____00007, BOOL____00002], true);
constraint array_bool_or([false, false, BOOL____00013, BOOL____00012, BOOL____00007, BOOL____00006], true);
constraint array_bool_or([BOOL____00007, BOOL____00006, BOOL____00005, BOOL____00004, BOOL____00003, BOOL____00002], true);
constraint array_bool_or([BOOL____00013, BOOL____00012, BOOL____00011, BOOL____00010, BOOL____00009, BOOL____00008], true);
constraint int_eq_reif(x[1], 1, BOOL____00002) :: defines_var(BOOL____00002);
constraint int_eq_reif(x[2], 1, BOOL____00003) :: defines_var(BOOL____00003);
constraint int_eq_reif(x[3], 1, BOOL____00004) :: defines_var(BOOL____00004);
constraint int_eq_reif(x[4], 1, BOOL____00005) :: defines_var(BOOL____00005);
constraint int_eq_reif(x[5], 1, BOOL____00006) :: defines_var(BOOL____00006);
constraint int_eq_reif(x[6], 1, BOOL____00007) :: defines_var(BOOL____00007);
constraint int_eq_reif(x[7], 1, BOOL____00008) :: defines_var(BOOL____00008);
constraint int_eq_reif(x[8], 1, BOOL____00009) :: defines_var(BOOL____00009);
constraint int_eq_reif(x[9], 1, BOOL____00010) :: defines_var(BOOL____00010);
constraint int_eq_reif(x[10], 1, BOOL____00011) :: defines_var(BOOL____00011);
constraint int_eq_reif(x[11], 1, BOOL____00012) :: defines_var(BOOL____00012);
constraint int_eq_reif(x[12], 1, BOOL____00013) :: defines_var(BOOL____00013);
constraint int_eq_reif(x[13], 1, false);
constraint int_eq_reif(x[14], 1, false);
constraint int_eq_reif(x[15], 1, false);
constraint int_eq_reif(x[16], 1, false);
constraint int_eq_reif(x[17], 1, false);
constraint int_eq_reif(x[18], 1, false);
constraint int_eq_reif(x[19], 1, false);
constraint int_eq_reif(x[20], 1, false);
constraint int_eq_reif(x[21], 1, false);
constraint int_eq_reif(x[22], 1, false);
constraint int_eq_reif(x[23], 1, false);
constraint int_eq_reif(x[24], 1, false);
constraint int_lin_eq([-1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [INT____00001, x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10], x[11], x[12], x[13], x[14], x[15], x[16], x[17], x[18], x[19], x[20], x[21], x[22], x[23], x[24]], 0) :: defines_var(INT____00001);
solve  :: int_search([x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10], x[11], x[12], x[13], x[14], x[15], x[16], x[17], x[18], x[19], x[20], x[21], x[22], x[23], x[24], INT____00001], max_regret, indomain_min, complete) minimize INT____00001;
