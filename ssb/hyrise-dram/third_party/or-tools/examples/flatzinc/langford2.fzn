predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..8] of var 1..8: position;
array [1..8] of var 1..4: solution :: output_array([1..8]);
constraint all_different_int(position);
constraint array_var_int_element(position[1], solution, 1);
constraint array_var_int_element(position[2], solution, 2);
constraint array_var_int_element(position[3], solution, 3);
constraint array_var_int_element(position[4], solution, 4);
constraint array_var_int_element(position[5], solution, 1);
constraint array_var_int_element(position[6], solution, 2);
constraint array_var_int_element(position[7], solution, 3);
constraint array_var_int_element(position[8], solution, 4);
constraint int_lin_eq([-1, 1], [position[1], position[5]], 2);
constraint int_lin_eq([-1, 1], [position[2], position[6]], 3);
constraint int_lin_eq([-1, 1], [position[3], position[7]], 4);
constraint int_lin_eq([-1, 1], [position[4], position[8]], 5);
constraint int_lt(solution[1], solution[8]);
solve  :: int_search(position, first_fail, indomain_min, complete) satisfy;
