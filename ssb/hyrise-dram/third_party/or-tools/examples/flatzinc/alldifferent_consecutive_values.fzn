predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var 1..10: INT____00001 :: is_defined_var :: var_is_introduced;
var 1..10: INT____00002 :: is_defined_var :: var_is_introduced;
var 1..10: INT____00003 :: is_defined_var :: var_is_introduced;
var 1..10: INT____00004 :: is_defined_var :: var_is_introduced;
var 1..10: INT____00005 :: is_defined_var :: var_is_introduced;
var 1..10: INT____00006 :: is_defined_var :: var_is_introduced;
var 1..10: INT____00007 :: is_defined_var :: var_is_introduced;
var 1..10: INT____00008 :: is_defined_var :: var_is_introduced;
array [1..4] of var 1..10: x :: output_array([1..4]);
constraint all_different_int(x);
constraint int_lin_eq([1, -1], [INT____00004, INT____00008], 3);
constraint int_max(x[1], x[1], INT____00001) :: defines_var(INT____00001);
constraint int_max(x[2], INT____00001, INT____00002) :: defines_var(INT____00002);
constraint int_max(x[3], INT____00002, INT____00003) :: defines_var(INT____00003);
constraint int_max(x[4], INT____00003, INT____00004) :: defines_var(INT____00004);
constraint int_min(x[1], x[1], INT____00005) :: defines_var(INT____00005);
constraint int_min(x[2], INT____00005, INT____00006) :: defines_var(INT____00006);
constraint int_min(x[3], INT____00006, INT____00007) :: defines_var(INT____00007);
constraint int_min(x[4], INT____00007, INT____00008) :: defines_var(INT____00008);
solve satisfy;
