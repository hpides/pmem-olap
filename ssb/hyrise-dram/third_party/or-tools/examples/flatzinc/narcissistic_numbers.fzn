var 1..9999: INT____00023 :: is_defined_var :: var_is_introduced;
var 1..9999: num :: output_var = INT____00023;
array [1..4] of var int: pows____00001;
array [1..4] of var 0..9: x :: output_array([1..4]);
array [1..5] of var int: xx____00003;
array [1..5] of var int: xx____00008;
array [1..5] of var int: xx____00013;
array [1..5] of var int: xx____00018;
constraint int_eq(pows____00001[1], xx____00003[5]);
constraint int_eq(pows____00001[2], xx____00008[5]);
constraint int_eq(pows____00001[3], xx____00013[5]);
constraint int_eq(pows____00001[4], xx____00018[5]);
constraint int_eq(xx____00003[1], 1);
constraint int_eq(xx____00008[1], 1);
constraint int_eq(xx____00013[1], 1);
constraint int_eq(xx____00018[1], 1);
constraint int_lin_eq([-1, 1, 1, 1, 1], [INT____00023, pows____00001[1], pows____00001[2], pows____00001[3], pows____00001[4]], 0) :: defines_var(INT____00023);
constraint int_lin_eq([-1, 1000, 100, 10, 1], [INT____00023, x[1], x[2], x[3], x[4]], 0);
constraint int_lt(0, x[1]);
constraint int_times(xx____00003[1], x[1], xx____00003[2]);
constraint int_times(xx____00003[2], x[1], xx____00003[3]);
constraint int_times(xx____00003[3], x[1], xx____00003[4]);
constraint int_times(xx____00003[4], x[1], xx____00003[5]);
constraint int_times(xx____00008[1], x[2], xx____00008[2]);
constraint int_times(xx____00008[2], x[2], xx____00008[3]);
constraint int_times(xx____00008[3], x[2], xx____00008[4]);
constraint int_times(xx____00008[4], x[2], xx____00008[5]);
constraint int_times(xx____00013[1], x[3], xx____00013[2]);
constraint int_times(xx____00013[2], x[3], xx____00013[3]);
constraint int_times(xx____00013[3], x[3], xx____00013[4]);
constraint int_times(xx____00013[4], x[3], xx____00013[5]);
constraint int_times(xx____00018[1], x[4], xx____00018[2]);
constraint int_times(xx____00018[2], x[4], xx____00018[3]);
constraint int_times(xx____00018[3], x[4], xx____00018[4]);
constraint int_times(xx____00018[4], x[4], xx____00018[5]);
solve  :: int_search(x, first_fail, indomain_split, complete) satisfy;
