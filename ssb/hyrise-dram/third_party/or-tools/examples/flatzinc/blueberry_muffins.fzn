predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var bool: BOOL____00002 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00003 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00011 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00012 :: is_defined_var :: var_is_introduced;
var 1..4: Ellis;
var 1..4: INT____00001 :: is_defined_var :: var_is_introduced;
var 2..4: INT____00005 :: is_defined_var :: var_is_introduced;
var 1..3: INT____00006 :: is_defined_var :: var_is_introduced;
var 1..4: INT____00007 :: is_defined_var :: var_is_introduced;
var 1..4: INT____00009 :: is_defined_var :: var_is_introduced;
var 2..4: INT____00010 :: is_defined_var :: var_is_introduced;
var 1..4: Ingham;
var 1..4: Oakley;
var 1..4: Summers;
var 1..4: dogcatcher;
var 1..4: flautist;
array [1..4] of var 1..4: lastname :: output_array([1..4]) = [Ellis, Ingham, Oakley, Summers];
array [1..4] of var 1..4: muffins :: output_array([1..4]);
var 1..4: secretary;
var 1..4: zookeeper;
array [1..4] of var 1..4: job :: output_array([1..4]) = [dogcatcher, flautist, secretary, zookeeper];
constraint all_different_int(job);
constraint all_different_int(lastname);
constraint all_different_int(muffins);
constraint array_bool_or([BOOL____00002, BOOL____00003], true);
constraint array_bool_or([BOOL____00011, BOOL____00012], true);
constraint array_var_int_element(Ellis, muffins, INT____00001) :: defines_var(INT____00001);
constraint array_var_int_element(Oakley, muffins, INT____00009) :: defines_var(INT____00009);
constraint array_var_int_element(Summers, muffins, INT____00007) :: defines_var(INT____00007);
constraint array_var_int_element(dogcatcher, muffins, INT____00006) :: defines_var(INT____00006);
constraint array_var_int_element(flautist, muffins, INT____00010);
constraint array_var_int_element(secretary, muffins, INT____00005) :: defines_var(INT____00005);
constraint int_eq_reif(Oakley, 3, BOOL____00011) :: defines_var(BOOL____00011);
constraint int_eq_reif(Oakley, 4, BOOL____00012) :: defines_var(BOOL____00012);
constraint int_eq_reif(secretary, 3, BOOL____00002) :: defines_var(BOOL____00002);
constraint int_eq_reif(secretary, 4, BOOL____00003) :: defines_var(BOOL____00003);
constraint int_lin_eq([-1, 1], [INT____00007, muffins[2]], 2);
constraint int_lin_eq([-1, 2], [INT____00010, INT____00009], 0) :: defines_var(INT____00010);
constraint int_lin_eq([1, 1], [INT____00001, muffins[1]], 6);
constraint int_lt(INT____00006, INT____00005);
constraint int_ne(Ellis, 1);
constraint int_ne(Ingham, 3);
constraint int_ne(Summers, 2);
constraint int_ne(flautist, Oakley);
solve satisfy;
