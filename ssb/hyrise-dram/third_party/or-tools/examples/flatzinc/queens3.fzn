predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..8] of var 1..8: queens :: output_array([1..8]);
constraint all_different_int(queens);
constraint int_lin_ne([1, -1], [queens[1], queens[2]], -1);
constraint int_lin_ne([1, -1], [queens[1], queens[2]], 1);
constraint int_lin_ne([1, -1], [queens[1], queens[3]], -2);
constraint int_lin_ne([1, -1], [queens[1], queens[3]], 2);
constraint int_lin_ne([1, -1], [queens[1], queens[4]], -3);
constraint int_lin_ne([1, -1], [queens[1], queens[4]], 3);
constraint int_lin_ne([1, -1], [queens[1], queens[5]], -4);
constraint int_lin_ne([1, -1], [queens[1], queens[5]], 4);
constraint int_lin_ne([1, -1], [queens[1], queens[6]], -5);
constraint int_lin_ne([1, -1], [queens[1], queens[6]], 5);
constraint int_lin_ne([1, -1], [queens[1], queens[7]], -6);
constraint int_lin_ne([1, -1], [queens[1], queens[7]], 6);
constraint int_lin_ne([1, -1], [queens[1], queens[8]], -7);
constraint int_lin_ne([1, -1], [queens[1], queens[8]], 7);
constraint int_lin_ne([1, -1], [queens[2], queens[3]], -1);
constraint int_lin_ne([1, -1], [queens[2], queens[3]], 1);
constraint int_lin_ne([1, -1], [queens[2], queens[4]], -2);
constraint int_lin_ne([1, -1], [queens[2], queens[4]], 2);
constraint int_lin_ne([1, -1], [queens[2], queens[5]], -3);
constraint int_lin_ne([1, -1], [queens[2], queens[5]], 3);
constraint int_lin_ne([1, -1], [queens[2], queens[6]], -4);
constraint int_lin_ne([1, -1], [queens[2], queens[6]], 4);
constraint int_lin_ne([1, -1], [queens[2], queens[7]], -5);
constraint int_lin_ne([1, -1], [queens[2], queens[7]], 5);
constraint int_lin_ne([1, -1], [queens[2], queens[8]], -6);
constraint int_lin_ne([1, -1], [queens[2], queens[8]], 6);
constraint int_lin_ne([1, -1], [queens[3], queens[4]], -1);
constraint int_lin_ne([1, -1], [queens[3], queens[4]], 1);
constraint int_lin_ne([1, -1], [queens[3], queens[5]], -2);
constraint int_lin_ne([1, -1], [queens[3], queens[5]], 2);
constraint int_lin_ne([1, -1], [queens[3], queens[6]], -3);
constraint int_lin_ne([1, -1], [queens[3], queens[6]], 3);
constraint int_lin_ne([1, -1], [queens[3], queens[7]], -4);
constraint int_lin_ne([1, -1], [queens[3], queens[7]], 4);
constraint int_lin_ne([1, -1], [queens[3], queens[8]], -5);
constraint int_lin_ne([1, -1], [queens[3], queens[8]], 5);
constraint int_lin_ne([1, -1], [queens[4], queens[5]], -1);
constraint int_lin_ne([1, -1], [queens[4], queens[5]], 1);
constraint int_lin_ne([1, -1], [queens[4], queens[6]], -2);
constraint int_lin_ne([1, -1], [queens[4], queens[6]], 2);
constraint int_lin_ne([1, -1], [queens[4], queens[7]], -3);
constraint int_lin_ne([1, -1], [queens[4], queens[7]], 3);
constraint int_lin_ne([1, -1], [queens[4], queens[8]], -4);
constraint int_lin_ne([1, -1], [queens[4], queens[8]], 4);
constraint int_lin_ne([1, -1], [queens[5], queens[6]], -1);
constraint int_lin_ne([1, -1], [queens[5], queens[6]], 1);
constraint int_lin_ne([1, -1], [queens[5], queens[7]], -2);
constraint int_lin_ne([1, -1], [queens[5], queens[7]], 2);
constraint int_lin_ne([1, -1], [queens[5], queens[8]], -3);
constraint int_lin_ne([1, -1], [queens[5], queens[8]], 3);
constraint int_lin_ne([1, -1], [queens[6], queens[7]], -1);
constraint int_lin_ne([1, -1], [queens[6], queens[7]], 1);
constraint int_lin_ne([1, -1], [queens[6], queens[8]], -2);
constraint int_lin_ne([1, -1], [queens[6], queens[8]], 2);
constraint int_lin_ne([1, -1], [queens[7], queens[8]], -1);
constraint int_lin_ne([1, -1], [queens[7], queens[8]], 1);
constraint int_ne(queens[1], queens[2]);
constraint int_ne(queens[1], queens[3]);
constraint int_ne(queens[1], queens[4]);
constraint int_ne(queens[1], queens[5]);
constraint int_ne(queens[1], queens[6]);
constraint int_ne(queens[1], queens[7]);
constraint int_ne(queens[1], queens[8]);
constraint int_ne(queens[2], queens[3]);
constraint int_ne(queens[2], queens[4]);
constraint int_ne(queens[2], queens[5]);
constraint int_ne(queens[2], queens[6]);
constraint int_ne(queens[2], queens[7]);
constraint int_ne(queens[2], queens[8]);
constraint int_ne(queens[3], queens[4]);
constraint int_ne(queens[3], queens[5]);
constraint int_ne(queens[3], queens[6]);
constraint int_ne(queens[3], queens[7]);
constraint int_ne(queens[3], queens[8]);
constraint int_ne(queens[4], queens[5]);
constraint int_ne(queens[4], queens[6]);
constraint int_ne(queens[4], queens[7]);
constraint int_ne(queens[4], queens[8]);
constraint int_ne(queens[5], queens[6]);
constraint int_ne(queens[5], queens[7]);
constraint int_ne(queens[5], queens[8]);
constraint int_ne(queens[6], queens[7]);
constraint int_ne(queens[6], queens[8]);
constraint int_ne(queens[7], queens[8]);
solve  :: int_search(queens, first_fail, indomain_min, complete) satisfy;
