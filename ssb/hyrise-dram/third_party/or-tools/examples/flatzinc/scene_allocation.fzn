predicate all_different_int(array [int] of var int: x);
predicate count_eq(array [int] of var int: x, var int: y, var int: c);
predicate count_reif(array [int] of var int: x, var int: y, var int: c, var bool: b);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate global_cardinality_closed(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate global_cardinality_low_up(array [int] of var int: x, array [int] of int: cover, array [int] of int: lbound, array [int] of int: ubound);
predicate global_cardinality_low_up_closed(array [int] of var int: x, array [int] of int: cover, array [int] of int: lbound, array [int] of int: ubound);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..11] of int: Actor = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];
array [1..19] of set of int: appears = [6..6, {1, 4, 5, 6}, {3, 5, 8, 9}, {2, 9}, {1, 7, 8, 9, 10}, {3, 7, 8, 10, 11}, 1..2, {4, 9}, {2, 3, 8, 9, 11}, {1, 2, 3, 8}, 1..1, {4, 5, 6, 8, 11}, {1, 2, 4, 6}, {3, 7}, {1, 4, 8, 11}, {2, 3, 8, 9}, {1, 3, 5}, {3, 6, 8, 11}, 2..2];
array [1..11] of int: pay = [26481, 25043, 30310, 4085, 7562, 9381, 8770, 5788, 7423, 3303, 9593];
array [1..11] of set of int: which = [{2, 5, 7, 10, 11, 13, 15, 17}, {4, 7, 9, 10, 13, 16, 19}, {3, 6, 9, 10, 14, 16, 17, 18}, {2, 8, 12, 13, 15}, {2, 3, 12, 17}, {1, 2, 12, 13, 18}, {5, 6, 14}, {3, 5, 6, 9, 10, 12, 15, 16, 18}, {3, 4, 5, 8, 9, 16}, 5..6, {6, 9, 12, 15, 18}];
var 0..688695: INT____00001 :: is_defined_var :: var_is_introduced;
var 1..5: INT____00002 :: is_defined_var :: var_is_introduced;
var 1..5: INT____00003 :: is_defined_var :: var_is_introduced;
var 1..5: INT____00004 :: is_defined_var :: var_is_introduced;
var 1..5: INT____00005 :: is_defined_var :: var_is_introduced;
var 1..5: INT____00006 :: is_defined_var :: var_is_introduced;
var 1..5: INT____00007 :: is_defined_var :: var_is_introduced;
var 1..5: INT____00008 :: is_defined_var :: var_is_introduced;
var 1..5: INT____00009 :: is_defined_var :: var_is_introduced;
var 1..5: INT____00010 :: is_defined_var :: var_is_introduced;
var 1..5: INT____00011 :: is_defined_var :: var_is_introduced;
var 1..5: INT____00012 :: is_defined_var :: var_is_introduced;
var 1..5: INT____00013 :: is_defined_var :: var_is_introduced;
var 1..5: INT____00014 :: is_defined_var :: var_is_introduced;
var 1..5: INT____00015 :: is_defined_var :: var_is_introduced;
var 1..5: INT____00016 :: is_defined_var :: var_is_introduced;
var 1..5: INT____00017 :: is_defined_var :: var_is_introduced;
var 1..5: INT____00018 :: is_defined_var :: var_is_introduced;
var 1..5: INT____00019 :: is_defined_var :: var_is_introduced;
var 6..10: INT____00021 :: is_defined_var :: var_is_introduced;
var 11..15: INT____00023 :: is_defined_var :: var_is_introduced;
var 16..20: INT____00025 :: is_defined_var :: var_is_introduced;
var 21..25: INT____00027 :: is_defined_var :: var_is_introduced;
var 26..30: INT____00029 :: is_defined_var :: var_is_introduced;
var 31..35: INT____00031 :: is_defined_var :: var_is_introduced;
var 36..40: INT____00033 :: is_defined_var :: var_is_introduced;
var 41..45: INT____00035 :: is_defined_var :: var_is_introduced;
var 46..50: INT____00037 :: is_defined_var :: var_is_introduced;
var 51..55: INT____00039 :: is_defined_var :: var_is_introduced;
var 56..60: INT____00041 :: is_defined_var :: var_is_introduced;
var 61..65: INT____00043 :: is_defined_var :: var_is_introduced;
var 66..70: INT____00045 :: is_defined_var :: var_is_introduced;
var 71..75: INT____00047 :: is_defined_var :: var_is_introduced;
var 76..80: INT____00049 :: is_defined_var :: var_is_introduced;
var 81..85: INT____00051 :: is_defined_var :: var_is_introduced;
var 86..90: INT____00053 :: is_defined_var :: var_is_introduced;
var 91..95: INT____00055 :: is_defined_var :: var_is_introduced;
var 0..688695: cost :: output_var = INT____00001;
array [1..55] of var 0..1: isPaid;
array [1..95] of var 0..1: isShot;
array [1..19] of var 1..5: shoot :: output_array([1..19]);
constraint array_var_int_element(INT____00021, isShot, 1);
constraint array_var_int_element(INT____00023, isShot, 1);
constraint array_var_int_element(INT____00025, isShot, 1);
constraint array_var_int_element(INT____00027, isShot, 1);
constraint array_var_int_element(INT____00029, isShot, 1);
constraint array_var_int_element(INT____00031, isShot, 1);
constraint array_var_int_element(INT____00033, isShot, 1);
constraint array_var_int_element(INT____00035, isShot, 1);
constraint array_var_int_element(INT____00037, isShot, 1);
constraint array_var_int_element(INT____00039, isShot, 1);
constraint array_var_int_element(INT____00041, isShot, 1);
constraint array_var_int_element(INT____00043, isShot, 1);
constraint array_var_int_element(INT____00045, isShot, 1);
constraint array_var_int_element(INT____00047, isShot, 1);
constraint array_var_int_element(INT____00049, isShot, 1);
constraint array_var_int_element(INT____00051, isShot, 1);
constraint array_var_int_element(INT____00053, isShot, 1);
constraint array_var_int_element(INT____00055, isShot, 1);
constraint array_var_int_element(shoot[1], isShot, 1);
constraint global_cardinality_low_up(shoot, [1, 2, 3, 4, 5], [0, 0, 0, 0, 0], [5, 5, 5, 5, 5]);
constraint int_eq(shoot[1], 1);
constraint int_le(isShot[1], isPaid[26]);
constraint int_le(isShot[2], isPaid[27]);
constraint int_le(isShot[3], isPaid[28]);
constraint int_le(isShot[4], isPaid[29]);
constraint int_le(isShot[5], isPaid[30]);
constraint int_le(isShot[6], isPaid[1]);
constraint int_le(isShot[6], isPaid[16]);
constraint int_le(isShot[6], isPaid[21]);
constraint int_le(isShot[6], isPaid[26]);
constraint int_le(isShot[7], isPaid[2]);
constraint int_le(isShot[7], isPaid[17]);
constraint int_le(isShot[7], isPaid[22]);
constraint int_le(isShot[7], isPaid[27]);
constraint int_le(isShot[8], isPaid[3]);
constraint int_le(isShot[8], isPaid[18]);
constraint int_le(isShot[8], isPaid[23]);
constraint int_le(isShot[8], isPaid[28]);
constraint int_le(isShot[9], isPaid[4]);
constraint int_le(isShot[9], isPaid[19]);
constraint int_le(isShot[9], isPaid[24]);
constraint int_le(isShot[9], isPaid[29]);
constraint int_le(isShot[10], isPaid[5]);
constraint int_le(isShot[10], isPaid[20]);
constraint int_le(isShot[10], isPaid[25]);
constraint int_le(isShot[10], isPaid[30]);
constraint int_le(isShot[11], isPaid[11]);
constraint int_le(isShot[11], isPaid[21]);
constraint int_le(isShot[11], isPaid[36]);
constraint int_le(isShot[11], isPaid[41]);
constraint int_le(isShot[12], isPaid[12]);
constraint int_le(isShot[12], isPaid[22]);
constraint int_le(isShot[12], isPaid[37]);
constraint int_le(isShot[12], isPaid[42]);
constraint int_le(isShot[13], isPaid[13]);
constraint int_le(isShot[13], isPaid[23]);
constraint int_le(isShot[13], isPaid[38]);
constraint int_le(isShot[13], isPaid[43]);
constraint int_le(isShot[14], isPaid[14]);
constraint int_le(isShot[14], isPaid[24]);
constraint int_le(isShot[14], isPaid[39]);
constraint int_le(isShot[14], isPaid[44]);
constraint int_le(isShot[15], isPaid[15]);
constraint int_le(isShot[15], isPaid[25]);
constraint int_le(isShot[15], isPaid[40]);
constraint int_le(isShot[15], isPaid[45]);
constraint int_le(isShot[16], isPaid[6]);
constraint int_le(isShot[16], isPaid[41]);
constraint int_le(isShot[17], isPaid[7]);
constraint int_le(isShot[17], isPaid[42]);
constraint int_le(isShot[18], isPaid[8]);
constraint int_le(isShot[18], isPaid[43]);
constraint int_le(isShot[19], isPaid[9]);
constraint int_le(isShot[19], isPaid[44]);
constraint int_le(isShot[20], isPaid[10]);
constraint int_le(isShot[20], isPaid[45]);
constraint int_le(isShot[21], isPaid[1]);
constraint int_le(isShot[21], isPaid[31]);
constraint int_le(isShot[21], isPaid[36]);
constraint int_le(isShot[21], isPaid[41]);
constraint int_le(isShot[21], isPaid[46]);
constraint int_le(isShot[22], isPaid[2]);
constraint int_le(isShot[22], isPaid[32]);
constraint int_le(isShot[22], isPaid[37]);
constraint int_le(isShot[22], isPaid[42]);
constraint int_le(isShot[22], isPaid[47]);
constraint int_le(isShot[23], isPaid[3]);
constraint int_le(isShot[23], isPaid[33]);
constraint int_le(isShot[23], isPaid[38]);
constraint int_le(isShot[23], isPaid[43]);
constraint int_le(isShot[23], isPaid[48]);
constraint int_le(isShot[24], isPaid[4]);
constraint int_le(isShot[24], isPaid[34]);
constraint int_le(isShot[24], isPaid[39]);
constraint int_le(isShot[24], isPaid[44]);
constraint int_le(isShot[24], isPaid[49]);
constraint int_le(isShot[25], isPaid[5]);
constraint int_le(isShot[25], isPaid[35]);
constraint int_le(isShot[25], isPaid[40]);
constraint int_le(isShot[25], isPaid[45]);
constraint int_le(isShot[25], isPaid[50]);
constraint int_le(isShot[26], isPaid[11]);
constraint int_le(isShot[26], isPaid[31]);
constraint int_le(isShot[26], isPaid[36]);
constraint int_le(isShot[26], isPaid[46]);
constraint int_le(isShot[26], isPaid[51]);
constraint int_le(isShot[27], isPaid[12]);
constraint int_le(isShot[27], isPaid[32]);
constraint int_le(isShot[27], isPaid[37]);
constraint int_le(isShot[27], isPaid[47]);
constraint int_le(isShot[27], isPaid[52]);
constraint int_le(isShot[28], isPaid[13]);
constraint int_le(isShot[28], isPaid[33]);
constraint int_le(isShot[28], isPaid[38]);
constraint int_le(isShot[28], isPaid[48]);
constraint int_le(isShot[28], isPaid[53]);
constraint int_le(isShot[29], isPaid[14]);
constraint int_le(isShot[29], isPaid[34]);
constraint int_le(isShot[29], isPaid[39]);
constraint int_le(isShot[29], isPaid[49]);
constraint int_le(isShot[29], isPaid[54]);
constraint int_le(isShot[30], isPaid[15]);
constraint int_le(isShot[30], isPaid[35]);
constraint int_le(isShot[30], isPaid[40]);
constraint int_le(isShot[30], isPaid[50]);
constraint int_le(isShot[30], isPaid[55]);
constraint int_le(isShot[31], isPaid[1]);
constraint int_le(isShot[31], isPaid[6]);
constraint int_le(isShot[32], isPaid[2]);
constraint int_le(isShot[32], isPaid[7]);
constraint int_le(isShot[33], isPaid[3]);
constraint int_le(isShot[33], isPaid[8]);
constraint int_le(isShot[34], isPaid[4]);
constraint int_le(isShot[34], isPaid[9]);
constraint int_le(isShot[35], isPaid[5]);
constraint int_le(isShot[35], isPaid[10]);
constraint int_le(isShot[36], isPaid[16]);
constraint int_le(isShot[36], isPaid[41]);
constraint int_le(isShot[37], isPaid[17]);
constraint int_le(isShot[37], isPaid[42]);
constraint int_le(isShot[38], isPaid[18]);
constraint int_le(isShot[38], isPaid[43]);
constraint int_le(isShot[39], isPaid[19]);
constraint int_le(isShot[39], isPaid[44]);
constraint int_le(isShot[40], isPaid[20]);
constraint int_le(isShot[40], isPaid[45]);
constraint int_le(isShot[41], isPaid[6]);
constraint int_le(isShot[41], isPaid[11]);
constraint int_le(isShot[41], isPaid[36]);
constraint int_le(isShot[41], isPaid[41]);
constraint int_le(isShot[41], isPaid[51]);
constraint int_le(isShot[42], isPaid[7]);
constraint int_le(isShot[42], isPaid[12]);
constraint int_le(isShot[42], isPaid[37]);
constraint int_le(isShot[42], isPaid[42]);
constraint int_le(isShot[42], isPaid[52]);
constraint int_le(isShot[43], isPaid[8]);
constraint int_le(isShot[43], isPaid[13]);
constraint int_le(isShot[43], isPaid[38]);
constraint int_le(isShot[43], isPaid[43]);
constraint int_le(isShot[43], isPaid[53]);
constraint int_le(isShot[44], isPaid[9]);
constraint int_le(isShot[44], isPaid[14]);
constraint int_le(isShot[44], isPaid[39]);
constraint int_le(isShot[44], isPaid[44]);
constraint int_le(isShot[44], isPaid[54]);
constraint int_le(isShot[45], isPaid[10]);
constraint int_le(isShot[45], isPaid[15]);
constraint int_le(isShot[45], isPaid[40]);
constraint int_le(isShot[45], isPaid[45]);
constraint int_le(isShot[45], isPaid[55]);
constraint int_le(isShot[46], isPaid[1]);
constraint int_le(isShot[46], isPaid[6]);
constraint int_le(isShot[46], isPaid[11]);
constraint int_le(isShot[46], isPaid[36]);
constraint int_le(isShot[47], isPaid[2]);
constraint int_le(isShot[47], isPaid[7]);
constraint int_le(isShot[47], isPaid[12]);
constraint int_le(isShot[47], isPaid[37]);
constraint int_le(isShot[48], isPaid[3]);
constraint int_le(isShot[48], isPaid[8]);
constraint int_le(isShot[48], isPaid[13]);
constraint int_le(isShot[48], isPaid[38]);
constraint int_le(isShot[49], isPaid[4]);
constraint int_le(isShot[49], isPaid[9]);
constraint int_le(isShot[49], isPaid[14]);
constraint int_le(isShot[49], isPaid[39]);
constraint int_le(isShot[50], isPaid[5]);
constraint int_le(isShot[50], isPaid[10]);
constraint int_le(isShot[50], isPaid[15]);
constraint int_le(isShot[50], isPaid[40]);
constraint int_le(isShot[51], isPaid[1]);
constraint int_le(isShot[52], isPaid[2]);
constraint int_le(isShot[53], isPaid[3]);
constraint int_le(isShot[54], isPaid[4]);
constraint int_le(isShot[55], isPaid[5]);
constraint int_le(isShot[56], isPaid[16]);
constraint int_le(isShot[56], isPaid[21]);
constraint int_le(isShot[56], isPaid[26]);
constraint int_le(isShot[56], isPaid[36]);
constraint int_le(isShot[56], isPaid[51]);
constraint int_le(isShot[57], isPaid[17]);
constraint int_le(isShot[57], isPaid[22]);
constraint int_le(isShot[57], isPaid[27]);
constraint int_le(isShot[57], isPaid[37]);
constraint int_le(isShot[57], isPaid[52]);
constraint int_le(isShot[58], isPaid[18]);
constraint int_le(isShot[58], isPaid[23]);
constraint int_le(isShot[58], isPaid[28]);
constraint int_le(isShot[58], isPaid[38]);
constraint int_le(isShot[58], isPaid[53]);
constraint int_le(isShot[59], isPaid[19]);
constraint int_le(isShot[59], isPaid[24]);
constraint int_le(isShot[59], isPaid[29]);
constraint int_le(isShot[59], isPaid[39]);
constraint int_le(isShot[59], isPaid[54]);
constraint int_le(isShot[60], isPaid[20]);
constraint int_le(isShot[60], isPaid[25]);
constraint int_le(isShot[60], isPaid[30]);
constraint int_le(isShot[60], isPaid[40]);
constraint int_le(isShot[60], isPaid[55]);
constraint int_le(isShot[61], isPaid[1]);
constraint int_le(isShot[61], isPaid[6]);
constraint int_le(isShot[61], isPaid[16]);
constraint int_le(isShot[61], isPaid[26]);
constraint int_le(isShot[62], isPaid[2]);
constraint int_le(isShot[62], isPaid[7]);
constraint int_le(isShot[62], isPaid[17]);
constraint int_le(isShot[62], isPaid[27]);
constraint int_le(isShot[63], isPaid[3]);
constraint int_le(isShot[63], isPaid[8]);
constraint int_le(isShot[63], isPaid[18]);
constraint int_le(isShot[63], isPaid[28]);
constraint int_le(isShot[64], isPaid[4]);
constraint int_le(isShot[64], isPaid[9]);
constraint int_le(isShot[64], isPaid[19]);
constraint int_le(isShot[64], isPaid[29]);
constraint int_le(isShot[65], isPaid[5]);
constraint int_le(isShot[65], isPaid[10]);
constraint int_le(isShot[65], isPaid[20]);
constraint int_le(isShot[65], isPaid[30]);
constraint int_le(isShot[66], isPaid[11]);
constraint int_le(isShot[66], isPaid[31]);
constraint int_le(isShot[67], isPaid[12]);
constraint int_le(isShot[67], isPaid[32]);
constraint int_le(isShot[68], isPaid[13]);
constraint int_le(isShot[68], isPaid[33]);
constraint int_le(isShot[69], isPaid[14]);
constraint int_le(isShot[69], isPaid[34]);
constraint int_le(isShot[70], isPaid[15]);
constraint int_le(isShot[70], isPaid[35]);
constraint int_le(isShot[71], isPaid[1]);
constraint int_le(isShot[71], isPaid[16]);
constraint int_le(isShot[71], isPaid[36]);
constraint int_le(isShot[71], isPaid[51]);
constraint int_le(isShot[72], isPaid[2]);
constraint int_le(isShot[72], isPaid[17]);
constraint int_le(isShot[72], isPaid[37]);
constraint int_le(isShot[72], isPaid[52]);
constraint int_le(isShot[73], isPaid[3]);
constraint int_le(isShot[73], isPaid[18]);
constraint int_le(isShot[73], isPaid[38]);
constraint int_le(isShot[73], isPaid[53]);
constraint int_le(isShot[74], isPaid[4]);
constraint int_le(isShot[74], isPaid[19]);
constraint int_le(isShot[74], isPaid[39]);
constraint int_le(isShot[74], isPaid[54]);
constraint int_le(isShot[75], isPaid[5]);
constraint int_le(isShot[75], isPaid[20]);
constraint int_le(isShot[75], isPaid[40]);
constraint int_le(isShot[75], isPaid[55]);
constraint int_le(isShot[76], isPaid[6]);
constraint int_le(isShot[76], isPaid[11]);
constraint int_le(isShot[76], isPaid[36]);
constraint int_le(isShot[76], isPaid[41]);
constraint int_le(isShot[77], isPaid[7]);
constraint int_le(isShot[77], isPaid[12]);
constraint int_le(isShot[77], isPaid[37]);
constraint int_le(isShot[77], isPaid[42]);
constraint int_le(isShot[78], isPaid[8]);
constraint int_le(isShot[78], isPaid[13]);
constraint int_le(isShot[78], isPaid[38]);
constraint int_le(isShot[78], isPaid[43]);
constraint int_le(isShot[79], isPaid[9]);
constraint int_le(isShot[79], isPaid[14]);
constraint int_le(isShot[79], isPaid[39]);
constraint int_le(isShot[79], isPaid[44]);
constraint int_le(isShot[80], isPaid[10]);
constraint int_le(isShot[80], isPaid[15]);
constraint int_le(isShot[80], isPaid[40]);
constraint int_le(isShot[80], isPaid[45]);
constraint int_le(isShot[81], isPaid[1]);
constraint int_le(isShot[81], isPaid[11]);
constraint int_le(isShot[81], isPaid[21]);
constraint int_le(isShot[82], isPaid[2]);
constraint int_le(isShot[82], isPaid[12]);
constraint int_le(isShot[82], isPaid[22]);
constraint int_le(isShot[83], isPaid[3]);
constraint int_le(isShot[83], isPaid[13]);
constraint int_le(isShot[83], isPaid[23]);
constraint int_le(isShot[84], isPaid[4]);
constraint int_le(isShot[84], isPaid[14]);
constraint int_le(isShot[84], isPaid[24]);
constraint int_le(isShot[85], isPaid[5]);
constraint int_le(isShot[85], isPaid[15]);
constraint int_le(isShot[85], isPaid[25]);
constraint int_le(isShot[86], isPaid[11]);
constraint int_le(isShot[86], isPaid[26]);
constraint int_le(isShot[86], isPaid[36]);
constraint int_le(isShot[86], isPaid[51]);
constraint int_le(isShot[87], isPaid[12]);
constraint int_le(isShot[87], isPaid[27]);
constraint int_le(isShot[87], isPaid[37]);
constraint int_le(isShot[87], isPaid[52]);
constraint int_le(isShot[88], isPaid[13]);
constraint int_le(isShot[88], isPaid[28]);
constraint int_le(isShot[88], isPaid[38]);
constraint int_le(isShot[88], isPaid[53]);
constraint int_le(isShot[89], isPaid[14]);
constraint int_le(isShot[89], isPaid[29]);
constraint int_le(isShot[89], isPaid[39]);
constraint int_le(isShot[89], isPaid[54]);
constraint int_le(isShot[90], isPaid[15]);
constraint int_le(isShot[90], isPaid[30]);
constraint int_le(isShot[90], isPaid[40]);
constraint int_le(isShot[90], isPaid[55]);
constraint int_le(isShot[91], isPaid[6]);
constraint int_le(isShot[92], isPaid[7]);
constraint int_le(isShot[93], isPaid[8]);
constraint int_le(isShot[94], isPaid[9]);
constraint int_le(isShot[95], isPaid[10]);
constraint int_lin_eq([-1, 1], [INT____00021, shoot[2]], -5) :: defines_var(INT____00021) :: domain;
constraint int_lin_eq([-1, 1], [INT____00023, shoot[3]], -10) :: defines_var(INT____00023) :: domain;
constraint int_lin_eq([-1, 1], [INT____00025, shoot[4]], -15) :: defines_var(INT____00025) :: domain;
constraint int_lin_eq([-1, 1], [INT____00027, shoot[5]], -20) :: defines_var(INT____00027) :: domain;
constraint int_lin_eq([-1, 1], [INT____00029, shoot[6]], -25) :: defines_var(INT____00029) :: domain;
constraint int_lin_eq([-1, 1], [INT____00031, shoot[7]], -30) :: defines_var(INT____00031) :: domain;
constraint int_lin_eq([-1, 1], [INT____00033, shoot[8]], -35) :: defines_var(INT____00033) :: domain;
constraint int_lin_eq([-1, 1], [INT____00035, shoot[9]], -40) :: defines_var(INT____00035) :: domain;
constraint int_lin_eq([-1, 1], [INT____00037, shoot[10]], -45) :: defines_var(INT____00037) :: domain;
constraint int_lin_eq([-1, 1], [INT____00039, shoot[11]], -50) :: defines_var(INT____00039) :: domain;
constraint int_lin_eq([-1, 1], [INT____00041, shoot[12]], -55) :: defines_var(INT____00041) :: domain;
constraint int_lin_eq([-1, 1], [INT____00043, shoot[13]], -60) :: defines_var(INT____00043) :: domain;
constraint int_lin_eq([-1, 1], [INT____00045, shoot[14]], -65) :: defines_var(INT____00045) :: domain;
constraint int_lin_eq([-1, 1], [INT____00047, shoot[15]], -70) :: defines_var(INT____00047) :: domain;
constraint int_lin_eq([-1, 1], [INT____00049, shoot[16]], -75) :: defines_var(INT____00049) :: domain;
constraint int_lin_eq([-1, 1], [INT____00051, shoot[17]], -80) :: defines_var(INT____00051) :: domain;
constraint int_lin_eq([-1, 1], [INT____00053, shoot[18]], -85) :: defines_var(INT____00053) :: domain;
constraint int_lin_eq([-1, 1], [INT____00055, shoot[19]], -90) :: defines_var(INT____00055) :: domain;
constraint int_lin_eq([1, 1, 1, 1, 1], [isShot[1], isShot[2], isShot[3], isShot[4], isShot[5]], 1);
constraint int_lin_eq([1, 1, 1, 1, 1], [isShot[6], isShot[7], isShot[8], isShot[9], isShot[10]], 1);
constraint int_lin_eq([1, 1, 1, 1, 1], [isShot[11], isShot[12], isShot[13], isShot[14], isShot[15]], 1);
constraint int_lin_eq([1, 1, 1, 1, 1], [isShot[16], isShot[17], isShot[18], isShot[19], isShot[20]], 1);
constraint int_lin_eq([1, 1, 1, 1, 1], [isShot[21], isShot[22], isShot[23], isShot[24], isShot[25]], 1);
constraint int_lin_eq([1, 1, 1, 1, 1], [isShot[26], isShot[27], isShot[28], isShot[29], isShot[30]], 1);
constraint int_lin_eq([1, 1, 1, 1, 1], [isShot[31], isShot[32], isShot[33], isShot[34], isShot[35]], 1);
constraint int_lin_eq([1, 1, 1, 1, 1], [isShot[36], isShot[37], isShot[38], isShot[39], isShot[40]], 1);
constraint int_lin_eq([1, 1, 1, 1, 1], [isShot[41], isShot[42], isShot[43], isShot[44], isShot[45]], 1);
constraint int_lin_eq([1, 1, 1, 1, 1], [isShot[46], isShot[47], isShot[48], isShot[49], isShot[50]], 1);
constraint int_lin_eq([1, 1, 1, 1, 1], [isShot[51], isShot[52], isShot[53], isShot[54], isShot[55]], 1);
constraint int_lin_eq([1, 1, 1, 1, 1], [isShot[56], isShot[57], isShot[58], isShot[59], isShot[60]], 1);
constraint int_lin_eq([1, 1, 1, 1, 1], [isShot[61], isShot[62], isShot[63], isShot[64], isShot[65]], 1);
constraint int_lin_eq([1, 1, 1, 1, 1], [isShot[66], isShot[67], isShot[68], isShot[69], isShot[70]], 1);
constraint int_lin_eq([1, 1, 1, 1, 1], [isShot[71], isShot[72], isShot[73], isShot[74], isShot[75]], 1);
constraint int_lin_eq([1, 1, 1, 1, 1], [isShot[76], isShot[77], isShot[78], isShot[79], isShot[80]], 1);
constraint int_lin_eq([1, 1, 1, 1, 1], [isShot[81], isShot[82], isShot[83], isShot[84], isShot[85]], 1);
constraint int_lin_eq([1, 1, 1, 1, 1], [isShot[86], isShot[87], isShot[88], isShot[89], isShot[90]], 1);
constraint int_lin_eq([1, 1, 1, 1, 1], [isShot[91], isShot[92], isShot[93], isShot[94], isShot[95]], 1);
constraint int_lin_eq([-1, 26481, 26481, 26481, 26481, 26481, 25043, 25043, 25043, 25043, 25043, 30310, 30310, 30310, 30310, 30310, 4085, 4085, 4085, 4085, 4085, 7562, 7562, 7562, 7562, 7562, 9381, 9381, 9381, 9381, 9381, 8770, 8770, 8770, 8770, 8770, 5788, 5788, 5788, 5788, 5788, 7423, 7423, 7423, 7423, 7423, 3303, 3303, 3303, 3303, 3303, 9593, 9593, 9593, 9593, 9593], [INT____00001, isPaid[1], isPaid[2], isPaid[3], isPaid[4], isPaid[5], isPaid[6], isPaid[7], isPaid[8], isPaid[9], isPaid[10], isPaid[11], isPaid[12], isPaid[13], isPaid[14], isPaid[15], isPaid[16], isPaid[17], isPaid[18], isPaid[19], isPaid[20], isPaid[21], isPaid[22], isPaid[23], isPaid[24], isPaid[25], isPaid[26], isPaid[27], isPaid[28], isPaid[29], isPaid[30], isPaid[31], isPaid[32], isPaid[33], isPaid[34], isPaid[35], isPaid[36], isPaid[37], isPaid[38], isPaid[39], isPaid[40], isPaid[41], isPaid[42], isPaid[43], isPaid[44], isPaid[45], isPaid[46], isPaid[47], isPaid[48], isPaid[49], isPaid[50], isPaid[51], isPaid[52], isPaid[53], isPaid[54], isPaid[55]], 0) :: defines_var(INT____00001);
constraint int_lin_le([-1, 1], [INT____00002, shoot[2]], 1);
constraint int_lin_le([-1, 1], [INT____00003, shoot[3]], 1);
constraint int_lin_le([-1, 1], [INT____00004, shoot[4]], 1);
constraint int_lin_le([-1, 1], [INT____00005, shoot[5]], 1);
constraint int_lin_le([-1, 1], [INT____00006, shoot[6]], 1);
constraint int_lin_le([-1, 1], [INT____00007, shoot[7]], 1);
constraint int_lin_le([-1, 1], [INT____00008, shoot[8]], 1);
constraint int_lin_le([-1, 1], [INT____00009, shoot[9]], 1);
constraint int_lin_le([-1, 1], [INT____00010, shoot[10]], 1);
constraint int_lin_le([-1, 1], [INT____00011, shoot[11]], 1);
constraint int_lin_le([-1, 1], [INT____00012, shoot[12]], 1);
constraint int_lin_le([-1, 1], [INT____00013, shoot[13]], 1);
constraint int_lin_le([-1, 1], [INT____00014, shoot[14]], 1);
constraint int_lin_le([-1, 1], [INT____00015, shoot[15]], 1);
constraint int_lin_le([-1, 1], [INT____00016, shoot[16]], 1);
constraint int_lin_le([-1, 1], [INT____00017, shoot[17]], 1);
constraint int_lin_le([-1, 1], [INT____00018, shoot[18]], 1);
constraint int_lin_le([-1, 1], [INT____00019, shoot[19]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [isShot[1], isShot[6], isShot[11], isShot[16], isShot[21], isShot[26], isShot[31], isShot[36], isShot[41], isShot[46], isShot[51], isShot[56], isShot[61], isShot[66], isShot[71], isShot[76], isShot[81], isShot[86], isShot[91]], 5);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [isShot[2], isShot[7], isShot[12], isShot[17], isShot[22], isShot[27], isShot[32], isShot[37], isShot[42], isShot[47], isShot[52], isShot[57], isShot[62], isShot[67], isShot[72], isShot[77], isShot[82], isShot[87], isShot[92]], 5);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [isShot[3], isShot[8], isShot[13], isShot[18], isShot[23], isShot[28], isShot[33], isShot[38], isShot[43], isShot[48], isShot[53], isShot[58], isShot[63], isShot[68], isShot[73], isShot[78], isShot[83], isShot[88], isShot[93]], 5);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [isShot[4], isShot[9], isShot[14], isShot[19], isShot[24], isShot[29], isShot[34], isShot[39], isShot[44], isShot[49], isShot[54], isShot[59], isShot[64], isShot[69], isShot[74], isShot[79], isShot[84], isShot[89], isShot[94]], 5);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [isShot[5], isShot[10], isShot[15], isShot[20], isShot[25], isShot[30], isShot[35], isShot[40], isShot[45], isShot[50], isShot[55], isShot[60], isShot[65], isShot[70], isShot[75], isShot[80], isShot[85], isShot[90], isShot[95]], 5);
constraint int_max(shoot[1], shoot[1], INT____00002) :: defines_var(INT____00002);
constraint int_max(shoot[2], INT____00002, INT____00003) :: defines_var(INT____00003);
constraint int_max(shoot[3], INT____00003, INT____00004) :: defines_var(INT____00004);
constraint int_max(shoot[4], INT____00004, INT____00005) :: defines_var(INT____00005);
constraint int_max(shoot[5], INT____00005, INT____00006) :: defines_var(INT____00006);
constraint int_max(shoot[6], INT____00006, INT____00007) :: defines_var(INT____00007);
constraint int_max(shoot[7], INT____00007, INT____00008) :: defines_var(INT____00008);
constraint int_max(shoot[8], INT____00008, INT____00009) :: defines_var(INT____00009);
constraint int_max(shoot[9], INT____00009, INT____00010) :: defines_var(INT____00010);
constraint int_max(shoot[10], INT____00010, INT____00011) :: defines_var(INT____00011);
constraint int_max(shoot[11], INT____00011, INT____00012) :: defines_var(INT____00012);
constraint int_max(shoot[12], INT____00012, INT____00013) :: defines_var(INT____00013);
constraint int_max(shoot[13], INT____00013, INT____00014) :: defines_var(INT____00014);
constraint int_max(shoot[14], INT____00014, INT____00015) :: defines_var(INT____00015);
constraint int_max(shoot[15], INT____00015, INT____00016) :: defines_var(INT____00016);
constraint int_max(shoot[16], INT____00016, INT____00017) :: defines_var(INT____00017);
constraint int_max(shoot[17], INT____00017, INT____00018) :: defines_var(INT____00018);
constraint int_max(shoot[18], INT____00018, INT____00019) :: defines_var(INT____00019);
solve  :: int_search(shoot, first_fail, indomain_max, complete) minimize INT____00001;
