predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var bool: BOOL____00011 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00012 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00013 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00014 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00015 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00016 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00017 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00018 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00019 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00020 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00021 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00022 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00023 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00024 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00025 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00026 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00027 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00028 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00029 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00030 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00031 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00032 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00033 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00034 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00035 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00036 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00037 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00038 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00039 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00040 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00041 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00042 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00043 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00044 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00045 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00046 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00047 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00048 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00049 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00050 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00051 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00052 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00053 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00054 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00055 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00056 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00057 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00058 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00059 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00060 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00061 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00062 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00063 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00064 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00065 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00066 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00067 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00068 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00069 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00070 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00071 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00072 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00073 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00074 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00075 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00076 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00077 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00078 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00079 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00080 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00081 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00082 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00083 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00084 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00085 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00086 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00087 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00088 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00089 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00090 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00091 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00092 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00093 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00094 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00095 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00096 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00097 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00098 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00099 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00100 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00101 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00102 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00103 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00104 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00105 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00106 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00107 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00108 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00109 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00110 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00111 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00112 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00113 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00114 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00115 :: is_defined_var :: var_is_introduced;
var 0..7: INT____00004 :: is_defined_var :: var_is_introduced;
var 0..7: INT____00005 :: is_defined_var :: var_is_introduced;
var 0..7: INT____00006 :: is_defined_var :: var_is_introduced;
var 0..7: INT____00007 :: is_defined_var :: var_is_introduced;
var 0..7: INT____00008 :: is_defined_var :: var_is_introduced;
var 0..7: INT____00009 :: is_defined_var :: var_is_introduced;
var -7..6: INT____00117 :: is_defined_var :: var_is_introduced;
var -7..6: bal :: output_var = INT____00117;
array [1..7] of var 0..7: counts____00001;
array [1..7] of var 0..5: gcc :: output_array([1..7]);
array [1..5] of var 1..7: x :: output_array([1..5]);
var 0..7: x_max____00002;
var 1..7: x_min____00003;
constraint array_bool_and([BOOL____00011, BOOL____00029, BOOL____00028, BOOL____00027, BOOL____00026, BOOL____00024, BOOL____00025], BOOL____00109) :: defines_var(BOOL____00109);
constraint array_bool_and([BOOL____00030, BOOL____00043, BOOL____00042, BOOL____00041, BOOL____00040, BOOL____00038, BOOL____00039], BOOL____00110) :: defines_var(BOOL____00110);
constraint array_bool_and([BOOL____00044, BOOL____00056, BOOL____00055, BOOL____00054, BOOL____00053, BOOL____00051, BOOL____00052], BOOL____00111) :: defines_var(BOOL____00111);
constraint array_bool_and([BOOL____00057, BOOL____00069, BOOL____00068, BOOL____00067, BOOL____00066, BOOL____00064, BOOL____00065], BOOL____00112) :: defines_var(BOOL____00112);
constraint array_bool_and([BOOL____00070, BOOL____00082, BOOL____00081, BOOL____00080, BOOL____00079, BOOL____00077, BOOL____00078], BOOL____00113) :: defines_var(BOOL____00113);
constraint array_bool_and([BOOL____00083, BOOL____00095, BOOL____00094, BOOL____00093, BOOL____00092, BOOL____00090, BOOL____00091], BOOL____00114) :: defines_var(BOOL____00114);
constraint array_bool_and([BOOL____00096, BOOL____00108, BOOL____00107, BOOL____00106, BOOL____00105, BOOL____00103, BOOL____00104], BOOL____00115) :: defines_var(BOOL____00115);
constraint array_bool_or([BOOL____00012, BOOL____00013], BOOL____00025) :: defines_var(BOOL____00025);
constraint array_bool_or([BOOL____00014, BOOL____00015], BOOL____00024) :: defines_var(BOOL____00024);
constraint array_bool_or([BOOL____00016, BOOL____00017], BOOL____00026) :: defines_var(BOOL____00026);
constraint array_bool_or([BOOL____00018, BOOL____00019], BOOL____00027) :: defines_var(BOOL____00027);
constraint array_bool_or([BOOL____00020, BOOL____00021], BOOL____00028) :: defines_var(BOOL____00028);
constraint array_bool_or([BOOL____00022, BOOL____00023], BOOL____00029) :: defines_var(BOOL____00029);
constraint array_bool_or([BOOL____00031, BOOL____00032], BOOL____00039) :: defines_var(BOOL____00039);
constraint array_bool_or([BOOL____00033, BOOL____00015], BOOL____00038) :: defines_var(BOOL____00038);
constraint array_bool_or([BOOL____00034, BOOL____00017], BOOL____00040) :: defines_var(BOOL____00040);
constraint array_bool_or([BOOL____00035, BOOL____00019], BOOL____00041) :: defines_var(BOOL____00041);
constraint array_bool_or([BOOL____00036, BOOL____00021], BOOL____00042) :: defines_var(BOOL____00042);
constraint array_bool_or([BOOL____00037, BOOL____00023], BOOL____00043) :: defines_var(BOOL____00043);
constraint array_bool_or([BOOL____00045, BOOL____00032], BOOL____00052) :: defines_var(BOOL____00052);
constraint array_bool_or([BOOL____00046, BOOL____00013], BOOL____00051) :: defines_var(BOOL____00051);
constraint array_bool_or([BOOL____00047, BOOL____00017], BOOL____00053) :: defines_var(BOOL____00053);
constraint array_bool_or([BOOL____00048, BOOL____00019], BOOL____00054) :: defines_var(BOOL____00054);
constraint array_bool_or([BOOL____00049, BOOL____00021], BOOL____00055) :: defines_var(BOOL____00055);
constraint array_bool_or([BOOL____00050, BOOL____00023], BOOL____00056) :: defines_var(BOOL____00056);
constraint array_bool_or([BOOL____00058, BOOL____00032], BOOL____00065) :: defines_var(BOOL____00065);
constraint array_bool_or([BOOL____00059, BOOL____00013], BOOL____00064) :: defines_var(BOOL____00064);
constraint array_bool_or([BOOL____00060, BOOL____00015], BOOL____00066) :: defines_var(BOOL____00066);
constraint array_bool_or([BOOL____00061, BOOL____00019], BOOL____00067) :: defines_var(BOOL____00067);
constraint array_bool_or([BOOL____00062, BOOL____00021], BOOL____00068) :: defines_var(BOOL____00068);
constraint array_bool_or([BOOL____00063, BOOL____00023], BOOL____00069) :: defines_var(BOOL____00069);
constraint array_bool_or([BOOL____00071, BOOL____00032], BOOL____00078) :: defines_var(BOOL____00078);
constraint array_bool_or([BOOL____00072, BOOL____00013], BOOL____00077) :: defines_var(BOOL____00077);
constraint array_bool_or([BOOL____00073, BOOL____00015], BOOL____00079) :: defines_var(BOOL____00079);
constraint array_bool_or([BOOL____00074, BOOL____00017], BOOL____00080) :: defines_var(BOOL____00080);
constraint array_bool_or([BOOL____00075, BOOL____00021], BOOL____00081) :: defines_var(BOOL____00081);
constraint array_bool_or([BOOL____00076, BOOL____00023], BOOL____00082) :: defines_var(BOOL____00082);
constraint array_bool_or([BOOL____00084, BOOL____00032], BOOL____00091) :: defines_var(BOOL____00091);
constraint array_bool_or([BOOL____00085, BOOL____00013], BOOL____00090) :: defines_var(BOOL____00090);
constraint array_bool_or([BOOL____00086, BOOL____00015], BOOL____00092) :: defines_var(BOOL____00092);
constraint array_bool_or([BOOL____00087, BOOL____00017], BOOL____00093) :: defines_var(BOOL____00093);
constraint array_bool_or([BOOL____00088, BOOL____00019], BOOL____00094) :: defines_var(BOOL____00094);
constraint array_bool_or([BOOL____00089, BOOL____00023], BOOL____00095) :: defines_var(BOOL____00095);
constraint array_bool_or([BOOL____00097, BOOL____00032], BOOL____00104) :: defines_var(BOOL____00104);
constraint array_bool_or([BOOL____00098, BOOL____00013], BOOL____00103) :: defines_var(BOOL____00103);
constraint array_bool_or([BOOL____00099, BOOL____00015], BOOL____00105) :: defines_var(BOOL____00105);
constraint array_bool_or([BOOL____00100, BOOL____00017], BOOL____00106) :: defines_var(BOOL____00106);
constraint array_bool_or([BOOL____00101, BOOL____00019], BOOL____00107) :: defines_var(BOOL____00107);
constraint array_bool_or([BOOL____00102, BOOL____00021], BOOL____00108) :: defines_var(BOOL____00108);
constraint array_bool_or([BOOL____00115, BOOL____00114, BOOL____00113, BOOL____00112, BOOL____00111, BOOL____00109, BOOL____00110], true);
constraint global_cardinality(x, [1, 2, 3, 4, 5, 6, 7], counts____00001);
constraint global_cardinality(x, [1, 2, 3, 4, 5, 6, 7], gcc);
constraint int_eq_reif(x_min____00003, counts____00001[1], BOOL____00011) :: defines_var(BOOL____00011);
constraint int_eq_reif(x_min____00003, counts____00001[2], BOOL____00030) :: defines_var(BOOL____00030);
constraint int_eq_reif(x_min____00003, counts____00001[3], BOOL____00044) :: defines_var(BOOL____00044);
constraint int_eq_reif(x_min____00003, counts____00001[4], BOOL____00057) :: defines_var(BOOL____00057);
constraint int_eq_reif(x_min____00003, counts____00001[5], BOOL____00070) :: defines_var(BOOL____00070);
constraint int_eq_reif(x_min____00003, counts____00001[6], BOOL____00083) :: defines_var(BOOL____00083);
constraint int_eq_reif(x_min____00003, counts____00001[7], BOOL____00096) :: defines_var(BOOL____00096);
constraint int_eq_reif(counts____00001[1], 0, BOOL____00032) :: defines_var(BOOL____00032);
constraint int_eq_reif(counts____00001[2], 0, BOOL____00013) :: defines_var(BOOL____00013);
constraint int_eq_reif(counts____00001[3], 0, BOOL____00015) :: defines_var(BOOL____00015);
constraint int_eq_reif(counts____00001[4], 0, BOOL____00017) :: defines_var(BOOL____00017);
constraint int_eq_reif(counts____00001[5], 0, BOOL____00019) :: defines_var(BOOL____00019);
constraint int_eq_reif(counts____00001[6], 0, BOOL____00021) :: defines_var(BOOL____00021);
constraint int_eq_reif(counts____00001[7], 0, BOOL____00023) :: defines_var(BOOL____00023);
constraint int_le_reif(counts____00001[1], counts____00001[2], BOOL____00012) :: defines_var(BOOL____00012);
constraint int_le_reif(counts____00001[1], counts____00001[3], BOOL____00014) :: defines_var(BOOL____00014);
constraint int_le_reif(counts____00001[1], counts____00001[4], BOOL____00016) :: defines_var(BOOL____00016);
constraint int_le_reif(counts____00001[1], counts____00001[5], BOOL____00018) :: defines_var(BOOL____00018);
constraint int_le_reif(counts____00001[1], counts____00001[6], BOOL____00020) :: defines_var(BOOL____00020);
constraint int_le_reif(counts____00001[1], counts____00001[7], BOOL____00022) :: defines_var(BOOL____00022);
constraint int_le_reif(counts____00001[2], counts____00001[1], BOOL____00031) :: defines_var(BOOL____00031);
constraint int_le_reif(counts____00001[2], counts____00001[3], BOOL____00033) :: defines_var(BOOL____00033);
constraint int_le_reif(counts____00001[2], counts____00001[4], BOOL____00034) :: defines_var(BOOL____00034);
constraint int_le_reif(counts____00001[2], counts____00001[5], BOOL____00035) :: defines_var(BOOL____00035);
constraint int_le_reif(counts____00001[2], counts____00001[6], BOOL____00036) :: defines_var(BOOL____00036);
constraint int_le_reif(counts____00001[2], counts____00001[7], BOOL____00037) :: defines_var(BOOL____00037);
constraint int_le_reif(counts____00001[3], counts____00001[1], BOOL____00045) :: defines_var(BOOL____00045);
constraint int_le_reif(counts____00001[3], counts____00001[2], BOOL____00046) :: defines_var(BOOL____00046);
constraint int_le_reif(counts____00001[3], counts____00001[4], BOOL____00047) :: defines_var(BOOL____00047);
constraint int_le_reif(counts____00001[3], counts____00001[5], BOOL____00048) :: defines_var(BOOL____00048);
constraint int_le_reif(counts____00001[3], counts____00001[6], BOOL____00049) :: defines_var(BOOL____00049);
constraint int_le_reif(counts____00001[3], counts____00001[7], BOOL____00050) :: defines_var(BOOL____00050);
constraint int_le_reif(counts____00001[4], counts____00001[1], BOOL____00058) :: defines_var(BOOL____00058);
constraint int_le_reif(counts____00001[4], counts____00001[2], BOOL____00059) :: defines_var(BOOL____00059);
constraint int_le_reif(counts____00001[4], counts____00001[3], BOOL____00060) :: defines_var(BOOL____00060);
constraint int_le_reif(counts____00001[4], counts____00001[5], BOOL____00061) :: defines_var(BOOL____00061);
constraint int_le_reif(counts____00001[4], counts____00001[6], BOOL____00062) :: defines_var(BOOL____00062);
constraint int_le_reif(counts____00001[4], counts____00001[7], BOOL____00063) :: defines_var(BOOL____00063);
constraint int_le_reif(counts____00001[5], counts____00001[1], BOOL____00071) :: defines_var(BOOL____00071);
constraint int_le_reif(counts____00001[5], counts____00001[2], BOOL____00072) :: defines_var(BOOL____00072);
constraint int_le_reif(counts____00001[5], counts____00001[3], BOOL____00073) :: defines_var(BOOL____00073);
constraint int_le_reif(counts____00001[5], counts____00001[4], BOOL____00074) :: defines_var(BOOL____00074);
constraint int_le_reif(counts____00001[5], counts____00001[6], BOOL____00075) :: defines_var(BOOL____00075);
constraint int_le_reif(counts____00001[5], counts____00001[7], BOOL____00076) :: defines_var(BOOL____00076);
constraint int_le_reif(counts____00001[6], counts____00001[1], BOOL____00084) :: defines_var(BOOL____00084);
constraint int_le_reif(counts____00001[6], counts____00001[2], BOOL____00085) :: defines_var(BOOL____00085);
constraint int_le_reif(counts____00001[6], counts____00001[3], BOOL____00086) :: defines_var(BOOL____00086);
constraint int_le_reif(counts____00001[6], counts____00001[4], BOOL____00087) :: defines_var(BOOL____00087);
constraint int_le_reif(counts____00001[6], counts____00001[5], BOOL____00088) :: defines_var(BOOL____00088);
constraint int_le_reif(counts____00001[6], counts____00001[7], BOOL____00089) :: defines_var(BOOL____00089);
constraint int_le_reif(counts____00001[7], counts____00001[1], BOOL____00097) :: defines_var(BOOL____00097);
constraint int_le_reif(counts____00001[7], counts____00001[2], BOOL____00098) :: defines_var(BOOL____00098);
constraint int_le_reif(counts____00001[7], counts____00001[3], BOOL____00099) :: defines_var(BOOL____00099);
constraint int_le_reif(counts____00001[7], counts____00001[4], BOOL____00100) :: defines_var(BOOL____00100);
constraint int_le_reif(counts____00001[7], counts____00001[5], BOOL____00101) :: defines_var(BOOL____00101);
constraint int_le_reif(counts____00001[7], counts____00001[6], BOOL____00102) :: defines_var(BOOL____00102);
constraint int_max(counts____00001[1], counts____00001[1], INT____00004) :: defines_var(INT____00004);
constraint int_max(counts____00001[2], INT____00004, INT____00005) :: defines_var(INT____00005);
constraint int_max(counts____00001[3], INT____00005, INT____00006) :: defines_var(INT____00006);
constraint int_max(counts____00001[4], INT____00006, INT____00007) :: defines_var(INT____00007);
constraint int_max(counts____00001[5], INT____00007, INT____00008) :: defines_var(INT____00008);
constraint int_max(counts____00001[6], INT____00008, INT____00009) :: defines_var(INT____00009);
constraint int_max(counts____00001[7], INT____00009, x_max____00002);
constraint int_plus(INT____00117, x_min____00003, x_max____00002) :: defines_var(INT____00117);
solve  :: int_search([x[1], x[2], x[3], x[4], x[5], INT____00117], first_fail, indomain_min, complete) satisfy;
