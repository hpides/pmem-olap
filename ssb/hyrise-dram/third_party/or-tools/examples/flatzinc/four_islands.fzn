predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var bool: BOOL____00001 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00002 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00003 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00004 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00005 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00006 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00008 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00009 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00010 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00011 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00012 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00013 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00015 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00016 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00017 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00018 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00019 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00020 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00022 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00023 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00024 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00025 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00026 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00027 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00028 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00029 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00030 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00031 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00032 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00033 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00035 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00036 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00037 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00038 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00039 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00040 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00041 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00042 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00043 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00044 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00045 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00046 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00048 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00049 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00050 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00051 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00052 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00053 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00054 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00055 :: is_defined_var :: var_is_introduced;
var 1..4: Pwana;
var 1..4: Quero;
var 1..4: Rayou;
var 1..4: Skern;
var 1..4: alabaster;
var 1..4: bananas;
var 1..4: coconuts;
var 1..4: durian_fruit;
array [1..4] of var 1..4: export :: output_array([1..4]) = [alabaster, bananas, coconuts, durian_fruit];
var 1..4: ice_skating_rink;
array [1..4] of var 1..4: island :: output_array([1..4]) = [Pwana, Quero, Rayou, Skern];
var 1..4: jai_alai_stadium;
var 1..4: koala_preserve;
var 1..4: resort_hotel;
array [1..4] of var 1..4: attraction :: output_array([1..4]) = [resort_hotel, ice_skating_rink, jai_alai_stadium, koala_preserve];
constraint all_different_int(attraction);
constraint all_different_int(export);
constraint all_different_int(island);
constraint array_bool_and([BOOL____00001, BOOL____00002], BOOL____00005) :: defines_var(BOOL____00005);
constraint array_bool_and([BOOL____00003, BOOL____00004], BOOL____00006) :: defines_var(BOOL____00006);
constraint array_bool_and([BOOL____00008, BOOL____00009], BOOL____00012) :: defines_var(BOOL____00012);
constraint array_bool_and([BOOL____00010, BOOL____00011], BOOL____00013) :: defines_var(BOOL____00013);
constraint array_bool_and([BOOL____00015, BOOL____00016], BOOL____00019) :: defines_var(BOOL____00019);
constraint array_bool_and([BOOL____00017, BOOL____00018], BOOL____00020) :: defines_var(BOOL____00020);
constraint array_bool_and([BOOL____00022, BOOL____00023], BOOL____00026) :: defines_var(BOOL____00026);
constraint array_bool_and([BOOL____00024, BOOL____00025], BOOL____00027) :: defines_var(BOOL____00027);
constraint array_bool_and([BOOL____00028, BOOL____00029], BOOL____00030) :: defines_var(BOOL____00030);
constraint array_bool_and([BOOL____00031, BOOL____00032], BOOL____00033) :: defines_var(BOOL____00033);
constraint array_bool_and([BOOL____00035, BOOL____00036], BOOL____00039) :: defines_var(BOOL____00039);
constraint array_bool_and([BOOL____00037, BOOL____00038], BOOL____00040) :: defines_var(BOOL____00040);
constraint array_bool_and([BOOL____00041, BOOL____00042], BOOL____00043) :: defines_var(BOOL____00043);
constraint array_bool_and([BOOL____00044, BOOL____00045], BOOL____00046) :: defines_var(BOOL____00046);
constraint array_bool_and([BOOL____00048, BOOL____00029], BOOL____00050) :: defines_var(BOOL____00050);
constraint array_bool_and([BOOL____00049, BOOL____00025], BOOL____00051) :: defines_var(BOOL____00051);
constraint array_bool_and([BOOL____00052, BOOL____00023], BOOL____00053) :: defines_var(BOOL____00053);
constraint array_bool_and([BOOL____00054, BOOL____00032], BOOL____00055) :: defines_var(BOOL____00055);
constraint array_bool_or([BOOL____00005, BOOL____00006], true);
constraint array_bool_or([BOOL____00012, BOOL____00013], true);
constraint array_bool_or([BOOL____00019, BOOL____00020], true);
constraint array_bool_or([BOOL____00033, BOOL____00030, BOOL____00026, BOOL____00027], true);
constraint array_bool_or([BOOL____00046, BOOL____00043, BOOL____00039, BOOL____00040], true);
constraint array_bool_or([BOOL____00055, BOOL____00053, BOOL____00050, BOOL____00051], true);
constraint int_eq_reif(Pwana, 1, BOOL____00001) :: defines_var(BOOL____00001);
constraint int_eq_reif(Pwana, 2, BOOL____00003) :: defines_var(BOOL____00003);
constraint int_eq_reif(Quero, 2, BOOL____00009) :: defines_var(BOOL____00009);
constraint int_eq_reif(Quero, 4, BOOL____00011) :: defines_var(BOOL____00011);
constraint int_eq_reif(Rayou, 1, BOOL____00035) :: defines_var(BOOL____00035);
constraint int_eq_reif(Rayou, 2, BOOL____00037) :: defines_var(BOOL____00037);
constraint int_eq_reif(Rayou, 3, BOOL____00041) :: defines_var(BOOL____00041);
constraint int_eq_reif(Rayou, 4, BOOL____00044) :: defines_var(BOOL____00044);
constraint int_eq_reif(Skern, 1, BOOL____00022) :: defines_var(BOOL____00022);
constraint int_eq_reif(Skern, 2, BOOL____00028) :: defines_var(BOOL____00028);
constraint int_eq_reif(Skern, 3, BOOL____00024) :: defines_var(BOOL____00024);
constraint int_eq_reif(Skern, 4, BOOL____00031) :: defines_var(BOOL____00031);
constraint int_eq_reif(alabaster, 1, BOOL____00008) :: defines_var(BOOL____00008);
constraint int_eq_reif(alabaster, 3, BOOL____00010) :: defines_var(BOOL____00010);
constraint int_eq_reif(bananas, 1, BOOL____00038) :: defines_var(BOOL____00038);
constraint int_eq_reif(bananas, 2, BOOL____00036) :: defines_var(BOOL____00036);
constraint int_eq_reif(bananas, 3, BOOL____00045) :: defines_var(BOOL____00045);
constraint int_eq_reif(bananas, 4, BOOL____00042) :: defines_var(BOOL____00042);
constraint int_eq_reif(durian_fruit, 1, BOOL____00015) :: defines_var(BOOL____00015);
constraint int_eq_reif(durian_fruit, 3, BOOL____00017) :: defines_var(BOOL____00017);
constraint int_eq_reif(ice_skating_rink, 1, BOOL____00048) :: defines_var(BOOL____00048);
constraint int_eq_reif(ice_skating_rink, 2, BOOL____00052) :: defines_var(BOOL____00052);
constraint int_eq_reif(ice_skating_rink, 3, BOOL____00054) :: defines_var(BOOL____00054);
constraint int_eq_reif(ice_skating_rink, 4, BOOL____00049) :: defines_var(BOOL____00049);
constraint int_eq_reif(jai_alai_stadium, 1, BOOL____00025) :: defines_var(BOOL____00025);
constraint int_eq_reif(jai_alai_stadium, 2, BOOL____00032) :: defines_var(BOOL____00032);
constraint int_eq_reif(jai_alai_stadium, 3, BOOL____00023) :: defines_var(BOOL____00023);
constraint int_eq_reif(jai_alai_stadium, 4, BOOL____00029) :: defines_var(BOOL____00029);
constraint int_eq_reif(koala_preserve, 3, BOOL____00002) :: defines_var(BOOL____00002);
constraint int_eq_reif(koala_preserve, 4, BOOL____00004) :: defines_var(BOOL____00004);
constraint int_eq_reif(resort_hotel, 2, BOOL____00016) :: defines_var(BOOL____00016);
constraint int_eq_reif(resort_hotel, 4, BOOL____00018) :: defines_var(BOOL____00018);
solve satisfy;
