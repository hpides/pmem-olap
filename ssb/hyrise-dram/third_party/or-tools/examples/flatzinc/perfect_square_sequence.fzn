predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var 2..30: INT____00001 :: is_defined_var :: var_is_introduced;
var 2..30: INT____00002 :: is_defined_var :: var_is_introduced;
var 2..30: INT____00003 :: is_defined_var :: var_is_introduced;
var 2..30: INT____00004 :: is_defined_var :: var_is_introduced;
var 2..30: INT____00005 :: is_defined_var :: var_is_introduced;
var 2..30: INT____00006 :: is_defined_var :: var_is_introduced;
var 2..30: INT____00007 :: is_defined_var :: var_is_introduced;
var 2..30: INT____00008 :: is_defined_var :: var_is_introduced;
var 2..30: INT____00009 :: is_defined_var :: var_is_introduced;
var 2..30: INT____00010 :: is_defined_var :: var_is_introduced;
var 2..30: INT____00011 :: is_defined_var :: var_is_introduced;
var 2..30: INT____00012 :: is_defined_var :: var_is_introduced;
var 2..30: INT____00013 :: is_defined_var :: var_is_introduced;
var 2..30: INT____00014 :: is_defined_var :: var_is_introduced;
array [1..15] of var 1..15: x :: output_array([1..15]);
constraint all_different_int(x);
constraint int_lt(x[1], x[15]);
constraint int_plus(x[1], x[2], INT____00001) :: defines_var(INT____00001);
constraint int_plus(x[2], x[3], INT____00002) :: defines_var(INT____00002);
constraint int_plus(x[3], x[4], INT____00003) :: defines_var(INT____00003);
constraint int_plus(x[4], x[5], INT____00004) :: defines_var(INT____00004);
constraint int_plus(x[5], x[6], INT____00005) :: defines_var(INT____00005);
constraint int_plus(x[6], x[7], INT____00006) :: defines_var(INT____00006);
constraint int_plus(x[7], x[8], INT____00007) :: defines_var(INT____00007);
constraint int_plus(x[8], x[9], INT____00008) :: defines_var(INT____00008);
constraint int_plus(x[9], x[10], INT____00009) :: defines_var(INT____00009);
constraint int_plus(x[10], x[11], INT____00010) :: defines_var(INT____00010);
constraint int_plus(x[11], x[12], INT____00011) :: defines_var(INT____00011);
constraint int_plus(x[12], x[13], INT____00012) :: defines_var(INT____00012);
constraint int_plus(x[13], x[14], INT____00013) :: defines_var(INT____00013);
constraint int_plus(x[14], x[15], INT____00014) :: defines_var(INT____00014);
constraint set_in(INT____00001, {1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225});
constraint set_in(INT____00002, {1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225});
constraint set_in(INT____00003, {1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225});
constraint set_in(INT____00004, {1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225});
constraint set_in(INT____00005, {1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225});
constraint set_in(INT____00006, {1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225});
constraint set_in(INT____00007, {1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225});
constraint set_in(INT____00008, {1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225});
constraint set_in(INT____00009, {1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225});
constraint set_in(INT____00010, {1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225});
constraint set_in(INT____00011, {1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225});
constraint set_in(INT____00012, {1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225});
constraint set_in(INT____00013, {1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225});
constraint set_in(INT____00014, {1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225});
solve  :: int_search(x, max_regret, indomain_split, complete) satisfy;
