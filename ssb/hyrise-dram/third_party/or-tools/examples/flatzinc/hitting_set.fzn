predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..128] of set of int: v = [{2, 3, 5, 9, 17, 33, 65}, {1, 3, 4, 5, 6, 9, 10, 17, 18, 33, 34, 65, 66}, {1, 2, 4, 5, 6, 7, 9, 10, 11, 17, 18, 19, 33, 34, 35, 65, 66, 67}, {2, 3, 6, 7, 8, 10, 12, 18, 20, 34, 36, 66, 68}, {1, 2, 3, 6, 7, 9, 10, 11, 13, 17, 19, 21, 33, 35, 37, 65, 67, 69}, {2, 3, 4, 5, 7, 8, 10, 11, 12, 14, 18, 19, 20, 22, 34, 35, 36, 38, 66, 67, 68, 70}, {3, 4, 5, 6, 8, 11, 12, 13, 14, 15, 19, 20, 23, 35, 36, 39, 67, 68, 71}, {4, 6, 7, 12, 14, 15, 16, 20, 24, 36, 40, 68, 72}, {1, 2, 3, 5, 10, 11, 13, 17, 18, 19, 21, 25, 33, 37, 41, 65, 69, 73}, {2, 3, 4, 5, 6, 9, 11, 12, 13, 14, 18, 19, 20, 21, 22, 26, 34, 37, 38, 42, 66, 69, 70, 74}, {3, 5, 6, 7, 9, 10, 12, 13, 14, 15, 19, 21, 22, 23, 27, 35, 37, 38, 39, 43, 67, 69, 70, 71, 75}, {4, 6, 7, 8, 10, 11, 14, 15, 16, 20, 22, 23, 24, 28, 36, 38, 40, 44, 68, 70, 72, 76}, {5, 7, 9, 10, 11, 14, 15, 21, 23, 25, 26, 27, 29, 37, 39, 45, 69, 71, 77}, {6, 7, 8, 10, 11, 12, 13, 15, 16, 22, 23, 24, 26, 27, 28, 30, 38, 39, 40, 46, 70, 71, 72, 78}, {7, 8, 11, 12, 13, 14, 16, 23, 24, 27, 29, 30, 31, 39, 40, 47, 71, 72, 79}, {8, 12, 14, 15, 24, 28, 30, 31, 32, 40, 48, 72, 80}, {1, 2, 3, 5, 9, 18, 19, 21, 25, 33, 34, 35, 37, 41, 49, 65, 73, 81}, {2, 3, 4, 6, 9, 10, 17, 19, 20, 21, 22, 25, 26, 34, 35, 36, 38, 41, 42, 50, 66, 73, 74, 82}, {3, 5, 6, 7, 9, 10, 11, 17, 18, 20, 21, 22, 23, 25, 26, 27, 35, 37, 38, 39, 41, 42, 43, 51, 67, 73, 74, 75, 83}, {4, 6, 7, 8, 10, 12, 18, 19, 22, 23, 24, 26, 28, 36, 38, 39, 40, 42, 44, 52, 68, 74, 76, 84}, {5, 9, 10, 11, 13, 17, 18, 19, 22, 23, 25, 26, 27, 29, 37, 41, 42, 43, 45, 53, 69, 73, 75, 77, 85}, {6, 10, 11, 12, 14, 18, 19, 20, 21, 23, 24, 26, 27, 28, 30, 38, 42, 43, 44, 46, 54, 70, 74, 75, 76, 78, 86}, {7, 11, 12, 13, 14, 15, 19, 20, 21, 22, 24, 27, 28, 29, 30, 31, 39, 43, 44, 45, 46, 47, 55, 71, 75, 76, 79, 87}, {8, 12, 14, 15, 16, 20, 22, 23, 28, 30, 31, 32, 40, 44, 46, 47, 48, 56, 72, 76, 80, 88}, {9, 13, 17, 18, 19, 21, 26, 27, 29, 41, 45, 49, 50, 51, 53, 57, 73, 77, 89}, {10, 13, 14, 18, 19, 20, 21, 22, 25, 27, 28, 29, 30, 42, 45, 46, 50, 51, 52, 54, 58, 74, 77, 78, 90}, {11, 13, 14, 15, 19, 21, 22, 23, 25, 26, 28, 29, 30, 31, 43, 45, 46, 47, 51, 53, 54, 55, 59, 75, 77, 78, 79, 91}, {12, 14, 16, 20, 22, 23, 24, 26, 27, 30, 31, 32, 44, 46, 48, 52, 54, 55, 56, 60, 76, 78, 80, 92}, {13, 15, 21, 23, 25, 26, 27, 30, 31, 45, 47, 53, 57, 58, 59, 61, 77, 79, 93}, {14, 15, 16, 22, 23, 24, 26, 27, 28, 29, 31, 32, 46, 47, 48, 54, 58, 59, 60, 62, 78, 79, 80, 94}, {15, 16, 23, 24, 27, 28, 29, 30, 32, 47, 48, 55, 59, 61, 62, 63, 79, 80, 95}, {16, 24, 28, 30, 31, 48, 56, 60, 62, 63, 64, 80, 96}, {1, 2, 3, 5, 9, 17, 34, 35, 37, 41, 49, 65, 66, 67, 69, 73, 81, 97}, {2, 3, 4, 6, 10, 17, 18, 33, 35, 36, 37, 38, 41, 42, 49, 50, 66, 67, 68, 70, 74, 81, 82, 98}, {3, 5, 6, 7, 11, 17, 18, 19, 33, 34, 36, 37, 38, 39, 41, 42, 43, 49, 50, 51, 67, 69, 70, 71, 75, 81, 82, 83, 99}, {4, 6, 7, 8, 12, 18, 20, 34, 35, 38, 39, 40, 42, 44, 50, 52, 68, 70, 71, 72, 76, 82, 84, 100}, {5, 9, 10, 11, 13, 17, 19, 21, 33, 34, 35, 38, 39, 41, 42, 43, 45, 49, 51, 53, 69, 73, 74, 75, 77, 81, 83, 85, 101}, {6, 10, 11, 12, 14, 18, 19, 20, 22, 34, 35, 36, 37, 39, 40, 42, 43, 44, 46, 50, 51, 52, 54, 70, 74, 75, 76, 78, 82, 83, 84, 86, 102}, {7, 11, 13, 14, 15, 19, 20, 23, 35, 36, 37, 38, 40, 43, 44, 45, 46, 47, 51, 52, 55, 71, 75, 77, 78, 79, 83, 84, 87, 103}, {8, 12, 14, 15, 16, 20, 24, 36, 38, 39, 44, 46, 47, 48, 52, 56, 72, 76, 78, 79, 80, 84, 88, 104}, {9, 17, 18, 19, 21, 25, 33, 34, 35, 37, 42, 43, 45, 49, 50, 51, 53, 57, 73, 81, 82, 83, 85, 89, 105}, {10, 18, 19, 20, 21, 22, 26, 34, 35, 36, 37, 38, 41, 43, 44, 45, 46, 50, 51, 52, 53, 54, 58, 74, 82, 83, 84, 85, 86, 90, 106}, {11, 19, 21, 22, 23, 27, 35, 37, 38, 39, 41, 42, 44, 45, 46, 47, 51, 53, 54, 55, 59, 75, 83, 85, 86, 87, 91, 107}, {12, 20, 22, 23, 24, 28, 36, 38, 39, 40, 42, 43, 46, 47, 48, 52, 54, 55, 56, 60, 76, 84, 86, 87, 88, 92, 108}, {13, 21, 23, 25, 26, 27, 29, 37, 39, 41, 42, 43, 46, 47, 53, 55, 57, 58, 59, 61, 77, 85, 87, 89, 90, 91, 93, 109}, {14, 22, 23, 24, 26, 27, 28, 30, 38, 39, 40, 42, 43, 44, 45, 47, 48, 54, 55, 56, 58, 59, 60, 62, 78, 86, 87, 88, 90, 91, 92, 94, 110}, {15, 23, 24, 27, 29, 30, 31, 39, 40, 43, 44, 45, 46, 48, 55, 56, 59, 61, 62, 63, 79, 87, 88, 91, 93, 94, 95, 111}, {16, 24, 28, 30, 31, 32, 40, 44, 46, 47, 56, 60, 62, 63, 64, 80, 88, 92, 94, 95, 96, 112}, {17, 25, 33, 34, 35, 37, 41, 50, 51, 53, 57, 81, 89, 97, 98, 99, 101, 105, 113}, {18, 25, 26, 34, 35, 36, 38, 41, 42, 49, 51, 52, 53, 54, 57, 58, 82, 89, 90, 98, 99, 100, 102, 106, 114}, {19, 25, 26, 27, 35, 37, 38, 39, 41, 42, 43, 49, 50, 52, 53, 54, 55, 57, 58, 59, 83, 89, 90, 91, 99, 101, 102, 103, 107, 115}, {20, 26, 28, 36, 38, 39, 40, 42, 44, 50, 51, 54, 55, 56, 58, 60, 84, 90, 92, 100, 102, 103, 104, 108, 116}, {21, 25, 27, 29, 37, 41, 42, 43, 45, 49, 50, 51, 54, 55, 57, 58, 59, 61, 85, 89, 91, 93, 101, 105, 106, 107, 109, 117}, {22, 26, 27, 28, 30, 38, 42, 43, 44, 46, 50, 51, 52, 53, 55, 56, 58, 59, 60, 62, 86, 90, 91, 92, 94, 102, 106, 107, 108, 110, 118}, {23, 27, 28, 31, 39, 43, 44, 45, 46, 47, 51, 52, 53, 54, 56, 59, 60, 61, 62, 63, 87, 91, 92, 95, 103, 107, 109, 110, 111, 119}, {24, 28, 32, 40, 44, 46, 47, 48, 52, 54, 55, 60, 62, 63, 64, 88, 92, 96, 104, 108, 110, 111, 112, 120}, {25, 29, 41, 45, 49, 50, 51, 53, 58, 59, 61, 89, 93, 105, 113, 114, 115, 117, 121}, {26, 29, 30, 42, 45, 46, 50, 51, 52, 53, 54, 57, 59, 60, 61, 62, 90, 93, 94, 106, 114, 115, 116, 118, 122}, {27, 29, 30, 31, 43, 45, 46, 47, 51, 53, 54, 55, 57, 58, 60, 61, 62, 63, 91, 93, 94, 95, 107, 115, 117, 118, 119, 123}, {28, 30, 32, 44, 46, 48, 52, 54, 55, 56, 58, 59, 62, 63, 64, 92, 94, 96, 108, 116, 118, 119, 120, 124}, {29, 31, 45, 47, 53, 55, 57, 58, 59, 62, 63, 93, 95, 109, 117, 121, 122, 123, 125}, {30, 31, 32, 46, 47, 48, 54, 55, 56, 58, 59, 60, 61, 63, 64, 94, 95, 96, 110, 118, 122, 123, 124, 126}, {31, 32, 47, 48, 55, 56, 59, 60, 61, 62, 64, 95, 96, 111, 119, 123, 125, 126, 127}, {32, 48, 56, 60, 62, 63, 96, 112, 120, 124, 126, 127, 128}, {1, 2, 3, 5, 9, 17, 33, 66, 67, 69, 73, 81, 97}, {2, 3, 4, 6, 10, 18, 33, 34, 65, 67, 68, 69, 70, 73, 74, 81, 82, 97, 98}, {3, 5, 6, 7, 11, 19, 33, 34, 35, 65, 66, 68, 69, 70, 71, 73, 74, 75, 81, 82, 83, 97, 98, 99}, {4, 6, 7, 8, 12, 20, 34, 36, 66, 67, 70, 71, 72, 74, 76, 82, 84, 98, 100}, {5, 9, 10, 11, 13, 21, 33, 35, 37, 65, 66, 67, 70, 71, 73, 74, 75, 77, 81, 83, 85, 97, 99, 101}, {6, 10, 11, 12, 14, 22, 34, 35, 36, 38, 66, 67, 68, 69, 71, 72, 74, 75, 76, 78, 82, 83, 84, 86, 98, 99, 100, 102}, {7, 11, 13, 14, 15, 23, 35, 36, 39, 67, 68, 69, 70, 72, 75, 76, 77, 78, 79, 83, 84, 87, 99, 100, 103}, {8, 12, 14, 15, 16, 24, 36, 40, 68, 70, 71, 76, 78, 79, 80, 84, 88, 100, 104}, {9, 17, 18, 19, 21, 25, 33, 37, 41, 65, 66, 67, 69, 74, 75, 77, 81, 82, 83, 85, 89, 97, 101, 105}, {10, 18, 19, 20, 22, 26, 34, 37, 38, 42, 66, 67, 68, 69, 70, 73, 75, 76, 77, 78, 82, 83, 84, 85, 86, 90, 98, 101, 102, 106}, {11, 19, 21, 22, 23, 27, 35, 37, 38, 39, 43, 67, 69, 70, 71, 73, 74, 76, 77, 78, 79, 83, 85, 86, 87, 91, 99, 101, 102, 103, 107}, {12, 20, 22, 23, 24, 28, 36, 38, 40, 44, 68, 70, 71, 72, 74, 75, 78, 79, 80, 84, 86, 87, 88, 92, 100, 102, 104, 108}, {13, 21, 25, 26, 27, 29, 37, 39, 45, 69, 71, 73, 74, 75, 78, 79, 85, 87, 89, 90, 91, 93, 101, 103, 109}, {14, 22, 26, 27, 28, 30, 38, 39, 40, 46, 70, 71, 72, 74, 75, 76, 77, 79, 80, 86, 87, 88, 90, 91, 92, 94, 102, 103, 104, 110}, {15, 23, 27, 29, 30, 31, 39, 40, 47, 71, 72, 75, 76, 77, 78, 80, 87, 88, 91, 93, 94, 95, 103, 104, 111}, {16, 24, 28, 30, 31, 32, 40, 48, 72, 76, 78, 79, 88, 92, 94, 95, 96, 104, 112}, {17, 33, 34, 35, 37, 41, 49, 65, 66, 67, 69, 73, 82, 83, 85, 89, 97, 98, 99, 101, 105, 113}, {18, 34, 35, 36, 38, 41, 42, 50, 66, 67, 68, 70, 73, 74, 81, 83, 84, 85, 86, 89, 90, 98, 99, 100, 102, 105, 106, 114}, {19, 35, 37, 38, 39, 41, 42, 43, 51, 67, 69, 70, 71, 73, 74, 75, 81, 82, 84, 85, 86, 87, 89, 90, 91, 99, 101, 102, 103, 105, 106, 107, 115}, {20, 36, 38, 39, 40, 42, 44, 52, 68, 70, 71, 72, 74, 76, 82, 83, 86, 87, 88, 90, 92, 100, 102, 103, 104, 106, 108, 116}, {21, 37, 41, 42, 43, 45, 53, 69, 73, 74, 75, 77, 81, 82, 83, 86, 87, 89, 90, 91, 93, 101, 105, 106, 107, 109, 117}, {22, 38, 42, 43, 44, 46, 54, 70, 74, 75, 76, 78, 82, 83, 84, 85, 87, 88, 90, 91, 92, 94, 102, 106, 107, 108, 110, 118}, {23, 39, 43, 44, 45, 46, 47, 55, 71, 75, 76, 77, 78, 79, 83, 84, 85, 86, 88, 91, 92, 93, 94, 95, 103, 107, 108, 109, 110, 111, 119}, {24, 40, 44, 46, 47, 48, 56, 72, 76, 78, 79, 80, 84, 86, 87, 92, 94, 95, 96, 104, 108, 110, 111, 112, 120}, {25, 41, 45, 49, 50, 51, 53, 57, 73, 77, 81, 82, 83, 85, 90, 91, 93, 105, 109, 113, 114, 115, 117, 121}, {26, 42, 45, 46, 50, 51, 52, 54, 58, 74, 77, 78, 82, 83, 84, 85, 86, 89, 91, 92, 93, 94, 106, 109, 110, 114, 115, 116, 118, 122}, {27, 43, 45, 46, 47, 51, 53, 54, 55, 59, 75, 77, 78, 79, 83, 85, 86, 87, 89, 90, 92, 93, 94, 95, 107, 109, 110, 111, 115, 117, 118, 119, 123}, {28, 44, 46, 48, 52, 54, 55, 56, 60, 76, 78, 80, 84, 86, 87, 88, 90, 91, 94, 95, 96, 108, 110, 112, 116, 118, 119, 120, 124}, {29, 45, 47, 53, 57, 58, 59, 61, 77, 79, 85, 87, 89, 90, 91, 94, 95, 109, 111, 117, 121, 122, 123, 125}, {30, 46, 47, 48, 54, 58, 59, 60, 62, 78, 79, 80, 86, 87, 88, 90, 91, 92, 93, 95, 96, 110, 111, 112, 118, 122, 123, 124, 126}, {31, 47, 48, 55, 59, 61, 62, 63, 79, 80, 87, 88, 91, 92, 93, 94, 96, 111, 112, 119, 123, 125, 126, 127}, {32, 48, 56, 60, 62, 63, 64, 80, 88, 92, 94, 95, 112, 120, 124, 126, 127, 128}, {33, 49, 65, 66, 67, 69, 73, 81, 98, 99, 101, 105, 113}, {34, 49, 50, 66, 67, 68, 70, 74, 81, 82, 97, 99, 100, 101, 102, 105, 106, 113, 114}, {35, 49, 50, 51, 67, 69, 70, 71, 75, 81, 82, 83, 97, 98, 100, 101, 102, 103, 105, 106, 107, 113, 114, 115}, {36, 50, 52, 68, 70, 71, 72, 76, 82, 84, 98, 99, 102, 103, 104, 106, 108, 114, 116}, {37, 49, 51, 53, 69, 73, 74, 75, 77, 81, 83, 85, 97, 98, 99, 102, 103, 105, 106, 107, 109, 113, 115, 117}, {38, 50, 51, 52, 54, 70, 74, 75, 76, 78, 82, 83, 84, 86, 98, 99, 100, 101, 103, 104, 106, 107, 108, 110, 114, 115, 116, 118}, {39, 51, 52, 55, 71, 75, 77, 78, 79, 83, 84, 87, 99, 100, 101, 102, 104, 107, 108, 109, 110, 111, 115, 116, 119}, {40, 52, 56, 72, 76, 78, 79, 80, 84, 88, 100, 102, 103, 108, 110, 111, 112, 116, 120}, {41, 49, 53, 57, 73, 81, 82, 83, 85, 89, 97, 98, 99, 101, 106, 107, 109, 113, 114, 115, 117, 121}, {42, 50, 53, 54, 58, 74, 82, 83, 84, 85, 86, 90, 98, 99, 100, 101, 102, 105, 107, 108, 109, 110, 114, 115, 116, 117, 118, 122}, {43, 51, 53, 54, 55, 59, 75, 83, 85, 86, 87, 91, 99, 101, 102, 103, 105, 106, 108, 109, 110, 111, 115, 117, 118, 119, 123}, {44, 52, 54, 56, 60, 76, 84, 86, 87, 88, 92, 100, 102, 103, 104, 106, 107, 110, 111, 112, 116, 118, 119, 120, 124}, {45, 53, 55, 61, 77, 85, 87, 89, 90, 91, 93, 101, 103, 105, 106, 107, 110, 111, 117, 119, 121, 122, 123, 125}, {46, 54, 55, 56, 62, 78, 86, 87, 88, 90, 91, 92, 94, 102, 103, 104, 106, 107, 108, 109, 111, 112, 118, 119, 120, 122, 123, 124, 126}, {47, 55, 56, 63, 79, 87, 88, 91, 93, 94, 95, 103, 104, 107, 108, 109, 110, 112, 119, 120, 123, 125, 126, 127}, {48, 56, 64, 80, 88, 92, 94, 95, 96, 104, 108, 110, 111, 120, 124, 126, 127, 128}, {49, 57, 81, 89, 97, 98, 99, 101, 105, 114, 115, 117, 121}, {50, 57, 58, 82, 89, 90, 98, 99, 100, 102, 105, 106, 113, 115, 116, 117, 118, 121, 122}, {51, 57, 58, 59, 83, 89, 90, 91, 99, 101, 102, 103, 105, 106, 107, 113, 114, 116, 117, 118, 119, 121, 122, 123}, {52, 58, 60, 84, 90, 92, 100, 102, 103, 104, 106, 108, 114, 115, 118, 119, 120, 122, 124}, {53, 57, 59, 61, 85, 89, 91, 93, 101, 105, 106, 107, 109, 113, 114, 115, 118, 119, 121, 122, 123, 125}, {54, 58, 59, 60, 62, 86, 90, 91, 92, 94, 102, 106, 107, 108, 110, 114, 115, 116, 117, 119, 120, 122, 123, 124, 126}, {55, 59, 60, 63, 87, 91, 92, 95, 103, 107, 108, 109, 110, 111, 115, 116, 117, 118, 120, 123, 124, 125, 126, 127}, {56, 60, 64, 88, 92, 96, 104, 108, 110, 111, 112, 116, 118, 119, 124, 126, 127, 128}, {57, 61, 89, 93, 105, 109, 113, 114, 115, 117, 122, 123, 125}, {58, 61, 62, 90, 93, 94, 106, 109, 110, 114, 115, 116, 117, 118, 121, 123, 124, 125, 126}, {59, 61, 62, 63, 91, 93, 94, 95, 107, 109, 110, 111, 115, 117, 118, 119, 121, 122, 124, 125, 126, 127}, {60, 62, 64, 92, 94, 96, 108, 110, 112, 116, 118, 119, 120, 122, 123, 126, 127, 128}, {61, 63, 93, 95, 109, 111, 117, 119, 121, 122, 123, 126, 127}, {62, 63, 64, 94, 95, 96, 110, 111, 112, 118, 119, 120, 122, 123, 124, 125, 127, 128}, {63, 64, 95, 96, 111, 112, 119, 120, 123, 124, 125, 126, 128}, {64, 96, 112, 120, 124, 126, 127}];
var bool: BOOL____00002 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00003 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00004 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00005 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00006 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00007 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00008 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00009 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00010 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00011 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00012 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00013 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00014 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00015 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00016 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00017 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00018 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00019 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00020 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00021 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00022 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00023 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00024 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00025 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00026 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00027 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00028 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00029 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00030 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00031 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00032 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00033 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00034 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00035 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00036 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00037 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00038 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00039 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00040 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00041 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00042 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00043 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00044 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00045 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00046 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00047 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00048 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00049 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00050 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00051 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00052 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00053 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00054 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00055 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00056 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00057 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00058 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00059 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00060 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00061 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00062 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00063 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00064 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00065 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00066 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00067 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00068 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00069 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00070 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00071 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00072 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00073 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00074 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00075 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00076 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00077 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00078 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00079 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00080 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00081 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00082 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00083 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00084 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00085 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00086 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00087 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00088 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00089 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00090 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00091 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00092 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00093 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00094 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00095 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00096 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00097 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00098 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00099 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00100 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00101 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00102 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00103 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00104 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00105 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00106 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00107 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00108 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00109 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00110 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00111 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00112 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00113 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00114 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00115 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00116 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00117 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00118 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00119 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00120 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00121 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00122 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00123 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00124 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00125 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00126 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00127 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00128 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00129 :: is_defined_var :: var_is_introduced;
var 0..128: INT____00001 :: is_defined_var :: var_is_introduced;
var 0..128: k :: output_var = INT____00001;
array [1..128] of var 0..1: x :: output_array([1..128]);
constraint array_bool_or([BOOL____00008, BOOL____00007, BOOL____00006, BOOL____00005, BOOL____00004, BOOL____00003, BOOL____00002], true);
constraint array_bool_or([BOOL____00128, BOOL____00127, BOOL____00125, BOOL____00121, BOOL____00113, BOOL____00097, BOOL____00096], true);
constraint array_bool_or([BOOL____00015, BOOL____00008, BOOL____00014, BOOL____00007, BOOL____00013, BOOL____00006, BOOL____00012, BOOL____00005, BOOL____00011, BOOL____00004, BOOL____00010, BOOL____00003, BOOL____00009], true);
constraint array_bool_or([BOOL____00025, BOOL____00015, BOOL____00024, BOOL____00014, BOOL____00023, BOOL____00013, BOOL____00022, BOOL____00012, BOOL____00021, BOOL____00016, BOOL____00011, BOOL____00003, BOOL____00002], true);
constraint array_bool_or([BOOL____00041, BOOL____00025, BOOL____00040, BOOL____00024, BOOL____00039, BOOL____00023, BOOL____00038, BOOL____00034, BOOL____00030, BOOL____00022, BOOL____00016, BOOL____00011, BOOL____00010], true);
constraint array_bool_or([BOOL____00065, BOOL____00041, BOOL____00064, BOOL____00040, BOOL____00063, BOOL____00060, BOOL____00057, BOOL____00051, BOOL____00039, BOOL____00034, BOOL____00030, BOOL____00022, BOOL____00021], true);
constraint array_bool_or([BOOL____00097, BOOL____00065, BOOL____00096, BOOL____00094, BOOL____00092, BOOL____00088, BOOL____00080, BOOL____00064, BOOL____00060, BOOL____00057, BOOL____00051, BOOL____00039, BOOL____00038], true);
constraint array_bool_or([BOOL____00098, BOOL____00067, BOOL____00044, BOOL____00029, BOOL____00020, BOOL____00015, BOOL____00007, BOOL____00006, BOOL____00005, BOOL____00004, BOOL____00003, BOOL____00002, BOOL____00009], true);
constraint array_bool_or([BOOL____00114, BOOL____00106, BOOL____00102, BOOL____00100, BOOL____00099, BOOL____00067, BOOL____00044, BOOL____00029, BOOL____00020, BOOL____00015, BOOL____00008, BOOL____00066, BOOL____00007], true);
constraint array_bool_or([BOOL____00122, BOOL____00118, BOOL____00116, BOOL____00115, BOOL____00106, BOOL____00102, BOOL____00100, BOOL____00099, BOOL____00098, BOOL____00083, BOOL____00067, BOOL____00082, BOOL____00066], true);
constraint array_bool_or([BOOL____00126, BOOL____00124, BOOL____00123, BOOL____00118, BOOL____00116, BOOL____00115, BOOL____00114, BOOL____00110, BOOL____00106, BOOL____00091, BOOL____00083, BOOL____00090, BOOL____00082], true);
constraint array_bool_or([BOOL____00128, BOOL____00127, BOOL____00124, BOOL____00123, BOOL____00122, BOOL____00120, BOOL____00118, BOOL____00112, BOOL____00110, BOOL____00095, BOOL____00091, BOOL____00094, BOOL____00090], true);
constraint array_bool_or([BOOL____00129, BOOL____00127, BOOL____00126, BOOL____00125, BOOL____00124, BOOL____00121, BOOL____00120, BOOL____00113, BOOL____00112, BOOL____00097, BOOL____00095, BOOL____00096, BOOL____00094], true);
constraint array_bool_or([BOOL____00129, BOOL____00128, BOOL____00127, BOOL____00125, BOOL____00121, BOOL____00113, BOOL____00097, BOOL____00094, BOOL____00092, BOOL____00088, BOOL____00080, BOOL____00064, BOOL____00063], true);
constraint array_bool_or([BOOL____00020, BOOL____00015, BOOL____00008, BOOL____00019, BOOL____00014, BOOL____00007, BOOL____00018, BOOL____00013, BOOL____00006, BOOL____00017, BOOL____00012, BOOL____00005, BOOL____00016, BOOL____00011, BOOL____00004, BOOL____00010, BOOL____00002, BOOL____00009], true);
constraint array_bool_or([BOOL____00029, BOOL____00020, BOOL____00008, BOOL____00028, BOOL____00019, BOOL____00007, BOOL____00027, BOOL____00018, BOOL____00006, BOOL____00026, BOOL____00017, BOOL____00012, BOOL____00005, BOOL____00016, BOOL____00011, BOOL____00003, BOOL____00002, BOOL____00009], true);
constraint array_bool_or([BOOL____00044, BOOL____00029, BOOL____00008, BOOL____00043, BOOL____00028, BOOL____00007, BOOL____00042, BOOL____00027, BOOL____00018, BOOL____00013, BOOL____00006, BOOL____00026, BOOL____00017, BOOL____00012, BOOL____00004, BOOL____00003, BOOL____00002, BOOL____00009], true);
constraint array_bool_or([BOOL____00067, BOOL____00044, BOOL____00008, BOOL____00066, BOOL____00043, BOOL____00028, BOOL____00019, BOOL____00014, BOOL____00007, BOOL____00042, BOOL____00027, BOOL____00018, BOOL____00013, BOOL____00005, BOOL____00004, BOOL____00003, BOOL____00002, BOOL____00009], true);
constraint array_bool_or([BOOL____00098, BOOL____00067, BOOL____00044, BOOL____00029, BOOL____00020, BOOL____00015, BOOL____00008, BOOL____00066, BOOL____00043, BOOL____00028, BOOL____00019, BOOL____00014, BOOL____00006, BOOL____00005, BOOL____00004, BOOL____00003, BOOL____00002, BOOL____00009], true);
constraint array_bool_or([BOOL____00129, BOOL____00128, BOOL____00126, BOOL____00125, BOOL____00124, BOOL____00123, BOOL____00121, BOOL____00120, BOOL____00119, BOOL____00113, BOOL____00112, BOOL____00111, BOOL____00097, BOOL____00095, BOOL____00093, BOOL____00096, BOOL____00094, BOOL____00092], true);
constraint array_bool_or([BOOL____00129, BOOL____00128, BOOL____00127, BOOL____00124, BOOL____00123, BOOL____00121, BOOL____00120, BOOL____00119, BOOL____00117, BOOL____00113, BOOL____00111, BOOL____00109, BOOL____00097, BOOL____00093, BOOL____00089, BOOL____00096, BOOL____00092, BOOL____00088], true);
constraint array_bool_or([BOOL____00129, BOOL____00128, BOOL____00127, BOOL____00125, BOOL____00120, BOOL____00119, BOOL____00117, BOOL____00113, BOOL____00112, BOOL____00111, BOOL____00109, BOOL____00105, BOOL____00097, BOOL____00089, BOOL____00081, BOOL____00096, BOOL____00088, BOOL____00080], true);
constraint array_bool_or([BOOL____00129, BOOL____00128, BOOL____00127, BOOL____00125, BOOL____00121, BOOL____00112, BOOL____00111, BOOL____00109, BOOL____00105, BOOL____00097, BOOL____00095, BOOL____00093, BOOL____00089, BOOL____00081, BOOL____00065, BOOL____00096, BOOL____00080, BOOL____00064], true);
constraint array_bool_or([BOOL____00129, BOOL____00128, BOOL____00127, BOOL____00125, BOOL____00121, BOOL____00113, BOOL____00095, BOOL____00093, BOOL____00089, BOOL____00081, BOOL____00065, BOOL____00096, BOOL____00094, BOOL____00092, BOOL____00088, BOOL____00080, BOOL____00064, BOOL____00063], true);
constraint array_bool_or([BOOL____00037, BOOL____00025, BOOL____00020, BOOL____00036, BOOL____00024, BOOL____00019, BOOL____00035, BOOL____00023, BOOL____00018, BOOL____00034, BOOL____00030, BOOL____00026, BOOL____00022, BOOL____00017, BOOL____00021, BOOL____00011, BOOL____00004, BOOL____00010, BOOL____00003], true);
constraint array_bool_or([BOOL____00056, BOOL____00037, BOOL____00029, BOOL____00055, BOOL____00036, BOOL____00028, BOOL____00054, BOOL____00048, BOOL____00045, BOOL____00042, BOOL____00035, BOOL____00027, BOOL____00034, BOOL____00030, BOOL____00017, BOOL____00012, BOOL____00005, BOOL____00016, BOOL____00004], true);
constraint array_bool_or([BOOL____00062, BOOL____00041, BOOL____00037, BOOL____00061, BOOL____00040, BOOL____00036, BOOL____00060, BOOL____00057, BOOL____00054, BOOL____00048, BOOL____00039, BOOL____00035, BOOL____00038, BOOL____00030, BOOL____00026, BOOL____00022, BOOL____00017, BOOL____00021, BOOL____00016], true);
constraint array_bool_or([BOOL____00083, BOOL____00056, BOOL____00044, BOOL____00082, BOOL____00074, BOOL____00070, BOOL____00068, BOOL____00066, BOOL____00055, BOOL____00043, BOOL____00054, BOOL____00048, BOOL____00045, BOOL____00027, BOOL____00018, BOOL____00013, BOOL____00006, BOOL____00026, BOOL____00005], true);
constraint array_bool_or([BOOL____00091, BOOL____00062, BOOL____00056, BOOL____00090, BOOL____00086, BOOL____00084, BOOL____00082, BOOL____00074, BOOL____00061, BOOL____00055, BOOL____00060, BOOL____00057, BOOL____00048, BOOL____00045, BOOL____00042, BOOL____00035, BOOL____00027, BOOL____00034, BOOL____00026], true);
constraint array_bool_or([BOOL____00095, BOOL____00065, BOOL____00062, BOOL____00094, BOOL____00092, BOOL____00090, BOOL____00086, BOOL____00078, BOOL____00064, BOOL____00061, BOOL____00063, BOOL____00057, BOOL____00054, BOOL____00051, BOOL____00048, BOOL____00039, BOOL____00035, BOOL____00038, BOOL____00034], true);
constraint array_bool_or([BOOL____00099, BOOL____00098, BOOL____00069, BOOL____00067, BOOL____00047, BOOL____00044, BOOL____00033, BOOL____00029, BOOL____00025, BOOL____00020, BOOL____00008, BOOL____00014, BOOL____00007, BOOL____00013, BOOL____00012, BOOL____00011, BOOL____00010, BOOL____00003, BOOL____00002], true);
constraint array_bool_or([BOOL____00101, BOOL____00099, BOOL____00073, BOOL____00069, BOOL____00053, BOOL____00047, BOOL____00041, BOOL____00037, BOOL____00033, BOOL____00020, BOOL____00015, BOOL____00024, BOOL____00014, BOOL____00023, BOOL____00022, BOOL____00021, BOOL____00016, BOOL____00011, BOOL____00010], true);
constraint array_bool_or([BOOL____00105, BOOL____00101, BOOL____00081, BOOL____00073, BOOL____00065, BOOL____00062, BOOL____00059, BOOL____00053, BOOL____00037, BOOL____00033, BOOL____00025, BOOL____00040, BOOL____00024, BOOL____00039, BOOL____00038, BOOL____00034, BOOL____00030, BOOL____00022, BOOL____00021], true);
constraint array_bool_or([BOOL____00113, BOOL____00105, BOOL____00097, BOOL____00095, BOOL____00093, BOOL____00089, BOOL____00081, BOOL____00062, BOOL____00059, BOOL____00053, BOOL____00041, BOOL____00064, BOOL____00040, BOOL____00063, BOOL____00060, BOOL____00057, BOOL____00051, BOOL____00039, BOOL____00038], true);
constraint array_bool_or([BOOL____00114, BOOL____00106, BOOL____00102, BOOL____00100, BOOL____00099, BOOL____00098, BOOL____00083, BOOL____00067, BOOL____00082, BOOL____00074, BOOL____00070, BOOL____00068, BOOL____00043, BOOL____00028, BOOL____00019, BOOL____00014, BOOL____00007, BOOL____00042, BOOL____00006], true);
constraint array_bool_or([BOOL____00115, BOOL____00114, BOOL____00107, BOOL____00106, BOOL____00103, BOOL____00102, BOOL____00101, BOOL____00100, BOOL____00098, BOOL____00069, BOOL____00067, BOOL____00047, BOOL____00033, BOOL____00025, BOOL____00020, BOOL____00015, BOOL____00068, BOOL____00066, BOOL____00014], true);
constraint array_bool_or([BOOL____00117, BOOL____00115, BOOL____00109, BOOL____00107, BOOL____00105, BOOL____00104, BOOL____00103, BOOL____00100, BOOL____00099, BOOL____00073, BOOL____00069, BOOL____00053, BOOL____00041, BOOL____00037, BOOL____00033, BOOL____00025, BOOL____00072, BOOL____00068, BOOL____00024], true);
constraint array_bool_or([BOOL____00121, BOOL____00117, BOOL____00113, BOOL____00112, BOOL____00111, BOOL____00109, BOOL____00104, BOOL____00103, BOOL____00101, BOOL____00081, BOOL____00073, BOOL____00065, BOOL____00062, BOOL____00059, BOOL____00053, BOOL____00041, BOOL____00080, BOOL____00072, BOOL____00040], true);
constraint array_bool_or([BOOL____00122, BOOL____00118, BOOL____00116, BOOL____00115, BOOL____00114, BOOL____00106, BOOL____00091, BOOL____00083, BOOL____00090, BOOL____00086, BOOL____00084, BOOL____00074, BOOL____00070, BOOL____00068, BOOL____00066, BOOL____00055, BOOL____00043, BOOL____00054, BOOL____00042], true);
constraint array_bool_or([BOOL____00123, BOOL____00122, BOOL____00119, BOOL____00118, BOOL____00117, BOOL____00116, BOOL____00114, BOOL____00107, BOOL____00106, BOOL____00103, BOOL____00101, BOOL____00100, BOOL____00099, BOOL____00085, BOOL____00083, BOOL____00069, BOOL____00084, BOOL____00082, BOOL____00068], true);
constraint array_bool_or([BOOL____00125, BOOL____00123, BOOL____00121, BOOL____00120, BOOL____00119, BOOL____00116, BOOL____00115, BOOL____00109, BOOL____00107, BOOL____00105, BOOL____00104, BOOL____00103, BOOL____00101, BOOL____00089, BOOL____00085, BOOL____00073, BOOL____00088, BOOL____00084, BOOL____00072], true);
constraint array_bool_or([BOOL____00126, BOOL____00124, BOOL____00123, BOOL____00122, BOOL____00118, BOOL____00110, BOOL____00095, BOOL____00091, BOOL____00094, BOOL____00092, BOOL____00086, BOOL____00084, BOOL____00082, BOOL____00078, BOOL____00074, BOOL____00061, BOOL____00055, BOOL____00060, BOOL____00054], true);
constraint array_bool_or([BOOL____00127, BOOL____00126, BOOL____00125, BOOL____00124, BOOL____00122, BOOL____00119, BOOL____00118, BOOL____00117, BOOL____00116, BOOL____00115, BOOL____00111, BOOL____00110, BOOL____00107, BOOL____00093, BOOL____00091, BOOL____00085, BOOL____00092, BOOL____00090, BOOL____00084], true);
constraint array_bool_or([BOOL____00128, BOOL____00127, BOOL____00126, BOOL____00124, BOOL____00120, BOOL____00112, BOOL____00097, BOOL____00095, BOOL____00096, BOOL____00092, BOOL____00090, BOOL____00088, BOOL____00086, BOOL____00080, BOOL____00078, BOOL____00064, BOOL____00061, BOOL____00063, BOOL____00060], true);
constraint array_bool_or([BOOL____00033, BOOL____00025, BOOL____00020, BOOL____00015, BOOL____00032, BOOL____00024, BOOL____00019, BOOL____00014, BOOL____00031, BOOL____00023, BOOL____00018, BOOL____00013, BOOL____00030, BOOL____00022, BOOL____00017, BOOL____00012, BOOL____00021, BOOL____00016, BOOL____00004, BOOL____00010, BOOL____00003, BOOL____00002], true);
constraint array_bool_or([BOOL____00053, BOOL____00041, BOOL____00033, BOOL____00025, BOOL____00052, BOOL____00040, BOOL____00032, BOOL____00024, BOOL____00051, BOOL____00039, BOOL____00035, BOOL____00031, BOOL____00023, BOOL____00038, BOOL____00034, BOOL____00030, BOOL____00017, BOOL____00012, BOOL____00021, BOOL____00016, BOOL____00011, BOOL____00010], true);
constraint array_bool_or([BOOL____00081, BOOL____00065, BOOL____00053, BOOL____00041, BOOL____00080, BOOL____00064, BOOL____00061, BOOL____00058, BOOL____00052, BOOL____00040, BOOL____00063, BOOL____00060, BOOL____00057, BOOL____00051, BOOL____00035, BOOL____00031, BOOL____00023, BOOL____00038, BOOL____00034, BOOL____00030, BOOL____00022, BOOL____00021], true);
constraint array_bool_or([BOOL____00113, BOOL____00097, BOOL____00095, BOOL____00093, BOOL____00089, BOOL____00081, BOOL____00065, BOOL____00096, BOOL____00094, BOOL____00092, BOOL____00088, BOOL____00080, BOOL____00061, BOOL____00058, BOOL____00052, BOOL____00040, BOOL____00063, BOOL____00060, BOOL____00057, BOOL____00051, BOOL____00039, BOOL____00038], true);
constraint array_bool_or([BOOL____00114, BOOL____00106, BOOL____00102, BOOL____00100, BOOL____00099, BOOL____00098, BOOL____00083, BOOL____00075, BOOL____00071, BOOL____00069, BOOL____00044, BOOL____00029, BOOL____00020, BOOL____00015, BOOL____00008, BOOL____00066, BOOL____00043, BOOL____00028, BOOL____00019, BOOL____00014, BOOL____00007, BOOL____00006], true);
constraint array_bool_or([BOOL____00122, BOOL____00118, BOOL____00116, BOOL____00115, BOOL____00114, BOOL____00110, BOOL____00108, BOOL____00107, BOOL____00102, BOOL____00100, BOOL____00099, BOOL____00098, BOOL____00083, BOOL____00075, BOOL____00071, BOOL____00069, BOOL____00067, BOOL____00044, BOOL____00082, BOOL____00074, BOOL____00066, BOOL____00043], true);
constraint array_bool_or([BOOL____00126, BOOL____00124, BOOL____00123, BOOL____00122, BOOL____00120, BOOL____00119, BOOL____00116, BOOL____00115, BOOL____00114, BOOL____00110, BOOL____00108, BOOL____00107, BOOL____00106, BOOL____00102, BOOL____00091, BOOL____00087, BOOL____00083, BOOL____00075, BOOL____00090, BOOL____00086, BOOL____00082, BOOL____00074], true);
constraint array_bool_or([BOOL____00128, BOOL____00127, BOOL____00126, BOOL____00125, BOOL____00123, BOOL____00122, BOOL____00120, BOOL____00119, BOOL____00118, BOOL____00116, BOOL____00112, BOOL____00111, BOOL____00110, BOOL____00108, BOOL____00095, BOOL____00093, BOOL____00091, BOOL____00087, BOOL____00094, BOOL____00092, BOOL____00090, BOOL____00086], true);
constraint array_bool_or([BOOL____00047, BOOL____00033, BOOL____00029, BOOL____00015, BOOL____00046, BOOL____00032, BOOL____00028, BOOL____00014, BOOL____00045, BOOL____00031, BOOL____00027, BOOL____00023, BOOL____00018, BOOL____00013, BOOL____00030, BOOL____00026, BOOL____00022, BOOL____00017, BOOL____00005, BOOL____00011, BOOL____00004, BOOL____00010, BOOL____00003, BOOL____00002], true);
constraint array_bool_or([BOOL____00059, BOOL____00041, BOOL____00037, BOOL____00033, BOOL____00058, BOOL____00040, BOOL____00036, BOOL____00032, BOOL____00057, BOOL____00051, BOOL____00048, BOOL____00045, BOOL____00039, BOOL____00035, BOOL____00031, BOOL____00038, BOOL____00034, BOOL____00026, BOOL____00022, BOOL____00017, BOOL____00012, BOOL____00021, BOOL____00016, BOOL____00011], true);
constraint array_bool_or([BOOL____00069, BOOL____00047, BOOL____00044, BOOL____00015, BOOL____00068, BOOL____00046, BOOL____00043, BOOL____00032, BOOL____00024, BOOL____00019, BOOL____00014, BOOL____00045, BOOL____00042, BOOL____00031, BOOL____00027, BOOL____00023, BOOL____00018, BOOL____00006, BOOL____00012, BOOL____00005, BOOL____00011, BOOL____00010, BOOL____00003, BOOL____00002], true);
constraint array_bool_or([BOOL____00073, BOOL____00053, BOOL____00047, BOOL____00025, BOOL____00072, BOOL____00052, BOOL____00046, BOOL____00040, BOOL____00036, BOOL____00032, BOOL____00024, BOOL____00051, BOOL____00045, BOOL____00039, BOOL____00035, BOOL____00031, BOOL____00018, BOOL____00013, BOOL____00022, BOOL____00012, BOOL____00021, BOOL____00016, BOOL____00011, BOOL____00010], true);
constraint array_bool_or([BOOL____00089, BOOL____00065, BOOL____00059, BOOL____00053, BOOL____00088, BOOL____00080, BOOL____00078, BOOL____00076, BOOL____00072, BOOL____00064, BOOL____00058, BOOL____00052, BOOL____00063, BOOL____00060, BOOL____00057, BOOL____00048, BOOL____00045, BOOL____00039, BOOL____00035, BOOL____00031, BOOL____00023, BOOL____00038, BOOL____00030, BOOL____00022], true);
constraint array_bool_or([BOOL____00093, BOOL____00065, BOOL____00062, BOOL____00059, BOOL____00092, BOOL____00088, BOOL____00086, BOOL____00084, BOOL____00076, BOOL____00064, BOOL____00061, BOOL____00058, BOOL____00063, BOOL____00060, BOOL____00054, BOOL____00051, BOOL____00048, BOOL____00045, BOOL____00039, BOOL____00035, BOOL____00031, BOOL____00038, BOOL____00034, BOOL____00030], true);
constraint array_bool_or([BOOL____00099, BOOL____00069, BOOL____00067, BOOL____00047, BOOL____00033, BOOL____00025, BOOL____00020, BOOL____00015, BOOL____00068, BOOL____00066, BOOL____00046, BOOL____00043, BOOL____00032, BOOL____00028, BOOL____00024, BOOL____00019, BOOL____00007, BOOL____00013, BOOL____00006, BOOL____00012, BOOL____00011, BOOL____00010, BOOL____00003, BOOL____00002], true);
constraint array_bool_or([BOOL____00100, BOOL____00099, BOOL____00098, BOOL____00071, BOOL____00069, BOOL____00067, BOOL____00050, BOOL____00047, BOOL____00044, BOOL____00037, BOOL____00033, BOOL____00029, BOOL____00025, BOOL____00015, BOOL____00008, BOOL____00019, BOOL____00014, BOOL____00007, BOOL____00018, BOOL____00017, BOOL____00016, BOOL____00011, BOOL____00004, BOOL____00003], true);
constraint array_bool_or([BOOL____00101, BOOL____00073, BOOL____00069, BOOL____00053, BOOL____00041, BOOL____00037, BOOL____00033, BOOL____00025, BOOL____00072, BOOL____00068, BOOL____00052, BOOL____00046, BOOL____00040, BOOL____00036, BOOL____00032, BOOL____00019, BOOL____00014, BOOL____00023, BOOL____00013, BOOL____00022, BOOL____00021, BOOL____00016, BOOL____00011, BOOL____00010], true);
constraint array_bool_or([BOOL____00102, BOOL____00100, BOOL____00098, BOOL____00075, BOOL____00071, BOOL____00067, BOOL____00056, BOOL____00050, BOOL____00047, BOOL____00044, BOOL____00037, BOOL____00033, BOOL____00020, BOOL____00015, BOOL____00008, BOOL____00028, BOOL____00019, BOOL____00007, BOOL____00027, BOOL____00026, BOOL____00017, BOOL____00012, BOOL____00005, BOOL____00004], true);
constraint array_bool_or([BOOL____00105, BOOL____00081, BOOL____00073, BOOL____00065, BOOL____00062, BOOL____00059, BOOL____00053, BOOL____00041, BOOL____00080, BOOL____00072, BOOL____00064, BOOL____00061, BOOL____00058, BOOL____00052, BOOL____00036, BOOL____00032, BOOL____00024, BOOL____00039, BOOL____00023, BOOL____00038, BOOL____00034, BOOL____00030, BOOL____00022, BOOL____00021], true);
constraint array_bool_or([BOOL____00106, BOOL____00102, BOOL____00098, BOOL____00083, BOOL____00075, BOOL____00071, BOOL____00069, BOOL____00067, BOOL____00056, BOOL____00050, BOOL____00047, BOOL____00029, BOOL____00020, BOOL____00015, BOOL____00008, BOOL____00043, BOOL____00028, BOOL____00007, BOOL____00042, BOOL____00027, BOOL____00018, BOOL____00013, BOOL____00006, BOOL____00005], true);
constraint array_bool_or([BOOL____00116, BOOL____00115, BOOL____00114, BOOL____00108, BOOL____00107, BOOL____00106, BOOL____00104, BOOL____00103, BOOL____00102, BOOL____00101, BOOL____00099, BOOL____00098, BOOL____00071, BOOL____00069, BOOL____00067, BOOL____00050, BOOL____00037, BOOL____00033, BOOL____00029, BOOL____00020, BOOL____00070, BOOL____00068, BOOL____00066, BOOL____00019], true);
constraint array_bool_or([BOOL____00118, BOOL____00116, BOOL____00114, BOOL____00110, BOOL____00108, BOOL____00107, BOOL____00106, BOOL____00104, BOOL____00103, BOOL____00100, BOOL____00099, BOOL____00098, BOOL____00075, BOOL____00071, BOOL____00067, BOOL____00056, BOOL____00050, BOOL____00047, BOOL____00044, BOOL____00029, BOOL____00074, BOOL____00070, BOOL____00066, BOOL____00028], true);
constraint array_bool_or([BOOL____00121, BOOL____00113, BOOL____00112, BOOL____00111, BOOL____00109, BOOL____00105, BOOL____00097, BOOL____00089, BOOL____00081, BOOL____00096, BOOL____00094, BOOL____00092, BOOL____00088, BOOL____00078, BOOL____00076, BOOL____00072, BOOL____00064, BOOL____00061, BOOL____00058, BOOL____00052, BOOL____00040, BOOL____00063, BOOL____00051, BOOL____00039], true);
constraint array_bool_or([BOOL____00122, BOOL____00118, BOOL____00116, BOOL____00115, BOOL____00114, BOOL____00110, BOOL____00106, BOOL____00091, BOOL____00087, BOOL____00085, BOOL____00075, BOOL____00071, BOOL____00069, BOOL____00067, BOOL____00056, BOOL____00044, BOOL____00082, BOOL____00074, BOOL____00070, BOOL____00068, BOOL____00066, BOOL____00055, BOOL____00043, BOOL____00042], true);
constraint array_bool_or([BOOL____00124, BOOL____00123, BOOL____00122, BOOL____00120, BOOL____00119, BOOL____00118, BOOL____00117, BOOL____00115, BOOL____00114, BOOL____00108, BOOL____00107, BOOL____00106, BOOL____00104, BOOL____00103, BOOL____00102, BOOL____00100, BOOL____00087, BOOL____00085, BOOL____00083, BOOL____00071, BOOL____00086, BOOL____00084, BOOL____00082, BOOL____00070], true);
constraint array_bool_or([BOOL____00125, BOOL____00121, BOOL____00120, BOOL____00119, BOOL____00117, BOOL____00109, BOOL____00097, BOOL____00093, BOOL____00089, BOOL____00096, BOOL____00094, BOOL____00092, BOOL____00086, BOOL____00084, BOOL____00080, BOOL____00078, BOOL____00076, BOOL____00072, BOOL____00064, BOOL____00058, BOOL____00052, BOOL____00063, BOOL____00057, BOOL____00051], true);
constraint array_bool_or([BOOL____00126, BOOL____00124, BOOL____00123, BOOL____00122, BOOL____00118, BOOL____00112, BOOL____00110, BOOL____00095, BOOL____00093, BOOL____00087, BOOL____00085, BOOL____00083, BOOL____00079, BOOL____00075, BOOL____00062, BOOL____00056, BOOL____00090, BOOL____00086, BOOL____00084, BOOL____00082, BOOL____00074, BOOL____00061, BOOL____00055, BOOL____00054], true);
constraint array_bool_or([BOOL____00126, BOOL____00124, BOOL____00123, BOOL____00122, BOOL____00120, BOOL____00118, BOOL____00112, BOOL____00111, BOOL____00108, BOOL____00107, BOOL____00106, BOOL____00104, BOOL____00102, BOOL____00091, BOOL____00087, BOOL____00085, BOOL____00083, BOOL____00079, BOOL____00075, BOOL____00056, BOOL____00090, BOOL____00078, BOOL____00074, BOOL____00055], true);
constraint array_bool_or([BOOL____00127, BOOL____00125, BOOL____00124, BOOL____00123, BOOL____00119, BOOL____00111, BOOL____00097, BOOL____00095, BOOL____00093, BOOL____00096, BOOL____00094, BOOL____00090, BOOL____00088, BOOL____00086, BOOL____00084, BOOL____00080, BOOL____00078, BOOL____00076, BOOL____00064, BOOL____00061, BOOL____00058, BOOL____00063, BOOL____00060, BOOL____00057], true);
constraint array_bool_or([BOOL____00128, BOOL____00127, BOOL____00126, BOOL____00124, BOOL____00120, BOOL____00113, BOOL____00112, BOOL____00097, BOOL____00093, BOOL____00091, BOOL____00089, BOOL____00087, BOOL____00081, BOOL____00079, BOOL____00065, BOOL____00062, BOOL____00094, BOOL____00092, BOOL____00090, BOOL____00086, BOOL____00078, BOOL____00064, BOOL____00061, BOOL____00060], true);
constraint array_bool_or([BOOL____00128, BOOL____00127, BOOL____00126, BOOL____00124, BOOL____00121, BOOL____00120, BOOL____00113, BOOL____00111, BOOL____00110, BOOL____00109, BOOL____00108, BOOL____00105, BOOL____00104, BOOL____00095, BOOL____00093, BOOL____00091, BOOL____00087, BOOL____00081, BOOL____00079, BOOL____00062, BOOL____00094, BOOL____00080, BOOL____00078, BOOL____00061], true);
constraint array_bool_or([BOOL____00128, BOOL____00127, BOOL____00126, BOOL____00125, BOOL____00124, BOOL____00121, BOOL____00119, BOOL____00118, BOOL____00117, BOOL____00116, BOOL____00112, BOOL____00111, BOOL____00110, BOOL____00109, BOOL____00108, BOOL____00104, BOOL____00095, BOOL____00089, BOOL____00087, BOOL____00079, BOOL____00094, BOOL____00088, BOOL____00086, BOOL____00078], true);
constraint array_bool_or([BOOL____00050, BOOL____00037, BOOL____00033, BOOL____00029, BOOL____00020, BOOL____00049, BOOL____00036, BOOL____00032, BOOL____00028, BOOL____00019, BOOL____00048, BOOL____00035, BOOL____00031, BOOL____00027, BOOL____00018, BOOL____00034, BOOL____00030, BOOL____00026, BOOL____00022, BOOL____00012, BOOL____00005, BOOL____00016, BOOL____00011, BOOL____00004, BOOL____00003], true);
constraint array_bool_or([BOOL____00075, BOOL____00056, BOOL____00050, BOOL____00044, BOOL____00029, BOOL____00074, BOOL____00055, BOOL____00049, BOOL____00046, BOOL____00043, BOOL____00028, BOOL____00054, BOOL____00048, BOOL____00045, BOOL____00042, BOOL____00035, BOOL____00031, BOOL____00018, BOOL____00013, BOOL____00006, BOOL____00026, BOOL____00017, BOOL____00012, BOOL____00005, BOOL____00004], true);
constraint array_bool_or([BOOL____00085, BOOL____00059, BOOL____00056, BOOL____00047, BOOL____00084, BOOL____00076, BOOL____00072, BOOL____00070, BOOL____00068, BOOL____00058, BOOL____00055, BOOL____00046, BOOL____00057, BOOL____00054, BOOL____00051, BOOL____00048, BOOL____00042, BOOL____00031, BOOL____00027, BOOL____00023, BOOL____00018, BOOL____00013, BOOL____00030, BOOL____00026, BOOL____00012], true);
constraint array_bool_or([BOOL____00104, BOOL____00101, BOOL____00100, BOOL____00079, BOOL____00073, BOOL____00071, BOOL____00062, BOOL____00059, BOOL____00056, BOOL____00053, BOOL____00050, BOOL____00041, BOOL____00033, BOOL____00029, BOOL____00025, BOOL____00020, BOOL____00036, BOOL____00024, BOOL____00019, BOOL____00035, BOOL____00034, BOOL____00030, BOOL____00026, BOOL____00017, BOOL____00016], true);
constraint array_bool_or([BOOL____00106, BOOL____00083, BOOL____00075, BOOL____00071, BOOL____00069, BOOL____00067, BOOL____00044, BOOL____00082, BOOL____00074, BOOL____00070, BOOL____00068, BOOL____00066, BOOL____00055, BOOL____00049, BOOL____00046, BOOL____00028, BOOL____00019, BOOL____00014, BOOL____00007, BOOL____00042, BOOL____00027, BOOL____00018, BOOL____00013, BOOL____00006, BOOL____00005], true);
constraint array_bool_or([BOOL____00110, BOOL____00104, BOOL____00102, BOOL____00091, BOOL____00087, BOOL____00085, BOOL____00083, BOOL____00079, BOOL____00075, BOOL____00062, BOOL____00059, BOOL____00050, BOOL____00047, BOOL____00044, BOOL____00037, BOOL____00029, BOOL____00055, BOOL____00036, BOOL____00028, BOOL____00054, BOOL____00048, BOOL____00045, BOOL____00042, BOOL____00027, BOOL____00026], true);
constraint array_bool_or([BOOL____00112, BOOL____00105, BOOL____00104, BOOL____00095, BOOL____00093, BOOL____00091, BOOL____00087, BOOL____00081, BOOL____00079, BOOL____00065, BOOL____00059, BOOL____00056, BOOL____00053, BOOL____00050, BOOL____00041, BOOL____00037, BOOL____00061, BOOL____00040, BOOL____00036, BOOL____00060, BOOL____00057, BOOL____00054, BOOL____00048, BOOL____00035, BOOL____00034], true);
constraint array_bool_or([BOOL____00115, BOOL____00107, BOOL____00103, BOOL____00101, BOOL____00100, BOOL____00099, BOOL____00085, BOOL____00083, BOOL____00069, BOOL____00084, BOOL____00082, BOOL____00076, BOOL____00074, BOOL____00072, BOOL____00070, BOOL____00066, BOOL____00046, BOOL____00043, BOOL____00032, BOOL____00024, BOOL____00019, BOOL____00014, BOOL____00045, BOOL____00042, BOOL____00013], true);
constraint array_bool_or([BOOL____00117, BOOL____00109, BOOL____00105, BOOL____00104, BOOL____00103, BOOL____00101, BOOL____00089, BOOL____00085, BOOL____00073, BOOL____00088, BOOL____00084, BOOL____00080, BOOL____00078, BOOL____00076, BOOL____00070, BOOL____00068, BOOL____00052, BOOL____00046, BOOL____00040, BOOL____00036, BOOL____00032, BOOL____00024, BOOL____00051, BOOL____00045, BOOL____00023], true);
constraint array_bool_or([BOOL____00120, BOOL____00117, BOOL____00116, BOOL____00112, BOOL____00111, BOOL____00110, BOOL____00109, BOOL____00108, BOOL____00105, BOOL____00103, BOOL____00102, BOOL____00101, BOOL____00100, BOOL____00079, BOOL____00073, BOOL____00071, BOOL____00062, BOOL____00059, BOOL____00056, BOOL____00050, BOOL____00037, BOOL____00078, BOOL____00072, BOOL____00070, BOOL____00036], true);
constraint array_bool_or([BOOL____00121, BOOL____00113, BOOL____00112, BOOL____00111, BOOL____00109, BOOL____00105, BOOL____00097, BOOL____00095, BOOL____00093, BOOL____00089, BOOL____00079, BOOL____00077, BOOL____00073, BOOL____00065, BOOL____00062, BOOL____00059, BOOL____00053, BOOL____00041, BOOL____00080, BOOL____00064, BOOL____00061, BOOL____00058, BOOL____00052, BOOL____00040, BOOL____00039], true);
constraint array_bool_or([BOOL____00123, BOOL____00119, BOOL____00117, BOOL____00116, BOOL____00115, BOOL____00107, BOOL____00093, BOOL____00091, BOOL____00085, BOOL____00092, BOOL____00090, BOOL____00088, BOOL____00086, BOOL____00082, BOOL____00076, BOOL____00074, BOOL____00072, BOOL____00070, BOOL____00068, BOOL____00058, BOOL____00055, BOOL____00046, BOOL____00057, BOOL____00054, BOOL____00045], true);
constraint array_bool_or([BOOL____00125, BOOL____00121, BOOL____00120, BOOL____00119, BOOL____00117, BOOL____00113, BOOL____00112, BOOL____00111, BOOL____00108, BOOL____00107, BOOL____00105, BOOL____00104, BOOL____00103, BOOL____00101, BOOL____00089, BOOL____00081, BOOL____00079, BOOL____00077, BOOL____00073, BOOL____00053, BOOL____00088, BOOL____00080, BOOL____00076, BOOL____00072, BOOL____00052], true);
constraint array_bool_or([BOOL____00127, BOOL____00125, BOOL____00124, BOOL____00123, BOOL____00121, BOOL____00120, BOOL____00118, BOOL____00117, BOOL____00116, BOOL____00115, BOOL____00111, BOOL____00109, BOOL____00108, BOOL____00107, BOOL____00103, BOOL____00093, BOOL____00089, BOOL____00087, BOOL____00085, BOOL____00077, BOOL____00092, BOOL____00088, BOOL____00086, BOOL____00084, BOOL____00076], true);
constraint array_bool_or([BOOL____00077, BOOL____00059, BOOL____00053, BOOL____00050, BOOL____00047, BOOL____00033, BOOL____00076, BOOL____00058, BOOL____00052, BOOL____00049, BOOL____00046, BOOL____00032, BOOL____00057, BOOL____00051, BOOL____00048, BOOL____00045, BOOL____00039, BOOL____00035, BOOL____00027, BOOL____00023, BOOL____00018, BOOL____00013, BOOL____00030, BOOL____00022, BOOL____00017, BOOL____00012, BOOL____00011], true);
constraint array_bool_or([BOOL____00109, BOOL____00089, BOOL____00081, BOOL____00079, BOOL____00077, BOOL____00073, BOOL____00053, BOOL____00088, BOOL____00080, BOOL____00078, BOOL____00076, BOOL____00072, BOOL____00064, BOOL____00061, BOOL____00058, BOOL____00049, BOOL____00046, BOOL____00040, BOOL____00036, BOOL____00032, BOOL____00024, BOOL____00051, BOOL____00039, BOOL____00035, BOOL____00031, BOOL____00023, BOOL____00022], true);
constraint array_bool_or([BOOL____00118, BOOL____00110, BOOL____00108, BOOL____00107, BOOL____00106, BOOL____00102, BOOL____00091, BOOL____00087, BOOL____00085, BOOL____00083, BOOL____00079, BOOL____00077, BOOL____00071, BOOL____00069, BOOL____00067, BOOL____00056, BOOL____00050, BOOL____00047, BOOL____00044, BOOL____00029, BOOL____00074, BOOL____00055, BOOL____00049, BOOL____00046, BOOL____00043, BOOL____00028, BOOL____00027], true);
constraint array_bool_or([BOOL____00124, BOOL____00120, BOOL____00119, BOOL____00118, BOOL____00116, BOOL____00112, BOOL____00111, BOOL____00110, BOOL____00109, BOOL____00107, BOOL____00106, BOOL____00104, BOOL____00103, BOOL____00102, BOOL____00100, BOOL____00087, BOOL____00079, BOOL____00077, BOOL____00075, BOOL____00071, BOOL____00050, BOOL____00086, BOOL____00078, BOOL____00076, BOOL____00074, BOOL____00070, BOOL____00049], true);
constraint array_bool_or([BOOL____00079, BOOL____00062, BOOL____00053, BOOL____00050, BOOL____00037, BOOL____00078, BOOL____00061, BOOL____00058, BOOL____00055, BOOL____00052, BOOL____00049, BOOL____00036, BOOL____00060, BOOL____00057, BOOL____00054, BOOL____00051, BOOL____00048, BOOL____00039, BOOL____00031, BOOL____00027, BOOL____00023, BOOL____00018, BOOL____00034, BOOL____00030, BOOL____00026, BOOL____00022, BOOL____00017, BOOL____00016], true);
constraint array_bool_or([BOOL____00087, BOOL____00062, BOOL____00059, BOOL____00056, BOOL____00050, BOOL____00086, BOOL____00078, BOOL____00076, BOOL____00074, BOOL____00070, BOOL____00061, BOOL____00058, BOOL____00055, BOOL____00049, BOOL____00060, BOOL____00057, BOOL____00054, BOOL____00051, BOOL____00045, BOOL____00042, BOOL____00035, BOOL____00031, BOOL____00027, BOOL____00018, BOOL____00034, BOOL____00030, BOOL____00026, BOOL____00017], true);
constraint array_bool_or([BOOL____00103, BOOL____00101, BOOL____00100, BOOL____00099, BOOL____00077, BOOL____00073, BOOL____00071, BOOL____00069, BOOL____00059, BOOL____00053, BOOL____00050, BOOL____00047, BOOL____00041, BOOL____00037, BOOL____00029, BOOL____00025, BOOL____00020, BOOL____00015, BOOL____00032, BOOL____00024, BOOL____00019, BOOL____00014, BOOL____00031, BOOL____00030, BOOL____00022, BOOL____00017, BOOL____00012, BOOL____00011], true);
constraint array_bool_or([BOOL____00108, BOOL____00087, BOOL____00079, BOOL____00077, BOOL____00075, BOOL____00071, BOOL____00050, BOOL____00086, BOOL____00078, BOOL____00076, BOOL____00074, BOOL____00070, BOOL____00061, BOOL____00058, BOOL____00055, BOOL____00052, BOOL____00046, BOOL____00043, BOOL____00036, BOOL____00032, BOOL____00028, BOOL____00019, BOOL____00048, BOOL____00035, BOOL____00031, BOOL____00027, BOOL____00018, BOOL____00017], true);
constraint array_bool_or([BOOL____00109, BOOL____00105, BOOL____00103, BOOL____00101, BOOL____00089, BOOL____00081, BOOL____00079, BOOL____00077, BOOL____00073, BOOL____00065, BOOL____00062, BOOL____00059, BOOL____00050, BOOL____00047, BOOL____00041, BOOL____00037, BOOL____00033, BOOL____00025, BOOL____00052, BOOL____00040, BOOL____00032, BOOL____00024, BOOL____00051, BOOL____00039, BOOL____00035, BOOL____00031, BOOL____00023, BOOL____00022], true);
constraint array_bool_or([BOOL____00110, BOOL____00091, BOOL____00087, BOOL____00085, BOOL____00083, BOOL____00079, BOOL____00075, BOOL____00056, BOOL____00090, BOOL____00086, BOOL____00084, BOOL____00082, BOOL____00078, BOOL____00074, BOOL____00061, BOOL____00058, BOOL____00049, BOOL____00046, BOOL____00043, BOOL____00036, BOOL____00028, BOOL____00054, BOOL____00048, BOOL____00045, BOOL____00042, BOOL____00035, BOOL____00027, BOOL____00026], true);
constraint array_bool_or([BOOL____00112, BOOL____00095, BOOL____00093, BOOL____00091, BOOL____00087, BOOL____00081, BOOL____00079, BOOL____00062, BOOL____00094, BOOL____00092, BOOL____00090, BOOL____00086, BOOL____00080, BOOL____00078, BOOL____00064, BOOL____00058, BOOL____00055, BOOL____00052, BOOL____00049, BOOL____00040, BOOL____00036, BOOL____00060, BOOL____00057, BOOL____00054, BOOL____00048, BOOL____00039, BOOL____00035, BOOL____00034], true);
constraint array_bool_or([BOOL____00115, BOOL____00107, BOOL____00106, BOOL____00103, BOOL____00101, BOOL____00100, BOOL____00099, BOOL____00085, BOOL____00083, BOOL____00077, BOOL____00075, BOOL____00073, BOOL____00071, BOOL____00067, BOOL____00047, BOOL____00044, BOOL____00033, BOOL____00025, BOOL____00020, BOOL____00015, BOOL____00068, BOOL____00046, BOOL____00043, BOOL____00032, BOOL____00024, BOOL____00019, BOOL____00014, BOOL____00013], true);
constraint array_bool_or([BOOL____00117, BOOL____00109, BOOL____00107, BOOL____00105, BOOL____00104, BOOL____00103, BOOL____00101, BOOL____00089, BOOL____00085, BOOL____00081, BOOL____00079, BOOL____00077, BOOL____00071, BOOL____00069, BOOL____00053, BOOL____00047, BOOL____00041, BOOL____00037, BOOL____00033, BOOL____00025, BOOL____00072, BOOL____00052, BOOL____00046, BOOL____00040, BOOL____00036, BOOL____00032, BOOL____00024, BOOL____00023], true);
constraint array_bool_or([BOOL____00118, BOOL____00110, BOOL____00108, BOOL____00107, BOOL____00106, BOOL____00102, BOOL____00091, BOOL____00087, BOOL____00083, BOOL____00075, BOOL____00090, BOOL____00086, BOOL____00084, BOOL____00082, BOOL____00078, BOOL____00076, BOOL____00070, BOOL____00068, BOOL____00066, BOOL____00055, BOOL____00049, BOOL____00046, BOOL____00043, BOOL____00028, BOOL____00054, BOOL____00048, BOOL____00042, BOOL____00027], true);
constraint array_bool_or([BOOL____00119, BOOL____00111, BOOL____00109, BOOL____00108, BOOL____00107, BOOL____00103, BOOL____00093, BOOL____00089, BOOL____00087, BOOL____00085, BOOL____00081, BOOL____00079, BOOL____00075, BOOL____00073, BOOL____00071, BOOL____00069, BOOL____00059, BOOL____00053, BOOL____00050, BOOL____00047, BOOL____00033, BOOL____00076, BOOL____00058, BOOL____00052, BOOL____00049, BOOL____00046, BOOL____00032, BOOL____00031], true);
constraint array_bool_or([BOOL____00119, BOOL____00117, BOOL____00116, BOOL____00115, BOOL____00111, BOOL____00109, BOOL____00108, BOOL____00107, BOOL____00105, BOOL____00104, BOOL____00102, BOOL____00101, BOOL____00100, BOOL____00099, BOOL____00077, BOOL____00073, BOOL____00071, BOOL____00069, BOOL____00059, BOOL____00053, BOOL____00050, BOOL____00047, BOOL____00033, BOOL____00076, BOOL____00072, BOOL____00070, BOOL____00068, BOOL____00032], true);
constraint array_bool_or([BOOL____00123, BOOL____00119, BOOL____00118, BOOL____00117, BOOL____00116, BOOL____00115, BOOL____00111, BOOL____00110, BOOL____00109, BOOL____00108, BOOL____00106, BOOL____00103, BOOL____00102, BOOL____00101, BOOL____00100, BOOL____00099, BOOL____00085, BOOL____00077, BOOL____00075, BOOL____00073, BOOL____00071, BOOL____00069, BOOL____00047, BOOL____00084, BOOL____00076, BOOL____00074, BOOL____00068, BOOL____00046], true);
constraint array_bool_or([BOOL____00124, BOOL____00120, BOOL____00119, BOOL____00118, BOOL____00116, BOOL____00108, BOOL____00095, BOOL____00093, BOOL____00091, BOOL____00087, BOOL____00094, BOOL____00092, BOOL____00090, BOOL____00088, BOOL____00084, BOOL____00082, BOOL____00078, BOOL____00076, BOOL____00074, BOOL____00070, BOOL____00061, BOOL____00058, BOOL____00055, BOOL____00049, BOOL____00060, BOOL____00057, BOOL____00054, BOOL____00048], true);
constraint array_bool_or([BOOL____00071, BOOL____00050, BOOL____00047, BOOL____00044, BOOL____00020, BOOL____00070, BOOL____00049, BOOL____00046, BOOL____00043, BOOL____00036, BOOL____00032, BOOL____00028, BOOL____00019, BOOL____00048, BOOL____00045, BOOL____00042, BOOL____00035, BOOL____00031, BOOL____00027, BOOL____00023, BOOL____00013, BOOL____00006, BOOL____00017, BOOL____00012, BOOL____00005, BOOL____00016, BOOL____00011, BOOL____00004, BOOL____00003], true);
constraint array_bool_or([BOOL____00100, BOOL____00071, BOOL____00069, BOOL____00067, BOOL____00050, BOOL____00037, BOOL____00033, BOOL____00029, BOOL____00020, BOOL____00070, BOOL____00068, BOOL____00066, BOOL____00049, BOOL____00046, BOOL____00043, BOOL____00036, BOOL____00032, BOOL____00028, BOOL____00024, BOOL____00014, BOOL____00007, BOOL____00018, BOOL____00013, BOOL____00006, BOOL____00017, BOOL____00016, BOOL____00011, BOOL____00004, BOOL____00003], true);
constraint array_bool_or([BOOL____00102, BOOL____00075, BOOL____00071, BOOL____00067, BOOL____00056, BOOL____00050, BOOL____00047, BOOL____00044, BOOL____00029, BOOL____00074, BOOL____00070, BOOL____00066, BOOL____00055, BOOL____00049, BOOL____00046, BOOL____00043, BOOL____00036, BOOL____00032, BOOL____00019, BOOL____00014, BOOL____00007, BOOL____00027, BOOL____00018, BOOL____00006, BOOL____00026, BOOL____00017, BOOL____00012, BOOL____00005, BOOL____00004], true);
constraint array_bool_or([BOOL____00125, BOOL____00121, BOOL____00120, BOOL____00119, BOOL____00117, BOOL____00113, BOOL____00111, BOOL____00109, BOOL____00097, BOOL____00095, BOOL____00093, BOOL____00087, BOOL____00085, BOOL____00081, BOOL____00079, BOOL____00077, BOOL____00073, BOOL____00065, BOOL____00059, BOOL____00053, BOOL____00088, BOOL____00080, BOOL____00078, BOOL____00076, BOOL____00072, BOOL____00064, BOOL____00058, BOOL____00052, BOOL____00051], true);
constraint array_bool_or([BOOL____00127, BOOL____00125, BOOL____00124, BOOL____00123, BOOL____00119, BOOL____00113, BOOL____00112, BOOL____00111, BOOL____00097, BOOL____00095, BOOL____00091, BOOL____00089, BOOL____00087, BOOL____00085, BOOL____00081, BOOL____00079, BOOL____00077, BOOL____00065, BOOL____00062, BOOL____00059, BOOL____00092, BOOL____00088, BOOL____00086, BOOL____00084, BOOL____00076, BOOL____00064, BOOL____00061, BOOL____00058, BOOL____00057], true);
constraint array_bool_or([BOOL____00127, BOOL____00125, BOOL____00124, BOOL____00123, BOOL____00121, BOOL____00120, BOOL____00119, BOOL____00113, BOOL____00112, BOOL____00110, BOOL____00109, BOOL____00108, BOOL____00107, BOOL____00105, BOOL____00104, BOOL____00103, BOOL____00093, BOOL____00089, BOOL____00087, BOOL____00085, BOOL____00081, BOOL____00079, BOOL____00077, BOOL____00059, BOOL____00092, BOOL____00080, BOOL____00078, BOOL____00076, BOOL____00058], true);
constraint array_bool_or([BOOL____00104, BOOL____00079, BOOL____00073, BOOL____00071, BOOL____00062, BOOL____00059, BOOL____00056, BOOL____00050, BOOL____00037, BOOL____00078, BOOL____00072, BOOL____00070, BOOL____00061, BOOL____00058, BOOL____00055, BOOL____00052, BOOL____00049, BOOL____00040, BOOL____00032, BOOL____00028, BOOL____00024, BOOL____00019, BOOL____00035, BOOL____00023, BOOL____00018, BOOL____00034, BOOL____00030, BOOL____00026, BOOL____00017, BOOL____00016], true);
constraint array_bool_or([BOOL____00107, BOOL____00103, BOOL____00102, BOOL____00099, BOOL____00085, BOOL____00077, BOOL____00075, BOOL____00073, BOOL____00071, BOOL____00069, BOOL____00059, BOOL____00056, BOOL____00053, BOOL____00050, BOOL____00044, BOOL____00033, BOOL____00029, BOOL____00025, BOOL____00020, BOOL____00015, BOOL____00046, BOOL____00032, BOOL____00028, BOOL____00014, BOOL____00045, BOOL____00031, BOOL____00023, BOOL____00018, BOOL____00013, BOOL____00012], true);
constraint array_bool_or([BOOL____00111, BOOL____00105, BOOL____00104, BOOL____00103, BOOL____00093, BOOL____00089, BOOL____00087, BOOL____00085, BOOL____00081, BOOL____00079, BOOL____00077, BOOL____00065, BOOL____00062, BOOL____00056, BOOL____00053, BOOL____00050, BOOL____00047, BOOL____00041, BOOL____00037, BOOL____00033, BOOL____00058, BOOL____00040, BOOL____00036, BOOL____00032, BOOL____00057, BOOL____00051, BOOL____00048, BOOL____00045, BOOL____00031, BOOL____00030], true);
constraint array_bool_or([BOOL____00116, BOOL____00108, BOOL____00104, BOOL____00103, BOOL____00102, BOOL____00100, BOOL____00087, BOOL____00085, BOOL____00083, BOOL____00071, BOOL____00086, BOOL____00084, BOOL____00082, BOOL____00078, BOOL____00076, BOOL____00074, BOOL____00072, BOOL____00068, BOOL____00066, BOOL____00049, BOOL____00046, BOOL____00043, BOOL____00036, BOOL____00032, BOOL____00028, BOOL____00019, BOOL____00048, BOOL____00045, BOOL____00042, BOOL____00018], true);
constraint array_bool_or([BOOL____00120, BOOL____00112, BOOL____00111, BOOL____00110, BOOL____00108, BOOL____00104, BOOL____00095, BOOL____00089, BOOL____00087, BOOL____00079, BOOL____00094, BOOL____00092, BOOL____00090, BOOL____00088, BOOL____00086, BOOL____00080, BOOL____00076, BOOL____00074, BOOL____00072, BOOL____00070, BOOL____00061, BOOL____00058, BOOL____00055, BOOL____00052, BOOL____00049, BOOL____00036, BOOL____00060, BOOL____00051, BOOL____00048, BOOL____00035], true);
constraint array_bool_or([BOOL____00123, BOOL____00119, BOOL____00117, BOOL____00116, BOOL____00115, BOOL____00111, BOOL____00110, BOOL____00107, BOOL____00093, BOOL____00091, BOOL____00089, BOOL____00087, BOOL____00083, BOOL____00077, BOOL____00075, BOOL____00073, BOOL____00071, BOOL____00069, BOOL____00059, BOOL____00056, BOOL____00047, BOOL____00084, BOOL____00076, BOOL____00072, BOOL____00070, BOOL____00068, BOOL____00058, BOOL____00055, BOOL____00046, BOOL____00045], true);
constraint array_bool_or([BOOL____00107, BOOL____00085, BOOL____00077, BOOL____00075, BOOL____00073, BOOL____00071, BOOL____00069, BOOL____00047, BOOL____00084, BOOL____00076, BOOL____00074, BOOL____00072, BOOL____00070, BOOL____00068, BOOL____00058, BOOL____00055, BOOL____00052, BOOL____00049, BOOL____00043, BOOL____00032, BOOL____00028, BOOL____00024, BOOL____00019, BOOL____00014, BOOL____00045, BOOL____00031, BOOL____00027, BOOL____00023, BOOL____00018, BOOL____00013, BOOL____00012], true);
constraint array_bool_or([BOOL____00108, BOOL____00104, BOOL____00103, BOOL____00102, BOOL____00100, BOOL____00087, BOOL____00079, BOOL____00077, BOOL____00075, BOOL____00071, BOOL____00062, BOOL____00059, BOOL____00056, BOOL____00053, BOOL____00047, BOOL____00044, BOOL____00037, BOOL____00033, BOOL____00029, BOOL____00020, BOOL____00049, BOOL____00036, BOOL____00032, BOOL____00028, BOOL____00019, BOOL____00048, BOOL____00035, BOOL____00031, BOOL____00027, BOOL____00018, BOOL____00017], true);
constraint array_bool_or([BOOL____00119, BOOL____00111, BOOL____00109, BOOL____00108, BOOL____00107, BOOL____00103, BOOL____00093, BOOL____00089, BOOL____00087, BOOL____00085, BOOL____00077, BOOL____00092, BOOL____00088, BOOL____00086, BOOL____00084, BOOL____00080, BOOL____00078, BOOL____00074, BOOL____00072, BOOL____00070, BOOL____00068, BOOL____00058, BOOL____00052, BOOL____00049, BOOL____00046, BOOL____00032, BOOL____00057, BOOL____00051, BOOL____00048, BOOL____00045, BOOL____00031], true);
constraint array_bool_or([BOOL____00120, BOOL____00112, BOOL____00111, BOOL____00110, BOOL____00109, BOOL____00108, BOOL____00104, BOOL____00095, BOOL____00093, BOOL____00091, BOOL____00089, BOOL____00087, BOOL____00081, BOOL____00077, BOOL____00075, BOOL____00073, BOOL____00071, BOOL____00062, BOOL____00059, BOOL____00056, BOOL____00053, BOOL____00050, BOOL____00037, BOOL____00078, BOOL____00061, BOOL____00058, BOOL____00055, BOOL____00052, BOOL____00049, BOOL____00036, BOOL____00035], true);
constraint array_bool_or([BOOL____00103, BOOL____00077, BOOL____00073, BOOL____00071, BOOL____00069, BOOL____00059, BOOL____00053, BOOL____00050, BOOL____00047, BOOL____00033, BOOL____00076, BOOL____00072, BOOL____00070, BOOL____00068, BOOL____00058, BOOL____00052, BOOL____00049, BOOL____00046, BOOL____00040, BOOL____00036, BOOL____00028, BOOL____00024, BOOL____00019, BOOL____00014, BOOL____00031, BOOL____00023, BOOL____00018, BOOL____00013, BOOL____00030, BOOL____00022, BOOL____00017, BOOL____00012, BOOL____00011], true);
constraint array_bool_or([BOOL____00111, BOOL____00093, BOOL____00089, BOOL____00087, BOOL____00085, BOOL____00081, BOOL____00079, BOOL____00077, BOOL____00059, BOOL____00092, BOOL____00088, BOOL____00086, BOOL____00084, BOOL____00080, BOOL____00078, BOOL____00076, BOOL____00064, BOOL____00061, BOOL____00055, BOOL____00052, BOOL____00049, BOOL____00046, BOOL____00040, BOOL____00036, BOOL____00032, BOOL____00057, BOOL____00051, BOOL____00048, BOOL____00045, BOOL____00039, BOOL____00035, BOOL____00031, BOOL____00030], true);
constraint array_bool_or([BOOL____00116, BOOL____00108, BOOL____00107, BOOL____00106, BOOL____00104, BOOL____00103, BOOL____00102, BOOL____00100, BOOL____00087, BOOL____00085, BOOL____00083, BOOL____00079, BOOL____00077, BOOL____00075, BOOL____00073, BOOL____00069, BOOL____00067, BOOL____00050, BOOL____00047, BOOL____00044, BOOL____00037, BOOL____00033, BOOL____00029, BOOL____00020, BOOL____00070, BOOL____00049, BOOL____00046, BOOL____00043, BOOL____00036, BOOL____00032, BOOL____00028, BOOL____00019, BOOL____00018], true);
constraint array_bool_or([BOOL____00124, BOOL____00120, BOOL____00119, BOOL____00118, BOOL____00116, BOOL____00112, BOOL____00111, BOOL____00110, BOOL____00108, BOOL____00095, BOOL____00093, BOOL____00091, BOOL____00089, BOOL____00085, BOOL____00083, BOOL____00079, BOOL____00077, BOOL____00075, BOOL____00071, BOOL____00062, BOOL____00059, BOOL____00056, BOOL____00050, BOOL____00086, BOOL____00078, BOOL____00076, BOOL____00074, BOOL____00070, BOOL____00061, BOOL____00058, BOOL____00055, BOOL____00049, BOOL____00048], true);
constraint int_eq_reif(x[1], 1, BOOL____00009) :: defines_var(BOOL____00009);
constraint int_eq_reif(x[2], 1, BOOL____00002) :: defines_var(BOOL____00002);
constraint int_eq_reif(x[3], 1, BOOL____00003) :: defines_var(BOOL____00003);
constraint int_eq_reif(x[4], 1, BOOL____00010) :: defines_var(BOOL____00010);
constraint int_eq_reif(x[5], 1, BOOL____00004) :: defines_var(BOOL____00004);
constraint int_eq_reif(x[6], 1, BOOL____00011) :: defines_var(BOOL____00011);
constraint int_eq_reif(x[7], 1, BOOL____00016) :: defines_var(BOOL____00016);
constraint int_eq_reif(x[8], 1, BOOL____00021) :: defines_var(BOOL____00021);
constraint int_eq_reif(x[9], 1, BOOL____00005) :: defines_var(BOOL____00005);
constraint int_eq_reif(x[10], 1, BOOL____00012) :: defines_var(BOOL____00012);
constraint int_eq_reif(x[11], 1, BOOL____00017) :: defines_var(BOOL____00017);
constraint int_eq_reif(x[12], 1, BOOL____00022) :: defines_var(BOOL____00022);
constraint int_eq_reif(x[13], 1, BOOL____00026) :: defines_var(BOOL____00026);
constraint int_eq_reif(x[14], 1, BOOL____00030) :: defines_var(BOOL____00030);
constraint int_eq_reif(x[15], 1, BOOL____00034) :: defines_var(BOOL____00034);
constraint int_eq_reif(x[16], 1, BOOL____00038) :: defines_var(BOOL____00038);
constraint int_eq_reif(x[17], 1, BOOL____00006) :: defines_var(BOOL____00006);
constraint int_eq_reif(x[18], 1, BOOL____00013) :: defines_var(BOOL____00013);
constraint int_eq_reif(x[19], 1, BOOL____00018) :: defines_var(BOOL____00018);
constraint int_eq_reif(x[20], 1, BOOL____00023) :: defines_var(BOOL____00023);
constraint int_eq_reif(x[21], 1, BOOL____00027) :: defines_var(BOOL____00027);
constraint int_eq_reif(x[22], 1, BOOL____00031) :: defines_var(BOOL____00031);
constraint int_eq_reif(x[23], 1, BOOL____00035) :: defines_var(BOOL____00035);
constraint int_eq_reif(x[24], 1, BOOL____00039) :: defines_var(BOOL____00039);
constraint int_eq_reif(x[25], 1, BOOL____00042) :: defines_var(BOOL____00042);
constraint int_eq_reif(x[26], 1, BOOL____00045) :: defines_var(BOOL____00045);
constraint int_eq_reif(x[27], 1, BOOL____00048) :: defines_var(BOOL____00048);
constraint int_eq_reif(x[28], 1, BOOL____00051) :: defines_var(BOOL____00051);
constraint int_eq_reif(x[29], 1, BOOL____00054) :: defines_var(BOOL____00054);
constraint int_eq_reif(x[30], 1, BOOL____00057) :: defines_var(BOOL____00057);
constraint int_eq_reif(x[31], 1, BOOL____00060) :: defines_var(BOOL____00060);
constraint int_eq_reif(x[32], 1, BOOL____00063) :: defines_var(BOOL____00063);
constraint int_eq_reif(x[33], 1, BOOL____00007) :: defines_var(BOOL____00007);
constraint int_eq_reif(x[34], 1, BOOL____00014) :: defines_var(BOOL____00014);
constraint int_eq_reif(x[35], 1, BOOL____00019) :: defines_var(BOOL____00019);
constraint int_eq_reif(x[36], 1, BOOL____00024) :: defines_var(BOOL____00024);
constraint int_eq_reif(x[37], 1, BOOL____00028) :: defines_var(BOOL____00028);
constraint int_eq_reif(x[38], 1, BOOL____00032) :: defines_var(BOOL____00032);
constraint int_eq_reif(x[39], 1, BOOL____00036) :: defines_var(BOOL____00036);
constraint int_eq_reif(x[40], 1, BOOL____00040) :: defines_var(BOOL____00040);
constraint int_eq_reif(x[41], 1, BOOL____00043) :: defines_var(BOOL____00043);
constraint int_eq_reif(x[42], 1, BOOL____00046) :: defines_var(BOOL____00046);
constraint int_eq_reif(x[43], 1, BOOL____00049) :: defines_var(BOOL____00049);
constraint int_eq_reif(x[44], 1, BOOL____00052) :: defines_var(BOOL____00052);
constraint int_eq_reif(x[45], 1, BOOL____00055) :: defines_var(BOOL____00055);
constraint int_eq_reif(x[46], 1, BOOL____00058) :: defines_var(BOOL____00058);
constraint int_eq_reif(x[47], 1, BOOL____00061) :: defines_var(BOOL____00061);
constraint int_eq_reif(x[48], 1, BOOL____00064) :: defines_var(BOOL____00064);
constraint int_eq_reif(x[49], 1, BOOL____00066) :: defines_var(BOOL____00066);
constraint int_eq_reif(x[50], 1, BOOL____00068) :: defines_var(BOOL____00068);
constraint int_eq_reif(x[51], 1, BOOL____00070) :: defines_var(BOOL____00070);
constraint int_eq_reif(x[52], 1, BOOL____00072) :: defines_var(BOOL____00072);
constraint int_eq_reif(x[53], 1, BOOL____00074) :: defines_var(BOOL____00074);
constraint int_eq_reif(x[54], 1, BOOL____00076) :: defines_var(BOOL____00076);
constraint int_eq_reif(x[55], 1, BOOL____00078) :: defines_var(BOOL____00078);
constraint int_eq_reif(x[56], 1, BOOL____00080) :: defines_var(BOOL____00080);
constraint int_eq_reif(x[57], 1, BOOL____00082) :: defines_var(BOOL____00082);
constraint int_eq_reif(x[58], 1, BOOL____00084) :: defines_var(BOOL____00084);
constraint int_eq_reif(x[59], 1, BOOL____00086) :: defines_var(BOOL____00086);
constraint int_eq_reif(x[60], 1, BOOL____00088) :: defines_var(BOOL____00088);
constraint int_eq_reif(x[61], 1, BOOL____00090) :: defines_var(BOOL____00090);
constraint int_eq_reif(x[62], 1, BOOL____00092) :: defines_var(BOOL____00092);
constraint int_eq_reif(x[63], 1, BOOL____00094) :: defines_var(BOOL____00094);
constraint int_eq_reif(x[64], 1, BOOL____00096) :: defines_var(BOOL____00096);
constraint int_eq_reif(x[65], 1, BOOL____00008) :: defines_var(BOOL____00008);
constraint int_eq_reif(x[66], 1, BOOL____00015) :: defines_var(BOOL____00015);
constraint int_eq_reif(x[67], 1, BOOL____00020) :: defines_var(BOOL____00020);
constraint int_eq_reif(x[68], 1, BOOL____00025) :: defines_var(BOOL____00025);
constraint int_eq_reif(x[69], 1, BOOL____00029) :: defines_var(BOOL____00029);
constraint int_eq_reif(x[70], 1, BOOL____00033) :: defines_var(BOOL____00033);
constraint int_eq_reif(x[71], 1, BOOL____00037) :: defines_var(BOOL____00037);
constraint int_eq_reif(x[72], 1, BOOL____00041) :: defines_var(BOOL____00041);
constraint int_eq_reif(x[73], 1, BOOL____00044) :: defines_var(BOOL____00044);
constraint int_eq_reif(x[74], 1, BOOL____00047) :: defines_var(BOOL____00047);
constraint int_eq_reif(x[75], 1, BOOL____00050) :: defines_var(BOOL____00050);
constraint int_eq_reif(x[76], 1, BOOL____00053) :: defines_var(BOOL____00053);
constraint int_eq_reif(x[77], 1, BOOL____00056) :: defines_var(BOOL____00056);
constraint int_eq_reif(x[78], 1, BOOL____00059) :: defines_var(BOOL____00059);
constraint int_eq_reif(x[79], 1, BOOL____00062) :: defines_var(BOOL____00062);
constraint int_eq_reif(x[80], 1, BOOL____00065) :: defines_var(BOOL____00065);
constraint int_eq_reif(x[81], 1, BOOL____00067) :: defines_var(BOOL____00067);
constraint int_eq_reif(x[82], 1, BOOL____00069) :: defines_var(BOOL____00069);
constraint int_eq_reif(x[83], 1, BOOL____00071) :: defines_var(BOOL____00071);
constraint int_eq_reif(x[84], 1, BOOL____00073) :: defines_var(BOOL____00073);
constraint int_eq_reif(x[85], 1, BOOL____00075) :: defines_var(BOOL____00075);
constraint int_eq_reif(x[86], 1, BOOL____00077) :: defines_var(BOOL____00077);
constraint int_eq_reif(x[87], 1, BOOL____00079) :: defines_var(BOOL____00079);
constraint int_eq_reif(x[88], 1, BOOL____00081) :: defines_var(BOOL____00081);
constraint int_eq_reif(x[89], 1, BOOL____00083) :: defines_var(BOOL____00083);
constraint int_eq_reif(x[90], 1, BOOL____00085) :: defines_var(BOOL____00085);
constraint int_eq_reif(x[91], 1, BOOL____00087) :: defines_var(BOOL____00087);
constraint int_eq_reif(x[92], 1, BOOL____00089) :: defines_var(BOOL____00089);
constraint int_eq_reif(x[93], 1, BOOL____00091) :: defines_var(BOOL____00091);
constraint int_eq_reif(x[94], 1, BOOL____00093) :: defines_var(BOOL____00093);
constraint int_eq_reif(x[95], 1, BOOL____00095) :: defines_var(BOOL____00095);
constraint int_eq_reif(x[96], 1, BOOL____00097) :: defines_var(BOOL____00097);
constraint int_eq_reif(x[97], 1, BOOL____00098) :: defines_var(BOOL____00098);
constraint int_eq_reif(x[98], 1, BOOL____00099) :: defines_var(BOOL____00099);
constraint int_eq_reif(x[99], 1, BOOL____00100) :: defines_var(BOOL____00100);
constraint int_eq_reif(x[100], 1, BOOL____00101) :: defines_var(BOOL____00101);
constraint int_eq_reif(x[101], 1, BOOL____00102) :: defines_var(BOOL____00102);
constraint int_eq_reif(x[102], 1, BOOL____00103) :: defines_var(BOOL____00103);
constraint int_eq_reif(x[103], 1, BOOL____00104) :: defines_var(BOOL____00104);
constraint int_eq_reif(x[104], 1, BOOL____00105) :: defines_var(BOOL____00105);
constraint int_eq_reif(x[105], 1, BOOL____00106) :: defines_var(BOOL____00106);
constraint int_eq_reif(x[106], 1, BOOL____00107) :: defines_var(BOOL____00107);
constraint int_eq_reif(x[107], 1, BOOL____00108) :: defines_var(BOOL____00108);
constraint int_eq_reif(x[108], 1, BOOL____00109) :: defines_var(BOOL____00109);
constraint int_eq_reif(x[109], 1, BOOL____00110) :: defines_var(BOOL____00110);
constraint int_eq_reif(x[110], 1, BOOL____00111) :: defines_var(BOOL____00111);
constraint int_eq_reif(x[111], 1, BOOL____00112) :: defines_var(BOOL____00112);
constraint int_eq_reif(x[112], 1, BOOL____00113) :: defines_var(BOOL____00113);
constraint int_eq_reif(x[113], 1, BOOL____00114) :: defines_var(BOOL____00114);
constraint int_eq_reif(x[114], 1, BOOL____00115) :: defines_var(BOOL____00115);
constraint int_eq_reif(x[115], 1, BOOL____00116) :: defines_var(BOOL____00116);
constraint int_eq_reif(x[116], 1, BOOL____00117) :: defines_var(BOOL____00117);
constraint int_eq_reif(x[117], 1, BOOL____00118) :: defines_var(BOOL____00118);
constraint int_eq_reif(x[118], 1, BOOL____00119) :: defines_var(BOOL____00119);
constraint int_eq_reif(x[119], 1, BOOL____00120) :: defines_var(BOOL____00120);
constraint int_eq_reif(x[120], 1, BOOL____00121) :: defines_var(BOOL____00121);
constraint int_eq_reif(x[121], 1, BOOL____00122) :: defines_var(BOOL____00122);
constraint int_eq_reif(x[122], 1, BOOL____00123) :: defines_var(BOOL____00123);
constraint int_eq_reif(x[123], 1, BOOL____00124) :: defines_var(BOOL____00124);
constraint int_eq_reif(x[124], 1, BOOL____00125) :: defines_var(BOOL____00125);
constraint int_eq_reif(x[125], 1, BOOL____00126) :: defines_var(BOOL____00126);
constraint int_eq_reif(x[126], 1, BOOL____00127) :: defines_var(BOOL____00127);
constraint int_eq_reif(x[127], 1, BOOL____00128) :: defines_var(BOOL____00128);
constraint int_eq_reif(x[128], 1, BOOL____00129) :: defines_var(BOOL____00129);
constraint int_lin_eq([-1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [INT____00001, x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10], x[11], x[12], x[13], x[14], x[15], x[16], x[17], x[18], x[19], x[20], x[21], x[22], x[23], x[24], x[25], x[26], x[27], x[28], x[29], x[30], x[31], x[32], x[33], x[34], x[35], x[36], x[37], x[38], x[39], x[40], x[41], x[42], x[43], x[44], x[45], x[46], x[47], x[48], x[49], x[50], x[51], x[52], x[53], x[54], x[55], x[56], x[57], x[58], x[59], x[60], x[61], x[62], x[63], x[64], x[65], x[66], x[67], x[68], x[69], x[70], x[71], x[72], x[73], x[74], x[75], x[76], x[77], x[78], x[79], x[80], x[81], x[82], x[83], x[84], x[85], x[86], x[87], x[88], x[89], x[90], x[91], x[92], x[93], x[94], x[95], x[96], x[97], x[98], x[99], x[100], x[101], x[102], x[103], x[104], x[105], x[106], x[107], x[108], x[109], x[110], x[111], x[112], x[113], x[114], x[115], x[116], x[117], x[118], x[119], x[120], x[121], x[122], x[123], x[124], x[125], x[126], x[127], x[128]], 0) :: defines_var(INT____00001);
solve  :: int_search(x, most_constrained, indomain_min, complete) minimize INT____00001;
