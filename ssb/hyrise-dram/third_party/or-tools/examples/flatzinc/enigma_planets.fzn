predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var 7..182: INT____00001 :: is_defined_var :: var_is_introduced;
var 1..26: a;
var 1..26: c;
var 1..26: e;
var 1..26: h;
var 1..26: i;
var 1..26: j;
var 1..26: l;
var 1..26: m;
var 1..26: n;
var 1..26: o;
var 1..26: p;
var 7..182: planets :: output_var = INT____00001;
var 1..26: r;
var 1..26: s;
var 1..26: t;
var 1..26: u;
var 1..26: v;
var 1..26: y;
array [1..17] of var 1..26: letters :: output_array([1..17]) = [p, l, u, t, o, r, a, n, s, e, i, m, j, h, v, c, y];
constraint all_different_int(letters);
constraint int_lin_eq([1, 1, 1], [n, s, u], 18);
constraint int_lin_eq([1, 1, 2], [m, n, o], 36);
constraint int_lin_eq([1, 1, 1, 1], [a, m, r, s], 32);
constraint int_lin_eq([1, 1, 1, 1, 1], [a, e, h, r, t], 31);
constraint int_lin_eq([1, 1, 1, 1, 1], [e, n, s, u, v], 39);
constraint int_lin_eq([1, 1, 1, 1, 1], [l, o, p, t, u], 40);
constraint int_lin_eq([1, 1, 1, 1, 2], [a, n, r, s, u], 36);
constraint int_lin_eq([2, 2, 1, 1, 1], [e, n, p, t, u], 29);
constraint int_lin_eq([1, 1, 1, 1, 1, 1], [a, n, r, s, t, u], 33);
constraint int_lin_eq([1, 1, 1, 2, 1, 1], [c, e, m, r, u, y], 33);
constraint int_lin_eq([1, 1, 1, 1, 1, 1, 1], [e, i, j, p, r, t, u], 50);
constraint int_lin_eq([-1, 1, 1, 1, 1, 1, 1, 1], [INT____00001, a, e, l, n, p, s, t], 0) :: defines_var(INT____00001);
solve  :: int_search(letters, first_fail, indomain, complete) satisfy;
