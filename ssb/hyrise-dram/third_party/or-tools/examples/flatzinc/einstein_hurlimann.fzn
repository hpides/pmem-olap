predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..5] of var 1..5: A :: output_array([1..5]);
array [1..5] of var 1..5: B :: output_array([1..5]);
var bool: BOOL____00001 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00002 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00004 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00005 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00007 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00008 :: is_defined_var :: var_is_introduced;
array [1..5] of var 1..5: C :: output_array([1..5]);
array [1..5] of var 1..5: D :: output_array([1..5]);
array [1..5] of var 1..5: E :: output_array([1..5]);
constraint all_different_int(A);
constraint all_different_int(B);
constraint all_different_int(C);
constraint all_different_int(D);
constraint all_different_int(E);
constraint array_bool_or([BOOL____00001, BOOL____00002], true);
constraint array_bool_or([BOOL____00004, BOOL____00005], true);
constraint array_bool_or([BOOL____00007, BOOL____00008], true);
constraint int_eq(A[1], 1);
constraint int_eq(A[2], D[2]);
constraint int_eq(A[3], B[3]);
constraint int_eq(A[4], C[3]);
constraint int_eq(A[5], E[5]);
constraint int_eq(B[1], E[1]);
constraint int_eq(B[2], 2);
constraint int_eq(B[4], D[1]);
constraint int_eq(D[3], 3);
constraint int_eq(E[3], C[2]);
constraint int_eq(E[4], D[4]);
constraint int_lin_eq([1, -1], [B[4], B[5]], -1);
constraint int_lin_eq_reif([-1, 1], [C[1], E[2]], -1, BOOL____00002) :: defines_var(BOOL____00002);
constraint int_lin_eq_reif([-1, 1], [C[1], E[2]], 1, BOOL____00001) :: defines_var(BOOL____00001);
constraint int_lin_eq_reif([-1, 1], [D[5], E[2]], -1, BOOL____00008) :: defines_var(BOOL____00008);
constraint int_lin_eq_reif([-1, 1], [D[5], E[2]], 1, BOOL____00007) :: defines_var(BOOL____00007);
constraint int_lin_eq_reif([1, -1], [C[4], E[1]], -1, BOOL____00005) :: defines_var(BOOL____00005);
constraint int_lin_eq_reif([1, -1], [C[4], E[1]], 1, BOOL____00004) :: defines_var(BOOL____00004);
solve satisfy;
