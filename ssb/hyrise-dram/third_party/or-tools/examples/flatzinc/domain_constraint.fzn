var bool: BOOL____00001 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00002 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00003 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00004 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00005 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00006 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00007 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00008 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00009 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00010 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00011 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00012 :: is_defined_var :: var_is_introduced;
var 5..5: val :: output_var = 5;
array [1..4] of var 1..9: values :: output_array([1..4]);
array [1..4] of var 0..1: var01 :: output_array([1..4]);
constraint array_bool_and([BOOL____00001, BOOL____00002], BOOL____00009) :: defines_var(BOOL____00009);
constraint array_bool_and([BOOL____00003, BOOL____00004], BOOL____00010) :: defines_var(BOOL____00010);
constraint array_bool_and([BOOL____00005, BOOL____00006], BOOL____00011) :: defines_var(BOOL____00011);
constraint array_bool_and([BOOL____00007, BOOL____00008], BOOL____00012) :: defines_var(BOOL____00012);
constraint array_bool_or([BOOL____00012, BOOL____00011, BOOL____00009, BOOL____00010], true);
constraint int_eq(values[1], 9);
constraint int_eq(values[2], 5);
constraint int_eq(values[3], 2);
constraint int_eq(values[4], 7);
constraint int_eq(var01[1], 0);
constraint int_eq(var01[2], 1);
constraint int_eq(var01[3], 0);
constraint int_eq(var01[4], 0);
constraint int_eq_reif(5, values[1], BOOL____00002) :: defines_var(BOOL____00002);
constraint int_eq_reif(5, values[2], BOOL____00004) :: defines_var(BOOL____00004);
constraint int_eq_reif(5, values[3], BOOL____00006) :: defines_var(BOOL____00006);
constraint int_eq_reif(5, values[4], BOOL____00008) :: defines_var(BOOL____00008);
constraint int_eq_reif(var01[1], 1, BOOL____00001) :: defines_var(BOOL____00001);
constraint int_eq_reif(var01[2], 1, BOOL____00003) :: defines_var(BOOL____00003);
constraint int_eq_reif(var01[3], 1, BOOL____00005) :: defines_var(BOOL____00005);
constraint int_eq_reif(var01[4], 1, BOOL____00007) :: defines_var(BOOL____00007);
constraint int_lin_eq([1, 1, 1, 1], [var01[1], var01[2], var01[3], var01[4]], 1);
solve satisfy;
