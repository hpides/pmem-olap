predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var 16..16: A = 16;
var 2..2: B = 2;
var 1..99: C;
var 1..99: D;
var 1..99: E;
var 8..8: F = 8;
var 14..14: G = 14;
var 1..99: H;
var 1..99: I;
var 1..9801: INT____00001 :: is_defined_var :: var_is_introduced;
var 1..9801: INT____00002 :: is_defined_var :: var_is_introduced;
var 1..9801: INT____00003 :: is_defined_var :: var_is_introduced;
var 1..9801: INT____00004 :: is_defined_var :: var_is_introduced;
var 1..9801: INT____00005 :: is_defined_var :: var_is_introduced;
var 1..9801: INT____00006 :: is_defined_var :: var_is_introduced;
var 1..99: K;
array [1..10] of var 1..99: LD :: output_array([1..10]) = [16, 2, C, D, E, 8, 14, H, I, K];
constraint all_different_int(LD);
constraint int_lin_eq([1, -1], [INT____00001, INT____00002], 192);
constraint int_lin_eq([1, -1], [INT____00005, INT____00006], 192);
constraint int_lin_eq([1, -1, 1, -1], [INT____00001, INT____00002, INT____00003, INT____00004], 0);
constraint int_lin_eq([1, -1, 1, -1], [INT____00003, INT____00004, INT____00005, INT____00006], 0);
constraint int_times(C, C, INT____00001) :: defines_var(INT____00001);
constraint int_times(D, D, INT____00003) :: defines_var(INT____00003);
constraint int_times(E, E, INT____00005) :: defines_var(INT____00005);
constraint int_times(H, H, INT____00002) :: defines_var(INT____00002);
constraint int_times(I, I, INT____00004) :: defines_var(INT____00004);
constraint int_times(K, K, INT____00006) :: defines_var(INT____00006);
solve  :: int_search(LD, first_fail, indomain, complete) satisfy;
