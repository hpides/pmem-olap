predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var 1..160000: INT____00001 :: is_defined_var :: var_is_introduced;
var 1..64000000: INT____00002 :: is_defined_var :: var_is_introduced;
var 1..25600000000: INT____00003 :: is_defined_var :: var_is_introduced;
var 1..160000: INT____00004 :: is_defined_var :: var_is_introduced;
var 1..64000000: INT____00005 :: is_defined_var :: var_is_introduced;
var 1..25600000000: INT____00006 :: is_defined_var :: var_is_introduced;
var 1..160000: INT____00007 :: is_defined_var :: var_is_introduced;
var 1..64000000: INT____00008 :: is_defined_var :: var_is_introduced;
var 1..25600000000: INT____00009 :: is_defined_var :: var_is_introduced;
var 1..160000: INT____00010 :: is_defined_var :: var_is_introduced;
var 1..64000000: INT____00011 :: is_defined_var :: var_is_introduced;
var 1..25600000000: INT____00012 :: is_defined_var :: var_is_introduced;
var 1..160000: INT____00013 :: is_defined_var :: var_is_introduced;
var 1..64000000: INT____00014 :: is_defined_var :: var_is_introduced;
var 4..25600000000: INT____00016 :: is_defined_var :: var_is_introduced;
var 1..400: x1;
var 1..400: x2;
var 1..400: x3;
var 1..400: x4;
var 1..400: x5;
array [1..5] of var 1..400: a :: output_array([1..5]) = [x1, x2, x3, x4, x5];
constraint all_different_int(a);
constraint int_le(x1, x2);
constraint int_le(x2, x3);
constraint int_le(x3, x4);
constraint int_le(x4, x5);
constraint int_lin_eq([-1, 1, 1, 1, 1], [INT____00016, INT____00003, INT____00006, INT____00009, INT____00012], 0) :: defines_var(INT____00016);
constraint int_times(INT____00001, x1, INT____00002) :: defines_var(INT____00002);
constraint int_times(INT____00002, x1, INT____00003) :: defines_var(INT____00003);
constraint int_times(INT____00004, x2, INT____00005) :: defines_var(INT____00005);
constraint int_times(INT____00005, x2, INT____00006) :: defines_var(INT____00006);
constraint int_times(INT____00007, x3, INT____00008) :: defines_var(INT____00008);
constraint int_times(INT____00008, x3, INT____00009) :: defines_var(INT____00009);
constraint int_times(INT____00010, x4, INT____00011) :: defines_var(INT____00011);
constraint int_times(INT____00011, x4, INT____00012) :: defines_var(INT____00012);
constraint int_times(INT____00013, x5, INT____00014) :: defines_var(INT____00014);
constraint int_times(INT____00014, x5, INT____00016);
constraint int_times(x1, x1, INT____00001) :: defines_var(INT____00001);
constraint int_times(x2, x2, INT____00004) :: defines_var(INT____00004);
constraint int_times(x3, x3, INT____00007) :: defines_var(INT____00007);
constraint int_times(x4, x4, INT____00010) :: defines_var(INT____00010);
constraint int_times(x5, x5, INT____00013) :: defines_var(INT____00013);
solve  :: int_search(a, first_fail, indomain_min, complete) satisfy;
