predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..3] of var 24..26: Age :: output_array([1..3]) = [24, 25, 26];
var 24..24: Age24 = 24;
var 25..25: Age25 = 25;
var 26..26: Age26 = 26;
var 24..25: Classical;
var 24..26: Jazz;
var 24..26: King;
var 25..25: Leon = 25;
var 24..26: Mark;
var 24..26: Pop;
var 24..26: Prince;
var 24..25: Queen = Classical;
array [1..3] of var 24..26: Names :: output_array([1..3]) = [King, Prince, Queen];
array [1..3] of var 24..26: Music :: output_array([1..3]) = [Queen, Jazz, Pop];
var 25..26: Rob;
array [1..3] of var 24..26: Surnames :: output_array([1..3]) = [25, Mark, Rob];
constraint all_different_int(Age);
constraint all_different_int(Music);
constraint all_different_int(Names);
constraint all_different_int(Surnames);
constraint int_lt(Queen, Rob);
constraint int_ne(25, King);
constraint int_ne(Mark, Jazz);
constraint int_ne(Pop, 24);
constraint int_ne(Pop, Prince);
solve satisfy;
