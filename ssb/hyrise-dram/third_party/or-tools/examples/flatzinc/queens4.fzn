predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var 0..11: INT____00001 :: is_defined_var :: var_is_introduced;
var -1..10: INT____00002 :: is_defined_var :: var_is_introduced;
var -2..9: INT____00003 :: is_defined_var :: var_is_introduced;
var -3..8: INT____00004 :: is_defined_var :: var_is_introduced;
var -4..7: INT____00005 :: is_defined_var :: var_is_introduced;
var -5..6: INT____00006 :: is_defined_var :: var_is_introduced;
var -6..5: INT____00007 :: is_defined_var :: var_is_introduced;
var -7..4: INT____00008 :: is_defined_var :: var_is_introduced;
var -8..3: INT____00009 :: is_defined_var :: var_is_introduced;
var -9..2: INT____00010 :: is_defined_var :: var_is_introduced;
var -10..1: INT____00011 :: is_defined_var :: var_is_introduced;
var -11..0: INT____00012 :: is_defined_var :: var_is_introduced;
var 2..13: INT____00013 :: is_defined_var :: var_is_introduced;
var 3..14: INT____00014 :: is_defined_var :: var_is_introduced;
var 4..15: INT____00015 :: is_defined_var :: var_is_introduced;
var 5..16: INT____00016 :: is_defined_var :: var_is_introduced;
var 6..17: INT____00017 :: is_defined_var :: var_is_introduced;
var 7..18: INT____00018 :: is_defined_var :: var_is_introduced;
var 8..19: INT____00019 :: is_defined_var :: var_is_introduced;
var 9..20: INT____00020 :: is_defined_var :: var_is_introduced;
var 10..21: INT____00021 :: is_defined_var :: var_is_introduced;
var 11..22: INT____00022 :: is_defined_var :: var_is_introduced;
var 12..23: INT____00023 :: is_defined_var :: var_is_introduced;
var 13..24: INT____00024 :: is_defined_var :: var_is_introduced;
array [1..12] of var 1..12: queens :: output_array([1..12]);
constraint all_different_int([INT____00001, INT____00002, INT____00003, INT____00004, INT____00005, INT____00006, INT____00007, INT____00008, INT____00009, INT____00010, INT____00011, INT____00012]) :: domain;
constraint all_different_int([INT____00013, INT____00014, INT____00015, INT____00016, INT____00017, INT____00018, INT____00019, INT____00020, INT____00021, INT____00022, INT____00023, INT____00024]) :: domain;
constraint all_different_int(queens);
constraint int_lin_eq([-1, 1], [INT____00001, queens[1]], 1) :: defines_var(INT____00001) :: domain;
constraint int_lin_eq([-1, 1], [INT____00002, queens[2]], 2) :: defines_var(INT____00002) :: domain;
constraint int_lin_eq([-1, 1], [INT____00003, queens[3]], 3) :: defines_var(INT____00003) :: domain;
constraint int_lin_eq([-1, 1], [INT____00004, queens[4]], 4) :: defines_var(INT____00004) :: domain;
constraint int_lin_eq([-1, 1], [INT____00005, queens[5]], 5) :: defines_var(INT____00005) :: domain;
constraint int_lin_eq([-1, 1], [INT____00006, queens[6]], 6) :: defines_var(INT____00006) :: domain;
constraint int_lin_eq([-1, 1], [INT____00007, queens[7]], 7) :: defines_var(INT____00007) :: domain;
constraint int_lin_eq([-1, 1], [INT____00008, queens[8]], 8) :: defines_var(INT____00008) :: domain;
constraint int_lin_eq([-1, 1], [INT____00009, queens[9]], 9) :: defines_var(INT____00009) :: domain;
constraint int_lin_eq([-1, 1], [INT____00010, queens[10]], 10) :: defines_var(INT____00010) :: domain;
constraint int_lin_eq([-1, 1], [INT____00011, queens[11]], 11) :: defines_var(INT____00011) :: domain;
constraint int_lin_eq([-1, 1], [INT____00012, queens[12]], 12) :: defines_var(INT____00012) :: domain;
constraint int_lin_eq([-1, 1], [INT____00013, queens[1]], -1) :: defines_var(INT____00013) :: domain;
constraint int_lin_eq([-1, 1], [INT____00014, queens[2]], -2) :: defines_var(INT____00014) :: domain;
constraint int_lin_eq([-1, 1], [INT____00015, queens[3]], -3) :: defines_var(INT____00015) :: domain;
constraint int_lin_eq([-1, 1], [INT____00016, queens[4]], -4) :: defines_var(INT____00016) :: domain;
constraint int_lin_eq([-1, 1], [INT____00017, queens[5]], -5) :: defines_var(INT____00017) :: domain;
constraint int_lin_eq([-1, 1], [INT____00018, queens[6]], -6) :: defines_var(INT____00018) :: domain;
constraint int_lin_eq([-1, 1], [INT____00019, queens[7]], -7) :: defines_var(INT____00019) :: domain;
constraint int_lin_eq([-1, 1], [INT____00020, queens[8]], -8) :: defines_var(INT____00020) :: domain;
constraint int_lin_eq([-1, 1], [INT____00021, queens[9]], -9) :: defines_var(INT____00021) :: domain;
constraint int_lin_eq([-1, 1], [INT____00022, queens[10]], -10) :: defines_var(INT____00022) :: domain;
constraint int_lin_eq([-1, 1], [INT____00023, queens[11]], -11) :: defines_var(INT____00023) :: domain;
constraint int_lin_eq([-1, 1], [INT____00024, queens[12]], -12) :: defines_var(INT____00024) :: domain;
solve  :: int_search(queens, first_fail, indomain_middle, complete) satisfy;
