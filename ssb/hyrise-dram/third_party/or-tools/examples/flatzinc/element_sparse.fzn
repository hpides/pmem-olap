var bool: BOOL____00001 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00002 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00003 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00004 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00005 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00006 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00007 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00008 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00009 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00010 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00011 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00012 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00013 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00014 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00015 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00016 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00017 :: is_defined_var :: var_is_introduced;
array [1..8] of var 0..9: element_table :: output_array([1..4, 1..2]);
array [1..2] of var 0..9: item :: output_array([1..2]);
var 5..5: item_default :: output_var = 5;
var 0..9: result :: output_var;
constraint array_bool_and([BOOL____00003, BOOL____00001, BOOL____00002], BOOL____00013) :: defines_var(BOOL____00013);
constraint array_bool_and([BOOL____00006, BOOL____00004, BOOL____00005], BOOL____00014) :: defines_var(BOOL____00014);
constraint array_bool_and([BOOL____00009, BOOL____00007, BOOL____00008], BOOL____00015) :: defines_var(BOOL____00015);
constraint array_bool_and([BOOL____00012, BOOL____00010, BOOL____00011], BOOL____00016) :: defines_var(BOOL____00016);
constraint array_bool_or([BOOL____00017, BOOL____00016, BOOL____00015, BOOL____00013, BOOL____00014], true);
constraint int_eq(1, element_table[1]);
constraint int_eq(2, element_table[2]);
constraint int_eq(2, element_table[3]);
constraint int_eq(2, element_table[6]);
constraint int_eq(4, element_table[5]);
constraint int_eq(5, element_table[4]);
constraint int_eq(8, element_table[7]);
constraint int_eq(9, element_table[8]);
constraint int_eq(item[1], 2);
constraint int_eq(item[2], 5);
constraint int_eq_reif(result, 5, BOOL____00017) :: defines_var(BOOL____00017);
constraint int_eq_reif(result, element_table[2], BOOL____00003) :: defines_var(BOOL____00003);
constraint int_eq_reif(result, element_table[4], BOOL____00006) :: defines_var(BOOL____00006);
constraint int_eq_reif(result, element_table[6], BOOL____00009) :: defines_var(BOOL____00009);
constraint int_eq_reif(result, element_table[8], BOOL____00012) :: defines_var(BOOL____00012);
constraint int_eq_reif(item[1], element_table[1], BOOL____00001) :: defines_var(BOOL____00001);
constraint int_eq_reif(item[1], element_table[3], BOOL____00004) :: defines_var(BOOL____00004);
constraint int_eq_reif(item[1], element_table[5], BOOL____00007) :: defines_var(BOOL____00007);
constraint int_eq_reif(item[1], element_table[7], BOOL____00010) :: defines_var(BOOL____00010);
constraint int_eq_reif(item[2], element_table[2], BOOL____00002) :: defines_var(BOOL____00002);
constraint int_eq_reif(item[2], element_table[4], BOOL____00005) :: defines_var(BOOL____00005);
constraint int_eq_reif(item[2], element_table[6], BOOL____00008) :: defines_var(BOOL____00008);
constraint int_eq_reif(item[2], element_table[8], BOOL____00011) :: defines_var(BOOL____00011);
solve satisfy;
