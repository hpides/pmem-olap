predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..5] of int: days = [1, 2, 3, 4, 5];
var 1..1: Alice = 1;
var bool: BOOL____00001 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00002 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00003 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00005 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00006 :: is_defined_var :: var_is_introduced;
var 1..5: Bernadette;
var 1..4: Eddie;
var 1..4: Felicidad;
var 1..4: Duane = Felicidad;
var 1..5: Garber;
var 2..5: Haller;
var -4..4: INT____00008 :: is_defined_var :: var_is_introduced;
var 1..5: Itakura;
var 1..5: choosing_a_college;
var 2..5: modern_art;
var 1..5: nutrition;
var 1..5: Jeffreys = nutrition;
array [1..5] of var 1..5: last_name :: output_array([1..5]) = [Duane, Garber, Haller, Itakura, Jeffreys];
var 1..5: physical_hygiene;
var 1..5: Charles = physical_hygiene;
array [1..5] of var 1..5: first_name :: output_array([1..5]) = [1, Bernadette, Charles, Duane, Eddie];
var 1..5: study_habits;
array [1..5] of var 1..5: lectures :: output_array([1..5]) = [choosing_a_college, Charles, modern_art, Jeffreys, study_habits];
constraint all_different_int(first_name);
constraint all_different_int(last_name);
constraint all_different_int(lectures);
constraint array_bool_or([BOOL____00005, BOOL____00006], true);
constraint array_bool_or([BOOL____00003, BOOL____00001, BOOL____00002], true);
constraint int_abs(INT____00008, 1);
constraint int_eq_reif(Itakura, 1, BOOL____00005) :: defines_var(BOOL____00005);
constraint int_eq_reif(Itakura, Bernadette, BOOL____00006) :: defines_var(BOOL____00006);
constraint int_eq_reif(modern_art, Charles, BOOL____00001) :: defines_var(BOOL____00001);
constraint int_eq_reif(modern_art, Duane, BOOL____00002) :: defines_var(BOOL____00002);
constraint int_eq_reif(modern_art, Eddie, BOOL____00003) :: defines_var(BOOL____00003);
constraint int_lt(Duane, modern_art);
constraint int_lt(Eddie, Haller);
constraint int_plus(INT____00008, study_habits, Itakura) :: defines_var(INT____00008);
constraint int_ne(Charles, 5);
constraint int_ne(Itakura, study_habits);
solve satisfy;
