array [1..16] of int: allowed = [1, 1, 3, 3, 2, 1, 4, 1, 3, 3, 1, 1, 4, 1, 2, 1];
var bool: BOOL____00001 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00002 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00003 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00004 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00005 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00006 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00007 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00008 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00009 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00010 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00011 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00012 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00013 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00014 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00015 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00016 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00017 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00018 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00019 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00020 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00021 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00022 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00023 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00024 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00025 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00026 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00027 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00028 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00029 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00030 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00031 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00032 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00033 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00034 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00035 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00036 :: is_defined_var :: var_is_introduced;
array [1..4] of var 1..3: P :: output_array([1..4]);
array [1..4] of var 1..4: V :: output_array([1..4]);
constraint array_bool_and([BOOL____00002, BOOL____00001, BOOL____00031, BOOL____00030], BOOL____00035) :: defines_var(BOOL____00035);
constraint array_bool_and([BOOL____00002, BOOL____00005, BOOL____00028, BOOL____00032], BOOL____00036) :: defines_var(BOOL____00036);
constraint array_bool_and([BOOL____00002, BOOL____00011, BOOL____00028, BOOL____00029], BOOL____00034) :: defines_var(BOOL____00034);
constraint array_bool_and([BOOL____00004, BOOL____00003, BOOL____00002, BOOL____00001], BOOL____00013) :: defines_var(BOOL____00013);
constraint array_bool_and([BOOL____00007, BOOL____00006, BOOL____00002, BOOL____00005], BOOL____00014) :: defines_var(BOOL____00014);
constraint array_bool_and([BOOL____00007, BOOL____00010, BOOL____00009, BOOL____00008], BOOL____00015) :: defines_var(BOOL____00015);
constraint array_bool_and([BOOL____00007, BOOL____00012, BOOL____00002, BOOL____00011], BOOL____00016) :: defines_var(BOOL____00016);
constraint array_bool_and([BOOL____00009, BOOL____00008, BOOL____00028, BOOL____00027], BOOL____00033) :: defines_var(BOOL____00033);
constraint array_bool_and([BOOL____00018, BOOL____00017, BOOL____00007, BOOL____00010], BOOL____00023) :: defines_var(BOOL____00023);
constraint array_bool_and([BOOL____00020, BOOL____00019, BOOL____00007, BOOL____00012], BOOL____00024) :: defines_var(BOOL____00024);
constraint array_bool_and([BOOL____00020, BOOL____00021, BOOL____00004, BOOL____00003], BOOL____00025) :: defines_var(BOOL____00025);
constraint array_bool_and([BOOL____00020, BOOL____00022, BOOL____00007, BOOL____00006], BOOL____00026) :: defines_var(BOOL____00026);
constraint array_bool_or([BOOL____00016, BOOL____00015, BOOL____00013, BOOL____00014], true);
constraint array_bool_or([BOOL____00026, BOOL____00025, BOOL____00023, BOOL____00024], true);
constraint array_bool_or([BOOL____00036, BOOL____00035, BOOL____00033, BOOL____00034], true);
constraint int_eq_reif(P[1], 1, BOOL____00002) :: defines_var(BOOL____00002);
constraint int_eq_reif(P[1], 3, BOOL____00009) :: defines_var(BOOL____00009);
constraint int_eq_reif(P[2], 1, BOOL____00007) :: defines_var(BOOL____00007);
constraint int_eq_reif(P[2], 3, BOOL____00004) :: defines_var(BOOL____00004);
constraint int_eq_reif(P[3], 1, BOOL____00020) :: defines_var(BOOL____00020);
constraint int_eq_reif(P[3], 3, BOOL____00018) :: defines_var(BOOL____00018);
constraint int_eq_reif(P[4], 1, BOOL____00028) :: defines_var(BOOL____00028);
constraint int_eq_reif(P[4], 3, BOOL____00031) :: defines_var(BOOL____00031);
constraint int_eq_reif(V[1], 1, BOOL____00001) :: defines_var(BOOL____00001);
constraint int_eq_reif(V[1], 2, BOOL____00005) :: defines_var(BOOL____00005);
constraint int_eq_reif(V[1], 3, BOOL____00008) :: defines_var(BOOL____00008);
constraint int_eq_reif(V[1], 4, BOOL____00011) :: defines_var(BOOL____00011);
constraint int_eq_reif(V[2], 1, BOOL____00010) :: defines_var(BOOL____00010);
constraint int_eq_reif(V[2], 2, BOOL____00012) :: defines_var(BOOL____00012);
constraint int_eq_reif(V[2], 3, BOOL____00003) :: defines_var(BOOL____00003);
constraint int_eq_reif(V[2], 4, BOOL____00006) :: defines_var(BOOL____00006);
constraint int_eq_reif(V[3], 1, BOOL____00021) :: defines_var(BOOL____00021);
constraint int_eq_reif(V[3], 2, BOOL____00022) :: defines_var(BOOL____00022);
constraint int_eq_reif(V[3], 3, BOOL____00017) :: defines_var(BOOL____00017);
constraint int_eq_reif(V[3], 4, BOOL____00019) :: defines_var(BOOL____00019);
constraint int_eq_reif(V[4], 1, BOOL____00027) :: defines_var(BOOL____00027);
constraint int_eq_reif(V[4], 2, BOOL____00029) :: defines_var(BOOL____00029);
constraint int_eq_reif(V[4], 3, BOOL____00030) :: defines_var(BOOL____00030);
constraint int_eq_reif(V[4], 4, BOOL____00032) :: defines_var(BOOL____00032);
constraint set_in(P[1], {1, 3});
constraint set_in(P[2], {1, 3});
constraint set_in(P[3], {1, 3});
constraint set_in(P[4], {1, 3});
solve  :: int_search([V[1], V[2], V[3], V[4], P[1], P[2], P[3], P[4]], first_fail, indomain_min, complete) satisfy;
