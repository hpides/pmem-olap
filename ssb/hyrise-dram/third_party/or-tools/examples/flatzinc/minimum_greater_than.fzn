var bool: BOOL____00001 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00002 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00003 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00004 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00005 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00006 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00007 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00008 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00009 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00010 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00011 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00012 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00014 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00015 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00016 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00017 :: is_defined_var :: var_is_introduced;
var 5..5: var1 :: output_var = 5;
var 3..3: var2 :: output_var = 3;
array [1..4] of var 1..8: variables :: output_array([1..4]);
constraint array_bool_or([BOOL____00012, BOOL____00011, BOOL____00010, BOOL____00009], true);
constraint array_bool_or([BOOL____00017, BOOL____00016, BOOL____00015, BOOL____00014], true);
constraint bool_le(BOOL____00001, BOOL____00002);
constraint bool_le(BOOL____00003, BOOL____00004);
constraint bool_le(BOOL____00005, BOOL____00006);
constraint bool_le(BOOL____00007, BOOL____00008);
constraint int_eq(variables[1], 8);
constraint int_eq(variables[2], 5);
constraint int_eq(variables[3], 3);
constraint int_eq(variables[4], 8);
constraint int_eq_reif(3, variables[1], BOOL____00014) :: defines_var(BOOL____00014);
constraint int_eq_reif(3, variables[2], BOOL____00015) :: defines_var(BOOL____00015);
constraint int_eq_reif(3, variables[3], BOOL____00016) :: defines_var(BOOL____00016);
constraint int_eq_reif(3, variables[4], BOOL____00017) :: defines_var(BOOL____00017);
constraint int_eq_reif(5, variables[1], BOOL____00009) :: defines_var(BOOL____00009);
constraint int_eq_reif(5, variables[2], BOOL____00010) :: defines_var(BOOL____00010);
constraint int_eq_reif(5, variables[3], BOOL____00011) :: defines_var(BOOL____00011);
constraint int_eq_reif(5, variables[4], BOOL____00012) :: defines_var(BOOL____00012);
constraint int_le_reif(5, variables[1], BOOL____00002) :: defines_var(BOOL____00002);
constraint int_le_reif(5, variables[2], BOOL____00004) :: defines_var(BOOL____00004);
constraint int_le_reif(5, variables[3], BOOL____00006) :: defines_var(BOOL____00006);
constraint int_le_reif(5, variables[4], BOOL____00008) :: defines_var(BOOL____00008);
constraint int_lt_reif(3, variables[1], BOOL____00001) :: defines_var(BOOL____00001);
constraint int_lt_reif(3, variables[2], BOOL____00003) :: defines_var(BOOL____00003);
constraint int_lt_reif(3, variables[3], BOOL____00005) :: defines_var(BOOL____00005);
constraint int_lt_reif(3, variables[4], BOOL____00007) :: defines_var(BOOL____00007);
solve satisfy;
