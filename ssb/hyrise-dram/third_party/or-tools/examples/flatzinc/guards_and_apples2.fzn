predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var 0..500: INT____00001 :: is_defined_var :: var_is_introduced;
var 0..500: INT____00003 :: is_defined_var :: var_is_introduced;
var 0..500: INT____00005 :: is_defined_var :: var_is_introduced;
var 0..500: INT____00007 :: is_defined_var :: var_is_introduced;
var 0..500: INT____00009 :: is_defined_var :: var_is_introduced;
array [1..6] of var 0..1000: x :: output_array([1..6]);
constraint int_div(x[1], 2, INT____00001) :: defines_var(INT____00001);
constraint int_div(x[2], 2, INT____00003) :: defines_var(INT____00003);
constraint int_div(x[3], 2, INT____00005) :: defines_var(INT____00005);
constraint int_div(x[4], 2, INT____00007) :: defines_var(INT____00007);
constraint int_div(x[5], 2, INT____00009) :: defines_var(INT____00009);
constraint int_eq(x[6], 1);
constraint int_lin_eq([-1, 1], [INT____00001, x[2]], -1);
constraint int_lin_eq([-1, 1], [INT____00003, x[3]], -1);
constraint int_lin_eq([-1, 1], [INT____00005, x[4]], -1);
constraint int_lin_eq([-1, 1], [INT____00007, x[5]], -1);
constraint int_lin_eq([-1, 1], [INT____00009, x[6]], -1);
constraint int_mod(x[1], 2, 0);
constraint int_mod(x[2], 2, 0);
constraint int_mod(x[3], 2, 0);
constraint int_mod(x[4], 2, 0);
constraint int_mod(x[5], 2, 0);
solve satisfy;
