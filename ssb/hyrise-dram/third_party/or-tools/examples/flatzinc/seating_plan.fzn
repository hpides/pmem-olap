predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..36] of int: data = [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0];
array [1..36] of var 0..5: x :: output_array([1..6, 1..6]);
constraint all_different_int([x[2]]);
constraint all_different_int([x[12]]);
constraint all_different_int([x[25]]);
constraint all_different_int([x[35]]);
constraint all_different_int([x[9], x[15], x[21], x[27]]);
constraint all_different_int([x[10], x[16], x[22], x[28]]);
constraint all_different_int([x[14], x[15], x[16], x[17]]);
constraint all_different_int([x[20], x[21], x[22], x[23]]);
constraint all_different_int([x[2], x[8], x[14], x[20], x[26]]);
constraint all_different_int([x[8], x[9], x[10], x[11], x[12]]);
constraint all_different_int([x[11], x[17], x[23], x[29], x[35]]);
constraint all_different_int([x[25], x[26], x[27], x[28], x[29]]);
constraint global_cardinality([x[2], x[8], x[9], x[10], x[11], x[12], x[14], x[15], x[16], x[17], x[20], x[21], x[22], x[23], x[25], x[26], x[27], x[28], x[29], x[35]], [1, 2, 3, 4, 5], [4, 4, 4, 4, 4]);
constraint int_eq(x[1], 0);
constraint int_eq(x[3], 0);
constraint int_eq(x[4], 0);
constraint int_eq(x[5], 0);
constraint int_eq(x[6], 0);
constraint int_eq(x[7], 0);
constraint int_eq(x[13], 0);
constraint int_eq(x[18], 0);
constraint int_eq(x[19], 0);
constraint int_eq(x[24], 0);
constraint int_eq(x[30], 0);
constraint int_eq(x[31], 0);
constraint int_eq(x[32], 0);
constraint int_eq(x[33], 0);
constraint int_eq(x[34], 0);
constraint int_eq(x[36], 0);
constraint int_lt(0, x[2]);
constraint int_lt(0, x[8]);
constraint int_lt(0, x[9]);
constraint int_lt(0, x[10]);
constraint int_lt(0, x[11]);
constraint int_lt(0, x[12]);
constraint int_lt(0, x[14]);
constraint int_lt(0, x[15]);
constraint int_lt(0, x[16]);
constraint int_lt(0, x[17]);
constraint int_lt(0, x[20]);
constraint int_lt(0, x[21]);
constraint int_lt(0, x[22]);
constraint int_lt(0, x[23]);
constraint int_lt(0, x[25]);
constraint int_lt(0, x[26]);
constraint int_lt(0, x[27]);
constraint int_lt(0, x[28]);
constraint int_lt(0, x[29]);
constraint int_lt(0, x[35]);
constraint int_ne(x[2], x[9]);
constraint int_ne(x[3], x[9]);
constraint int_ne(x[3], x[10]);
constraint int_ne(x[4], x[9]);
constraint int_ne(x[4], x[10]);
constraint int_ne(x[4], x[11]);
constraint int_ne(x[5], x[10]);
constraint int_ne(x[5], x[11]);
constraint int_ne(x[6], x[11]);
constraint int_ne(x[8], x[9]);
constraint int_ne(x[9], x[10]);
constraint int_ne(x[9], x[16]);
constraint int_ne(x[10], x[9]);
constraint int_ne(x[10], x[11]);
constraint int_ne(x[10], x[16]);
constraint int_ne(x[10], x[17]);
constraint int_ne(x[11], x[10]);
constraint int_ne(x[11], x[16]);
constraint int_ne(x[11], x[17]);
constraint int_ne(x[12], x[11]);
constraint int_ne(x[12], x[17]);
constraint int_ne(x[14], x[9]);
constraint int_ne(x[15], x[9]);
constraint int_ne(x[15], x[10]);
constraint int_ne(x[15], x[16]);
constraint int_ne(x[16], x[9]);
constraint int_ne(x[16], x[10]);
constraint int_ne(x[16], x[11]);
constraint int_ne(x[16], x[17]);
constraint int_ne(x[16], x[23]);
constraint int_ne(x[17], x[10]);
constraint int_ne(x[17], x[11]);
constraint int_ne(x[17], x[16]);
constraint int_ne(x[17], x[23]);
constraint int_ne(x[18], x[11]);
constraint int_ne(x[18], x[17]);
constraint int_ne(x[18], x[23]);
constraint int_ne(x[21], x[16]);
constraint int_ne(x[22], x[16]);
constraint int_ne(x[22], x[17]);
constraint int_ne(x[22], x[23]);
constraint int_ne(x[23], x[16]);
constraint int_ne(x[23], x[17]);
constraint int_ne(x[24], x[17]);
constraint int_ne(x[24], x[23]);
constraint int_ne(x[28], x[23]);
constraint int_ne(x[29], x[23]);
constraint int_ne(x[30], x[23]);
solve  :: int_search([x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10], x[11], x[12], x[13], x[14], x[15], x[16], x[17], x[18], x[19], x[20], x[21], x[22], x[23], x[24], x[25], x[26], x[27], x[28], x[29], x[30], x[31], x[32], x[33], x[34], x[35], x[36]], first_fail, indomain_min, complete) satisfy;
