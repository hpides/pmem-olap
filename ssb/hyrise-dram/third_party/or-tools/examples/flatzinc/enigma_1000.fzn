predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var 0..9: A;
var 1..9: E;
var 0..9: G;
var 0..9: I;
var 10110..99999: INT____00001 :: is_defined_var :: var_is_introduced;
var 100010..899991: INT____00003 :: is_defined_var :: var_is_introduced;
var 1..9: M;
var 0..9: N;
var 0..9: S;
var 1..9: T;
array [1..8] of var 0..9: letters :: output_array([1..8]) = [E, N, I, G, M, A, T, S];
constraint all_different_int(letters);
constraint int_lin_eq([-1, 10, 1000, 100, 1, 10000], [INT____00001, E, I, M, S, T], 0) :: defines_var(INT____00001);
constraint int_lin_eq([-1, 1, 100000, 100, 1000, 10, 10000], [INT____00003, A, E, G, I, M, N], 0) :: defines_var(INT____00003);
constraint int_times(M, INT____00001, INT____00003);
solve satisfy;
