predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..4] of int: reporters = [1, 2, 3, 4];
var bool: BOOL____00001 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00002 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00003 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00004 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00005 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00006 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00008 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00010 :: is_defined_var :: var_is_introduced;
var 1..4: Bayonne;
var 0..1: INT____00009 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00011 :: is_defined_var :: var_is_introduced;
var 1..4: New_Hope;
var 1..4: Port_Charles;
var 1..4: South_Amboy;
var 1..4: baby;
var 1..4: blimp;
array [1..4] of var 1..4: locations :: output_array([1..4]) = [Bayonne, New_Hope, Port_Charles, South_Amboy];
var 1..4: skyscraper;
var 1..4: whale;
array [1..4] of var 1..4: events :: output_array([1..4]) = [baby, blimp, skyscraper, whale];
constraint all_different_int(events);
constraint all_different_int(locations);
constraint array_bool_and([BOOL____00001, BOOL____00002], BOOL____00005) :: defines_var(BOOL____00005);
constraint array_bool_and([BOOL____00003, BOOL____00004], BOOL____00006) :: defines_var(BOOL____00006);
constraint array_bool_or([BOOL____00005, BOOL____00006], true);
constraint bool2int(BOOL____00008, INT____00009) :: defines_var(INT____00009);
constraint bool2int(BOOL____00010, INT____00011) :: defines_var(INT____00011);
constraint int_eq_reif(Bayonne, 1, BOOL____00008) :: defines_var(BOOL____00008);
constraint int_eq_reif(Bayonne, whale, BOOL____00010) :: defines_var(BOOL____00010);
constraint int_eq_reif(blimp, 3, BOOL____00001) :: defines_var(BOOL____00001);
constraint int_eq_reif(blimp, Port_Charles, BOOL____00004) :: defines_var(BOOL____00004);
constraint int_eq_reif(skyscraper, 3, BOOL____00003) :: defines_var(BOOL____00003);
constraint int_eq_reif(skyscraper, Port_Charles, BOOL____00002) :: defines_var(BOOL____00002);
constraint int_lin_le([-1, -1], [INT____00009, INT____00011], -1);
constraint int_ne(2, Port_Charles);
constraint int_ne(South_Amboy, skyscraper);
constraint int_ne(South_Amboy, whale);
constraint int_ne(baby, New_Hope);
constraint int_ne(baby, South_Amboy);
solve satisfy;
