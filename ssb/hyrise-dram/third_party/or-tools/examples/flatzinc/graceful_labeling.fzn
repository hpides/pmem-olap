predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..49] of int: adjacencyMatrix = [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0];
var bool: BOOL____00005 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00024 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00033 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00042 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00051 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00060 :: is_defined_var :: var_is_introduced;
var -6..6: INT____00001 :: is_defined_var :: var_is_introduced;
var 0..6: INT____00002 :: is_defined_var :: var_is_introduced;
var -6..6: INT____00003 :: is_defined_var :: var_is_introduced;
var 0..6: INT____00004 :: is_defined_var :: var_is_introduced;
var -6..6: INT____00006 :: is_defined_var :: var_is_introduced;
var 0..6: INT____00007 :: is_defined_var :: var_is_introduced;
var -6..6: INT____00009 :: is_defined_var :: var_is_introduced;
var 0..6: INT____00010 :: is_defined_var :: var_is_introduced;
var -6..6: INT____00012 :: is_defined_var :: var_is_introduced;
var 0..6: INT____00013 :: is_defined_var :: var_is_introduced;
var -6..6: INT____00015 :: is_defined_var :: var_is_introduced;
var 0..6: INT____00016 :: is_defined_var :: var_is_introduced;
var -6..6: INT____00018 :: is_defined_var :: var_is_introduced;
var 0..6: INT____00019 :: is_defined_var :: var_is_introduced;
var -6..6: INT____00021 :: is_defined_var :: var_is_introduced;
var 0..6: INT____00022 :: is_defined_var :: var_is_introduced;
var -6..6: INT____00029 :: is_defined_var :: var_is_introduced;
var 0..6: INT____00030 :: is_defined_var :: var_is_introduced;
var -6..6: INT____00037 :: is_defined_var :: var_is_introduced;
var 0..6: INT____00038 :: is_defined_var :: var_is_introduced;
var -6..6: INT____00045 :: is_defined_var :: var_is_introduced;
var 0..6: INT____00046 :: is_defined_var :: var_is_introduced;
var -6..6: INT____00053 :: is_defined_var :: var_is_introduced;
var 0..6: INT____00054 :: is_defined_var :: var_is_introduced;
array [1..7] of var 0..6: labels :: output_array([1..7]);
constraint all_different_int(labels);
constraint int_abs(INT____00001, INT____00002) :: defines_var(INT____00002);
constraint int_abs(INT____00003, INT____00004) :: defines_var(INT____00004);
constraint int_abs(INT____00006, INT____00007) :: defines_var(INT____00007);
constraint int_abs(INT____00009, INT____00010) :: defines_var(INT____00010);
constraint int_abs(INT____00012, INT____00013) :: defines_var(INT____00013);
constraint int_abs(INT____00015, INT____00016) :: defines_var(INT____00016);
constraint int_abs(INT____00018, INT____00019) :: defines_var(INT____00019);
constraint int_abs(INT____00021, INT____00022) :: defines_var(INT____00022);
constraint int_abs(INT____00029, INT____00030) :: defines_var(INT____00030);
constraint int_abs(INT____00037, INT____00038) :: defines_var(INT____00038);
constraint int_abs(INT____00045, INT____00046) :: defines_var(INT____00046);
constraint int_abs(INT____00053, INT____00054) :: defines_var(INT____00054);
constraint int_lin_eq([-1, -1, 1], [INT____00003, labels[1], labels[2]], 0) :: defines_var(INT____00003);
constraint int_lin_eq([-1, -1, 1], [INT____00006, labels[2], labels[3]], 0) :: defines_var(INT____00006);
constraint int_lin_eq([-1, -1, 1], [INT____00009, labels[3], labels[4]], 0) :: defines_var(INT____00009);
constraint int_lin_eq([-1, -1, 1], [INT____00012, labels[3], labels[6]], 0) :: defines_var(INT____00012);
constraint int_lin_eq([-1, -1, 1], [INT____00015, labels[4], labels[5]], 0) :: defines_var(INT____00015);
constraint int_lin_eq([-1, -1, 1], [INT____00018, labels[6], labels[7]], 0) :: defines_var(INT____00018);
constraint int_plus(INT____00001, labels[2], labels[1]) :: defines_var(INT____00001);
constraint int_plus(INT____00021, labels[3], labels[2]) :: defines_var(INT____00021);
constraint int_plus(INT____00029, labels[4], labels[3]) :: defines_var(INT____00029);
constraint int_plus(INT____00037, labels[6], labels[3]) :: defines_var(INT____00037);
constraint int_plus(INT____00045, labels[5], labels[4]) :: defines_var(INT____00045);
constraint int_plus(INT____00053, labels[7], labels[6]) :: defines_var(INT____00053);
constraint int_ne_reif(INT____00002, INT____00004, BOOL____00005) :: defines_var(BOOL____00005);
constraint int_ne_reif(INT____00002, INT____00007, true);
constraint int_ne_reif(INT____00002, INT____00010, true);
constraint int_ne_reif(INT____00002, INT____00013, true);
constraint int_ne_reif(INT____00002, INT____00016, true);
constraint int_ne_reif(INT____00002, INT____00019, true);
constraint int_ne_reif(INT____00022, INT____00004, true);
constraint int_ne_reif(INT____00022, INT____00007, BOOL____00024) :: defines_var(BOOL____00024);
constraint int_ne_reif(INT____00022, INT____00010, true);
constraint int_ne_reif(INT____00022, INT____00013, true);
constraint int_ne_reif(INT____00022, INT____00016, true);
constraint int_ne_reif(INT____00022, INT____00019, true);
constraint int_ne_reif(INT____00030, INT____00004, true);
constraint int_ne_reif(INT____00030, INT____00007, true);
constraint int_ne_reif(INT____00030, INT____00010, BOOL____00033) :: defines_var(BOOL____00033);
constraint int_ne_reif(INT____00030, INT____00013, true);
constraint int_ne_reif(INT____00030, INT____00016, true);
constraint int_ne_reif(INT____00030, INT____00019, true);
constraint int_ne_reif(INT____00038, INT____00004, true);
constraint int_ne_reif(INT____00038, INT____00007, true);
constraint int_ne_reif(INT____00038, INT____00010, true);
constraint int_ne_reif(INT____00038, INT____00013, BOOL____00042) :: defines_var(BOOL____00042);
constraint int_ne_reif(INT____00038, INT____00016, true);
constraint int_ne_reif(INT____00038, INT____00019, true);
constraint int_ne_reif(INT____00046, INT____00004, true);
constraint int_ne_reif(INT____00046, INT____00007, true);
constraint int_ne_reif(INT____00046, INT____00010, true);
constraint int_ne_reif(INT____00046, INT____00013, true);
constraint int_ne_reif(INT____00046, INT____00016, BOOL____00051) :: defines_var(BOOL____00051);
constraint int_ne_reif(INT____00046, INT____00019, true);
constraint int_ne_reif(INT____00054, INT____00004, true);
constraint int_ne_reif(INT____00054, INT____00007, true);
constraint int_ne_reif(INT____00054, INT____00010, true);
constraint int_ne_reif(INT____00054, INT____00013, true);
constraint int_ne_reif(INT____00054, INT____00016, true);
constraint int_ne_reif(INT____00054, INT____00019, BOOL____00060) :: defines_var(BOOL____00060);
solve  :: int_search(labels, first_fail, indomain_min, complete) satisfy;
