predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var 1..9: D;
var 1..9: E;
var 1..9: F;
var 123454321..999999999: INT____00001 :: is_defined_var :: var_is_introduced;
var 11111..99999: INT____00002 :: is_defined_var :: var_is_introduced;
var 1..9: L;
var 1..9: N;
var 1..9: O;
var 11111..99999: OODDF :: output_var = INT____00002;
var 1..9: R;
var 1..9: U;
var 1..9: W;
var 111111111..999999999: WONDERFUL :: output_var = INT____00001;
array [1..9] of var 1..9: fd = [W, O, N, D, E, R, F, U, L];
constraint all_different_int(fd);
constraint int_lin_eq([-1, 110, 1, 11000], [INT____00002, D, F, O], 0) :: defines_var(INT____00002);
constraint int_lin_eq([-1, 100000, 10000, 100, 1, 1000000, 10000000, 1000, 10, 100000000], [INT____00001, D, E, F, L, N, O, R, U, W], 0) :: defines_var(INT____00001);
constraint int_times(INT____00002, INT____00002, INT____00001);
solve  :: int_search([W, O, N, D, E, R, F, U, L, INT____00001, INT____00002], first_fail, indomain, complete) satisfy;
