predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..135] of int: P = [1, 1, 2, 1, 0, 0, 0, 0, 11, 1, 2, 1, 3, 0, 0, 0, 0, 2, 1, 4, 2, 4, 0, 0, 0, 0, 20, 1, 5, 1, 6, 2, 6, 3, 6, 6, 2, 2, 2, 3, 0, 0, 0, 0, 3, 2, 5, 3, 5, 0, 0, 0, 0, 3, 3, 1, 3, 2, 4, 1, 4, 2, 240, 3, 3, 3, 4, 0, 0, 0, 0, 6, 4, 3, 5, 3, 0, 0, 0, 0, 6, 4, 4, 5, 4, 5, 5, 0, 0, 7, 4, 5, 4, 6, 0, 0, 0, 0, 30, 5, 1, 5, 2, 0, 0, 0, 0, 6, 5, 6, 6, 6, 0, 0, 0, 0, 9, 6, 1, 6, 2, 6, 3, 0, 0, 8, 6, 4, 6, 5, 0, 0, 0, 0, 2];
var bool: BOOL____00003 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00005 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00009 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00011 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00012 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00013 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00014 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00015 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00023 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00031 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00033 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00034 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00035 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00036 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00037 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00041 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00043 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00044 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00045 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00046 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00047 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00058 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00060 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00061 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00062 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00066 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00068 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00069 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00070 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00074 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00085 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00087 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00088 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00089 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00093 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00095 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00099 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00106 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00108 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00109 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00110 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00111 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00112 :: is_defined_var :: var_is_introduced;
var 1..36: INT____00004 :: is_defined_var :: var_is_introduced;
var 1..36: INT____00010 :: is_defined_var :: var_is_introduced;
var 1..36: INT____00019 :: is_defined_var :: var_is_introduced;
var 1..36: INT____00032 :: is_defined_var :: var_is_introduced;
var 1..36: INT____00042 :: is_defined_var :: var_is_introduced;
var 1..36: INT____00059 :: is_defined_var :: var_is_introduced;
var 1..36: INT____00067 :: is_defined_var :: var_is_introduced;
var 1..36: INT____00081 :: is_defined_var :: var_is_introduced;
var 1..36: INT____00086 :: is_defined_var :: var_is_introduced;
var 1..36: INT____00094 :: is_defined_var :: var_is_introduced;
var 1..36: INT____00107 :: is_defined_var :: var_is_introduced;
array [1..4] of var 0..1000: a____00024;
array [1..4] of var 0..1000: a____00051;
array [1..3] of var 0..1000: a____00075;
array [1..3] of var 0..1000: a____00100;
var bool: bb____00021;
var bool: bb____00049;
var bool: bb____00072;
var bool: bb____00097;
array [1..36] of var 1..6: x :: output_array([1..6, 1..6]);
var 1..6: b____00105 = x[35];
var 1..6: b____00092 = x[36];
var 1..6: b____00084 = x[26];
var 1..6: b____00080 = x[24];
var 1..6: b____00065 = x[27];
var 1..6: b____00057 = x[16];
var 1..6: b____00040 = x[17];
var 1..6: b____00030 = x[9];
var 1..6: b____00018 = x[10];
var 1..6: b____00008 = x[3];
var 1..6: b____00002 = x[7];
var 1..6: a____00104 = x[34];
var 1..6: a____00091 = x[30];
var 1..6: a____00083 = x[25];
var 1..6: a____00079 = x[23];
var 1..6: a____00064 = x[21];
var 1..6: a____00056 = x[15];
var 1..6: a____00039 = x[11];
var 1..6: a____00029 = x[8];
var 1..6: a____00017 = x[4];
var 1..6: a____00007 = x[2];
var 1..6: a____00001 = x[1];
constraint all_different_int([x[1], x[2], x[3], x[4], x[5], x[6]]);
constraint all_different_int([x[1], x[7], x[13], x[19], x[25], x[31]]);
constraint all_different_int([x[2], x[8], x[14], x[20], x[26], x[32]]);
constraint all_different_int([x[3], x[9], x[15], x[21], x[27], x[33]]);
constraint all_different_int([x[4], x[10], x[16], x[22], x[28], x[34]]);
constraint all_different_int([x[5], x[11], x[17], x[23], x[29], x[35]]);
constraint all_different_int([x[6], x[12], x[18], x[24], x[30], x[36]]);
constraint all_different_int([x[7], x[8], x[9], x[10], x[11], x[12]]);
constraint all_different_int([x[13], x[14], x[15], x[16], x[17], x[18]]);
constraint all_different_int([x[19], x[20], x[21], x[22], x[23], x[24]]);
constraint all_different_int([x[25], x[26], x[27], x[28], x[29], x[30]]);
constraint all_different_int([x[31], x[32], x[33], x[34], x[35], x[36]]);
constraint array_bool_or([BOOL____00003, BOOL____00005], true);
constraint array_bool_or([BOOL____00093, BOOL____00095], true);
constraint array_bool_or([BOOL____00062, BOOL____00061, BOOL____00058, BOOL____00060], true);
constraint array_bool_or([BOOL____00070, BOOL____00069, BOOL____00066, BOOL____00068], true);
constraint array_bool_or([BOOL____00089, BOOL____00088, BOOL____00085, BOOL____00087], true);
constraint array_bool_or([BOOL____00015, BOOL____00014, BOOL____00013, BOOL____00012, BOOL____00009, BOOL____00011], true);
constraint array_bool_or([BOOL____00037, BOOL____00036, BOOL____00035, BOOL____00034, BOOL____00031, BOOL____00033], true);
constraint array_bool_or([BOOL____00047, BOOL____00046, BOOL____00045, BOOL____00044, BOOL____00041, BOOL____00043], true);
constraint array_bool_or([BOOL____00112, BOOL____00111, BOOL____00110, BOOL____00109, BOOL____00106, BOOL____00108], true);
constraint bool_eq_reif(bb____00021, false, BOOL____00023) :: defines_var(BOOL____00023);
constraint bool_eq_reif(bb____00049, false, false);
constraint bool_eq_reif(bb____00072, false, BOOL____00074) :: defines_var(BOOL____00074);
constraint bool_eq_reif(bb____00097, false, BOOL____00099) :: defines_var(BOOL____00099);
constraint int_eq(a____00024[1], x[5]);
constraint int_eq(a____00051[1], x[13]);
constraint int_eq(a____00075[1], x[22]);
constraint int_eq(a____00100[1], x[31]);
constraint int_eq_reif(6, a____00024[4], bb____00021);
constraint int_eq_reif(7, a____00075[3], bb____00072);
constraint int_eq_reif(8, a____00100[3], bb____00097);
constraint int_eq_reif(240, a____00051[4], bb____00049);
constraint int_eq_reif(INT____00004, 11, BOOL____00005) :: defines_var(BOOL____00005);
constraint int_eq_reif(INT____00010, 2, BOOL____00011) :: defines_var(BOOL____00011);
constraint int_eq_reif(INT____00019, 20, true);
constraint int_eq_reif(INT____00032, 3, BOOL____00033) :: defines_var(BOOL____00033);
constraint int_eq_reif(INT____00042, 3, BOOL____00043) :: defines_var(BOOL____00043);
constraint int_eq_reif(INT____00059, 6, BOOL____00060) :: defines_var(BOOL____00060);
constraint int_eq_reif(INT____00067, 6, BOOL____00068) :: defines_var(BOOL____00068);
constraint int_eq_reif(INT____00081, 30, true);
constraint int_eq_reif(INT____00086, 6, BOOL____00087) :: defines_var(BOOL____00087);
constraint int_eq_reif(INT____00094, 9, BOOL____00095) :: defines_var(BOOL____00095);
constraint int_eq_reif(INT____00107, 2, BOOL____00108) :: defines_var(BOOL____00108);
constraint int_lin_eq_reif([-1, 1], [x[2], x[3]], 2, BOOL____00015) :: defines_var(BOOL____00015);
constraint int_lin_eq_reif([-1, 1], [x[8], x[9]], 3, BOOL____00037) :: defines_var(BOOL____00037);
constraint int_lin_eq_reif([-1, 1], [x[11], x[17]], 3, BOOL____00047) :: defines_var(BOOL____00047);
constraint int_lin_eq_reif([-1, 1], [x[34], x[35]], 2, BOOL____00112) :: defines_var(BOOL____00112);
constraint int_lin_eq_reif([-1, 2], [x[2], x[3]], 0, BOOL____00013) :: defines_var(BOOL____00013);
constraint int_lin_eq_reif([-1, 2], [x[34], x[35]], 0, BOOL____00110) :: defines_var(BOOL____00110);
constraint int_lin_eq_reif([-1, 3], [x[8], x[9]], 0, BOOL____00035) :: defines_var(BOOL____00035);
constraint int_lin_eq_reif([-1, 3], [x[11], x[17]], 0, BOOL____00045) :: defines_var(BOOL____00045);
constraint int_lin_eq_reif([-1, 6], [x[15], x[16]], 0, BOOL____00062) :: defines_var(BOOL____00062);
constraint int_lin_eq_reif([-1, 6], [x[21], x[27]], 0, BOOL____00070) :: defines_var(BOOL____00070);
constraint int_lin_eq_reif([-1, 6], [x[25], x[26]], 0, BOOL____00089) :: defines_var(BOOL____00089);
constraint int_lin_eq_reif([1, -1], [x[2], x[3]], 2, BOOL____00014) :: defines_var(BOOL____00014);
constraint int_lin_eq_reif([1, -1], [x[8], x[9]], 3, BOOL____00036) :: defines_var(BOOL____00036);
constraint int_lin_eq_reif([1, -1], [x[11], x[17]], 3, BOOL____00046) :: defines_var(BOOL____00046);
constraint int_lin_eq_reif([1, -1], [x[34], x[35]], 2, BOOL____00111) :: defines_var(BOOL____00111);
constraint int_lin_eq_reif([1, 1], [x[1], x[7]], 11, BOOL____00003) :: defines_var(BOOL____00003);
constraint int_lin_eq_reif([1, 1], [x[2], x[3]], 2, BOOL____00009) :: defines_var(BOOL____00009);
constraint int_lin_eq_reif([1, 1], [x[8], x[9]], 3, BOOL____00031) :: defines_var(BOOL____00031);
constraint int_lin_eq_reif([1, 1], [x[11], x[17]], 3, BOOL____00041) :: defines_var(BOOL____00041);
constraint int_lin_eq_reif([1, 1], [x[15], x[16]], 6, BOOL____00058) :: defines_var(BOOL____00058);
constraint int_lin_eq_reif([1, 1], [x[21], x[27]], 6, BOOL____00066) :: defines_var(BOOL____00066);
constraint int_lin_eq_reif([1, 1], [x[25], x[26]], 6, BOOL____00085) :: defines_var(BOOL____00085);
constraint int_lin_eq_reif([1, 1], [x[30], x[36]], 9, BOOL____00093) :: defines_var(BOOL____00093);
constraint int_lin_eq_reif([1, 1], [x[34], x[35]], 2, BOOL____00106) :: defines_var(BOOL____00106);
constraint int_lin_eq_reif([2, -1], [x[2], x[3]], 0, BOOL____00012) :: defines_var(BOOL____00012);
constraint int_lin_eq_reif([2, -1], [x[34], x[35]], 0, BOOL____00109) :: defines_var(BOOL____00109);
constraint int_lin_eq_reif([3, -1], [x[8], x[9]], 0, BOOL____00034) :: defines_var(BOOL____00034);
constraint int_lin_eq_reif([3, -1], [x[11], x[17]], 0, BOOL____00044) :: defines_var(BOOL____00044);
constraint int_lin_eq_reif([6, -1], [x[15], x[16]], 0, BOOL____00061) :: defines_var(BOOL____00061);
constraint int_lin_eq_reif([6, -1], [x[21], x[27]], 0, BOOL____00069) :: defines_var(BOOL____00069);
constraint int_lin_eq_reif([6, -1], [x[25], x[26]], 0, BOOL____00088) :: defines_var(BOOL____00088);
constraint int_lin_eq_reif([1, 1, 1], [x[22], x[28], x[29]], 7, BOOL____00074);
constraint int_lin_eq_reif([1, 1, 1], [x[31], x[32], x[33]], 8, BOOL____00099);
constraint int_lin_eq_reif([1, 1, 1, 1], [x[5], x[6], x[12], x[18]], 6, BOOL____00023);
constraint int_times(a____00024[1], x[6], a____00024[2]);
constraint int_times(a____00024[2], x[12], a____00024[3]);
constraint int_times(a____00024[3], x[18], a____00024[4]);
constraint int_times(a____00051[1], x[14], a____00051[2]);
constraint int_times(a____00051[2], x[19], a____00051[3]);
constraint int_times(a____00051[3], x[20], a____00051[4]);
constraint int_times(a____00075[1], x[28], a____00075[2]);
constraint int_times(a____00075[2], x[29], a____00075[3]);
constraint int_times(a____00100[1], x[32], a____00100[2]);
constraint int_times(a____00100[2], x[33], a____00100[3]);
constraint int_times(x[1], x[7], INT____00004) :: defines_var(INT____00004);
constraint int_times(x[2], x[3], INT____00010) :: defines_var(INT____00010);
constraint int_times(x[4], x[10], INT____00019) :: defines_var(INT____00019);
constraint int_times(x[8], x[9], INT____00032) :: defines_var(INT____00032);
constraint int_times(x[11], x[17], INT____00042) :: defines_var(INT____00042);
constraint int_times(x[15], x[16], INT____00059) :: defines_var(INT____00059);
constraint int_times(x[21], x[27], INT____00067) :: defines_var(INT____00067);
constraint int_times(x[23], x[24], INT____00081) :: defines_var(INT____00081);
constraint int_times(x[25], x[26], INT____00086) :: defines_var(INT____00086);
constraint int_times(x[30], x[36], INT____00094) :: defines_var(INT____00094);
constraint int_times(x[34], x[35], INT____00107) :: defines_var(INT____00107);
solve  :: int_search([x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10], x[11], x[12], x[13], x[14], x[15], x[16], x[17], x[18], x[19], x[20], x[21], x[22], x[23], x[24], x[25], x[26], x[27], x[28], x[29], x[30], x[31], x[32], x[33], x[34], x[35], x[36]], smallest, indomain_max, complete) satisfy;
