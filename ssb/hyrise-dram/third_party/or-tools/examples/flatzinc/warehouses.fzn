predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
array [1..5] of int: capacity = [1, 4, 2, 1, 3];
array [1..50] of int: cost_matrix = [20, 24, 11, 25, 30, 28, 27, 82, 83, 74, 74, 97, 71, 96, 70, 2, 55, 73, 69, 61, 46, 96, 59, 83, 4, 42, 22, 29, 67, 59, 1, 5, 73, 59, 56, 10, 73, 13, 43, 96, 93, 35, 63, 85, 46, 47, 65, 55, 71, 95];
var bool: BOOL____00001 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00002 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00003 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00004 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00005 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00006 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00007 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00008 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00009 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00010 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00012 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00013 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00014 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00015 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00016 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00017 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00018 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00019 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00020 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00021 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00023 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00024 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00025 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00026 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00027 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00028 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00029 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00030 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00031 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00032 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00034 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00035 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00036 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00037 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00038 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00039 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00040 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00041 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00042 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00043 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00045 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00046 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00047 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00048 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00049 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00050 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00051 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00052 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00053 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00054 :: is_defined_var :: var_is_introduced;
var 6..10: INT____00057 :: is_defined_var :: var_is_introduced;
var 11..15: INT____00059 :: is_defined_var :: var_is_introduced;
var 16..20: INT____00061 :: is_defined_var :: var_is_introduced;
var 21..25: INT____00063 :: is_defined_var :: var_is_introduced;
var 26..30: INT____00065 :: is_defined_var :: var_is_introduced;
var 31..35: INT____00067 :: is_defined_var :: var_is_introduced;
var 36..40: INT____00069 :: is_defined_var :: var_is_introduced;
var 41..45: INT____00071 :: is_defined_var :: var_is_introduced;
var 46..50: INT____00073 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00075 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00076 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00077 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00078 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00079 :: is_defined_var :: var_is_introduced;
var 10..1120: INT____00080 :: is_defined_var :: var_is_introduced;
array [1..10] of var 1..97: cost :: output_array([1..10]);
array [1..5] of var bool: open :: output_array([1..5]);
array [1..10] of var 1..5: supplier :: output_array([1..10]);
var 10..1120: total :: output_var = INT____00080;
var int: use____00081;
var int: use____00082;
var int: use____00083;
var int: use____00084;
var int: use____00085;
constraint array_bool_or([BOOL____00010, BOOL____00009, BOOL____00008, BOOL____00007, BOOL____00006, BOOL____00005, BOOL____00004, BOOL____00003, BOOL____00002, BOOL____00001], open[1]);
constraint array_bool_or([BOOL____00021, BOOL____00020, BOOL____00019, BOOL____00018, BOOL____00017, BOOL____00016, BOOL____00015, BOOL____00014, BOOL____00013, BOOL____00012], open[2]);
constraint array_bool_or([BOOL____00032, BOOL____00031, BOOL____00030, BOOL____00029, BOOL____00028, BOOL____00027, BOOL____00026, BOOL____00025, BOOL____00024, BOOL____00023], open[3]);
constraint array_bool_or([BOOL____00043, BOOL____00042, BOOL____00041, BOOL____00040, BOOL____00039, BOOL____00038, BOOL____00037, BOOL____00036, BOOL____00035, BOOL____00034], open[4]);
constraint array_bool_or([BOOL____00054, BOOL____00053, BOOL____00052, BOOL____00051, BOOL____00050, BOOL____00049, BOOL____00048, BOOL____00047, BOOL____00046, BOOL____00045], open[5]);
constraint array_int_element(INT____00057, cost_matrix, cost[2]);
constraint array_int_element(INT____00059, cost_matrix, cost[3]);
constraint array_int_element(INT____00061, cost_matrix, cost[4]);
constraint array_int_element(INT____00063, cost_matrix, cost[5]);
constraint array_int_element(INT____00065, cost_matrix, cost[6]);
constraint array_int_element(INT____00067, cost_matrix, cost[7]);
constraint array_int_element(INT____00069, cost_matrix, cost[8]);
constraint array_int_element(INT____00071, cost_matrix, cost[9]);
constraint array_int_element(INT____00073, cost_matrix, cost[10]);
constraint array_int_element(supplier[1], cost_matrix, cost[1]);
constraint bool2int(open[1], INT____00075) :: defines_var(INT____00075);
constraint bool2int(open[2], INT____00076) :: defines_var(INT____00076);
constraint bool2int(open[3], INT____00077) :: defines_var(INT____00077);
constraint bool2int(open[4], INT____00078) :: defines_var(INT____00078);
constraint bool2int(open[5], INT____00079) :: defines_var(INT____00079);
constraint count_eq(supplier, 1, use____00081);
constraint count_eq(supplier, 2, use____00082);
constraint count_eq(supplier, 3, use____00083);
constraint count_eq(supplier, 4, use____00084);
constraint count_eq(supplier, 5, use____00085);
constraint int_eq_reif(1, supplier[1], BOOL____00001) :: defines_var(BOOL____00001);
constraint int_eq_reif(1, supplier[2], BOOL____00002) :: defines_var(BOOL____00002);
constraint int_eq_reif(1, supplier[3], BOOL____00003) :: defines_var(BOOL____00003);
constraint int_eq_reif(1, supplier[4], BOOL____00004) :: defines_var(BOOL____00004);
constraint int_eq_reif(1, supplier[5], BOOL____00005) :: defines_var(BOOL____00005);
constraint int_eq_reif(1, supplier[6], BOOL____00006) :: defines_var(BOOL____00006);
constraint int_eq_reif(1, supplier[7], BOOL____00007) :: defines_var(BOOL____00007);
constraint int_eq_reif(1, supplier[8], BOOL____00008) :: defines_var(BOOL____00008);
constraint int_eq_reif(1, supplier[9], BOOL____00009) :: defines_var(BOOL____00009);
constraint int_eq_reif(1, supplier[10], BOOL____00010) :: defines_var(BOOL____00010);
constraint int_eq_reif(2, supplier[1], BOOL____00012) :: defines_var(BOOL____00012);
constraint int_eq_reif(2, supplier[2], BOOL____00013) :: defines_var(BOOL____00013);
constraint int_eq_reif(2, supplier[3], BOOL____00014) :: defines_var(BOOL____00014);
constraint int_eq_reif(2, supplier[4], BOOL____00015) :: defines_var(BOOL____00015);
constraint int_eq_reif(2, supplier[5], BOOL____00016) :: defines_var(BOOL____00016);
constraint int_eq_reif(2, supplier[6], BOOL____00017) :: defines_var(BOOL____00017);
constraint int_eq_reif(2, supplier[7], BOOL____00018) :: defines_var(BOOL____00018);
constraint int_eq_reif(2, supplier[8], BOOL____00019) :: defines_var(BOOL____00019);
constraint int_eq_reif(2, supplier[9], BOOL____00020) :: defines_var(BOOL____00020);
constraint int_eq_reif(2, supplier[10], BOOL____00021) :: defines_var(BOOL____00021);
constraint int_eq_reif(3, supplier[1], BOOL____00023) :: defines_var(BOOL____00023);
constraint int_eq_reif(3, supplier[2], BOOL____00024) :: defines_var(BOOL____00024);
constraint int_eq_reif(3, supplier[3], BOOL____00025) :: defines_var(BOOL____00025);
constraint int_eq_reif(3, supplier[4], BOOL____00026) :: defines_var(BOOL____00026);
constraint int_eq_reif(3, supplier[5], BOOL____00027) :: defines_var(BOOL____00027);
constraint int_eq_reif(3, supplier[6], BOOL____00028) :: defines_var(BOOL____00028);
constraint int_eq_reif(3, supplier[7], BOOL____00029) :: defines_var(BOOL____00029);
constraint int_eq_reif(3, supplier[8], BOOL____00030) :: defines_var(BOOL____00030);
constraint int_eq_reif(3, supplier[9], BOOL____00031) :: defines_var(BOOL____00031);
constraint int_eq_reif(3, supplier[10], BOOL____00032) :: defines_var(BOOL____00032);
constraint int_eq_reif(4, supplier[1], BOOL____00034) :: defines_var(BOOL____00034);
constraint int_eq_reif(4, supplier[2], BOOL____00035) :: defines_var(BOOL____00035);
constraint int_eq_reif(4, supplier[3], BOOL____00036) :: defines_var(BOOL____00036);
constraint int_eq_reif(4, supplier[4], BOOL____00037) :: defines_var(BOOL____00037);
constraint int_eq_reif(4, supplier[5], BOOL____00038) :: defines_var(BOOL____00038);
constraint int_eq_reif(4, supplier[6], BOOL____00039) :: defines_var(BOOL____00039);
constraint int_eq_reif(4, supplier[7], BOOL____00040) :: defines_var(BOOL____00040);
constraint int_eq_reif(4, supplier[8], BOOL____00041) :: defines_var(BOOL____00041);
constraint int_eq_reif(4, supplier[9], BOOL____00042) :: defines_var(BOOL____00042);
constraint int_eq_reif(4, supplier[10], BOOL____00043) :: defines_var(BOOL____00043);
constraint int_eq_reif(5, supplier[1], BOOL____00045) :: defines_var(BOOL____00045);
constraint int_eq_reif(5, supplier[2], BOOL____00046) :: defines_var(BOOL____00046);
constraint int_eq_reif(5, supplier[3], BOOL____00047) :: defines_var(BOOL____00047);
constraint int_eq_reif(5, supplier[4], BOOL____00048) :: defines_var(BOOL____00048);
constraint int_eq_reif(5, supplier[5], BOOL____00049) :: defines_var(BOOL____00049);
constraint int_eq_reif(5, supplier[6], BOOL____00050) :: defines_var(BOOL____00050);
constraint int_eq_reif(5, supplier[7], BOOL____00051) :: defines_var(BOOL____00051);
constraint int_eq_reif(5, supplier[8], BOOL____00052) :: defines_var(BOOL____00052);
constraint int_eq_reif(5, supplier[9], BOOL____00053) :: defines_var(BOOL____00053);
constraint int_eq_reif(5, supplier[10], BOOL____00054) :: defines_var(BOOL____00054);
constraint int_le(use____00081, 1);
constraint int_le(use____00082, 4);
constraint int_le(use____00083, 2);
constraint int_le(use____00084, 1);
constraint int_le(use____00085, 3);
constraint int_lin_eq([-1, 1], [INT____00057, supplier[2]], -5) :: defines_var(INT____00057) :: domain;
constraint int_lin_eq([-1, 1], [INT____00059, supplier[3]], -10) :: defines_var(INT____00059) :: domain;
constraint int_lin_eq([-1, 1], [INT____00061, supplier[4]], -15) :: defines_var(INT____00061) :: domain;
constraint int_lin_eq([-1, 1], [INT____00063, supplier[5]], -20) :: defines_var(INT____00063) :: domain;
constraint int_lin_eq([-1, 1], [INT____00065, supplier[6]], -25) :: defines_var(INT____00065) :: domain;
constraint int_lin_eq([-1, 1], [INT____00067, supplier[7]], -30) :: defines_var(INT____00067) :: domain;
constraint int_lin_eq([-1, 1], [INT____00069, supplier[8]], -35) :: defines_var(INT____00069) :: domain;
constraint int_lin_eq([-1, 1], [INT____00071, supplier[9]], -40) :: defines_var(INT____00071) :: domain;
constraint int_lin_eq([-1, 1], [INT____00073, supplier[10]], -45) :: defines_var(INT____00073) :: domain;
constraint int_lin_eq([-1, 30, 30, 30, 30, 30, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [INT____00080, INT____00075, INT____00076, INT____00077, INT____00078, INT____00079, cost[1], cost[2], cost[3], cost[4], cost[5], cost[6], cost[7], cost[8], cost[9], cost[10]], 0) :: defines_var(INT____00080);
solve  :: int_search([supplier[1], supplier[2], supplier[3], supplier[4], supplier[5], supplier[6], supplier[7], supplier[8], supplier[9], supplier[10], cost[1], cost[2], cost[3], cost[4], cost[5], cost[6], cost[7], cost[8], cost[9], cost[10], INT____00075, INT____00076, INT____00077, INT____00078, INT____00079], first_fail, indomain_split, complete) minimize INT____00080;
