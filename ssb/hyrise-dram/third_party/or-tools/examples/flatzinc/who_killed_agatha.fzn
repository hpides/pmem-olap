predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var bool: BOOL____00005 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00007 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00009 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00011 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00013 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00015 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00016 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00017 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00018 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00019 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00020 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00021 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00022 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00023 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00024 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00025 :: is_defined_var :: var_is_introduced;
var 1..9: INT____00001 :: is_defined_var :: var_is_introduced;
array [1..9] of var 0..1: hates :: output_array([1..3, 1..3]);
array [1..9] of var 0..1: richer :: output_array([1..3, 1..3]);
var 1..3: the_killer :: output_var;
var 1..1: the_victim :: output_var = 1;
constraint array_var_int_element(INT____00001, hates, 1);
constraint array_var_int_element(INT____00001, richer, 0);
constraint bool_le(BOOL____00005, BOOL____00024);
constraint bool_le(BOOL____00007, BOOL____00025);
constraint bool_le(BOOL____00017, BOOL____00016);
constraint bool_le(BOOL____00017, BOOL____00022);
constraint bool_le(BOOL____00019, BOOL____00018);
constraint bool_le(BOOL____00019, BOOL____00024);
constraint bool_le(BOOL____00021, BOOL____00020);
constraint bool_le(BOOL____00021, BOOL____00025);
constraint bool_le(BOOL____00023, BOOL____00022);
constraint int_eq(hates[1], 1);
constraint int_eq(hates[2], 0);
constraint int_eq(hates[3], 1);
constraint int_eq(richer[1], 0);
constraint int_eq(richer[5], 0);
constraint int_eq(richer[9], 0);
constraint int_eq_reif(hates[1], 1, BOOL____00017) :: defines_var(BOOL____00017);
constraint int_eq_reif(hates[2], 1, BOOL____00019) :: defines_var(BOOL____00019);
constraint int_eq_reif(hates[3], 1, BOOL____00021) :: defines_var(BOOL____00021);
constraint int_eq_reif(hates[4], 1, BOOL____00022) :: defines_var(BOOL____00022);
constraint int_eq_reif(hates[5], 1, BOOL____00024) :: defines_var(BOOL____00024);
constraint int_eq_reif(hates[6], 1, BOOL____00025) :: defines_var(BOOL____00025);
constraint int_eq_reif(hates[7], 0, BOOL____00016) :: defines_var(BOOL____00016);
constraint int_eq_reif(hates[8], 0, BOOL____00018) :: defines_var(BOOL____00018);
constraint int_eq_reif(hates[9], 0, BOOL____00020) :: defines_var(BOOL____00020);
constraint int_eq_reif(richer[1], 0, BOOL____00023) :: defines_var(BOOL____00023);
constraint int_eq_reif(richer[2], 0, BOOL____00009) :: defines_var(BOOL____00009);
constraint int_eq_reif(richer[2], 1, BOOL____00005);
constraint int_eq_reif(richer[3], 0, BOOL____00013) :: defines_var(BOOL____00013);
constraint int_eq_reif(richer[3], 1, BOOL____00007);
constraint int_eq_reif(richer[4], 0, BOOL____00005) :: defines_var(BOOL____00005);
constraint int_eq_reif(richer[4], 1, BOOL____00009);
constraint int_eq_reif(richer[6], 0, BOOL____00015) :: defines_var(BOOL____00015);
constraint int_eq_reif(richer[6], 1, BOOL____00011);
constraint int_eq_reif(richer[7], 0, BOOL____00007) :: defines_var(BOOL____00007);
constraint int_eq_reif(richer[7], 1, BOOL____00013);
constraint int_eq_reif(richer[8], 0, BOOL____00011) :: defines_var(BOOL____00011);
constraint int_eq_reif(richer[8], 1, BOOL____00015);
constraint int_lin_eq([-1, 3, 1], [INT____00001, the_killer, the_victim], 3) :: defines_var(INT____00001) :: domain;
constraint int_lin_le([1, 1, 1], [hates[1], hates[2], hates[3]], 2);
constraint int_lin_le([1, 1, 1], [hates[4], hates[5], hates[6]], 2);
constraint int_lin_le([1, 1, 1], [hates[7], hates[8], hates[9]], 2);
solve satisfy;
