array [1..36] of int: game = [-1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, -1, -1, 2, 0, 0, 2, -1, -1, 2, 0, 0, 2, -1, -1, 2, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1];
var bool: BOOL____00001 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00002 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00003 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00004 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00005 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00006 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00007 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00008 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00009 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00010 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00011 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00012 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00013 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00014 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00027 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00028 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00029 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00030 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00043 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00044 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00045 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00046 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00059 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00060 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00061 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00062 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00075 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00076 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00077 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00078 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00079 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00080 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00081 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00082 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00083 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00084 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00085 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00086 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00087 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00088 :: is_defined_var :: var_is_introduced;
array [1..36] of var 0..1: mines :: output_array([1..6, 1..6]);
constraint int_eq_reif(mines[1], 0, BOOL____00001) :: defines_var(BOOL____00001);
constraint int_eq_reif(mines[1], 1, BOOL____00002) :: defines_var(BOOL____00002);
constraint int_eq_reif(mines[2], 0, BOOL____00003) :: defines_var(BOOL____00003);
constraint int_eq_reif(mines[2], 1, BOOL____00004) :: defines_var(BOOL____00004);
constraint int_eq_reif(mines[3], 0, BOOL____00005) :: defines_var(BOOL____00005);
constraint int_eq_reif(mines[3], 1, BOOL____00006) :: defines_var(BOOL____00006);
constraint int_eq_reif(mines[4], 0, BOOL____00007) :: defines_var(BOOL____00007);
constraint int_eq_reif(mines[4], 1, BOOL____00008) :: defines_var(BOOL____00008);
constraint int_eq_reif(mines[5], 0, BOOL____00009) :: defines_var(BOOL____00009);
constraint int_eq_reif(mines[5], 1, BOOL____00010) :: defines_var(BOOL____00010);
constraint int_eq_reif(mines[6], 0, BOOL____00011) :: defines_var(BOOL____00011);
constraint int_eq_reif(mines[6], 1, BOOL____00012) :: defines_var(BOOL____00012);
constraint int_eq_reif(mines[7], 0, BOOL____00013) :: defines_var(BOOL____00013);
constraint int_eq_reif(mines[7], 1, BOOL____00014) :: defines_var(BOOL____00014);
constraint int_eq_reif(mines[8], 0, true);
constraint int_eq_reif(mines[8], 1, false);
constraint int_eq_reif(mines[9], 0, true);
constraint int_eq_reif(mines[9], 1, false);
constraint int_eq_reif(mines[10], 0, true);
constraint int_eq_reif(mines[10], 1, false);
constraint int_eq_reif(mines[11], 0, true);
constraint int_eq_reif(mines[11], 1, false);
constraint int_eq_reif(mines[12], 0, BOOL____00027) :: defines_var(BOOL____00027);
constraint int_eq_reif(mines[12], 1, BOOL____00028) :: defines_var(BOOL____00028);
constraint int_eq_reif(mines[13], 0, BOOL____00029) :: defines_var(BOOL____00029);
constraint int_eq_reif(mines[13], 1, BOOL____00030) :: defines_var(BOOL____00030);
constraint int_eq_reif(mines[14], 0, true);
constraint int_eq_reif(mines[14], 1, false);
constraint int_eq_reif(mines[15], 0, true);
constraint int_eq_reif(mines[15], 1, false);
constraint int_eq_reif(mines[16], 0, true);
constraint int_eq_reif(mines[16], 1, false);
constraint int_eq_reif(mines[17], 0, true);
constraint int_eq_reif(mines[17], 1, false);
constraint int_eq_reif(mines[18], 0, BOOL____00043) :: defines_var(BOOL____00043);
constraint int_eq_reif(mines[18], 1, BOOL____00044) :: defines_var(BOOL____00044);
constraint int_eq_reif(mines[19], 0, BOOL____00045) :: defines_var(BOOL____00045);
constraint int_eq_reif(mines[19], 1, BOOL____00046) :: defines_var(BOOL____00046);
constraint int_eq_reif(mines[20], 0, true);
constraint int_eq_reif(mines[20], 1, false);
constraint int_eq_reif(mines[21], 0, true);
constraint int_eq_reif(mines[21], 1, false);
constraint int_eq_reif(mines[22], 0, true);
constraint int_eq_reif(mines[22], 1, false);
constraint int_eq_reif(mines[23], 0, true);
constraint int_eq_reif(mines[23], 1, false);
constraint int_eq_reif(mines[24], 0, BOOL____00059) :: defines_var(BOOL____00059);
constraint int_eq_reif(mines[24], 1, BOOL____00060) :: defines_var(BOOL____00060);
constraint int_eq_reif(mines[25], 0, BOOL____00061) :: defines_var(BOOL____00061);
constraint int_eq_reif(mines[25], 1, BOOL____00062) :: defines_var(BOOL____00062);
constraint int_eq_reif(mines[26], 0, true);
constraint int_eq_reif(mines[26], 1, false);
constraint int_eq_reif(mines[27], 0, true);
constraint int_eq_reif(mines[27], 1, false);
constraint int_eq_reif(mines[28], 0, true);
constraint int_eq_reif(mines[28], 1, false);
constraint int_eq_reif(mines[29], 0, true);
constraint int_eq_reif(mines[29], 1, false);
constraint int_eq_reif(mines[30], 0, BOOL____00075) :: defines_var(BOOL____00075);
constraint int_eq_reif(mines[30], 1, BOOL____00076) :: defines_var(BOOL____00076);
constraint int_eq_reif(mines[31], 0, BOOL____00077) :: defines_var(BOOL____00077);
constraint int_eq_reif(mines[31], 1, BOOL____00078) :: defines_var(BOOL____00078);
constraint int_eq_reif(mines[32], 0, BOOL____00079) :: defines_var(BOOL____00079);
constraint int_eq_reif(mines[32], 1, BOOL____00080) :: defines_var(BOOL____00080);
constraint int_eq_reif(mines[33], 0, BOOL____00081) :: defines_var(BOOL____00081);
constraint int_eq_reif(mines[33], 1, BOOL____00082) :: defines_var(BOOL____00082);
constraint int_eq_reif(mines[34], 0, BOOL____00083) :: defines_var(BOOL____00083);
constraint int_eq_reif(mines[34], 1, BOOL____00084) :: defines_var(BOOL____00084);
constraint int_eq_reif(mines[35], 0, BOOL____00085) :: defines_var(BOOL____00085);
constraint int_eq_reif(mines[35], 1, BOOL____00086) :: defines_var(BOOL____00086);
constraint int_eq_reif(mines[36], 0, BOOL____00087) :: defines_var(BOOL____00087);
constraint int_eq_reif(mines[36], 1, BOOL____00088) :: defines_var(BOOL____00088);
constraint int_lin_eq_reif([-1, -1, -1, -1, -1, -1, -1, -1, -1], [mines[1], mines[2], mines[3], mines[7], mines[8], mines[9], mines[13], mines[14], mines[15]], -2, true);
constraint int_lin_eq_reif([-1, -1, -1, -1, -1, -1, -1, -1, -1], [mines[2], mines[3], mines[4], mines[8], mines[9], mines[10], mines[14], mines[15], mines[16]], -2, true);
constraint int_lin_eq_reif([-1, -1, -1, -1, -1, -1, -1, -1, -1], [mines[3], mines[4], mines[5], mines[9], mines[10], mines[11], mines[15], mines[16], mines[17]], -2, true);
constraint int_lin_eq_reif([-1, -1, -1, -1, -1, -1, -1, -1, -1], [mines[4], mines[5], mines[6], mines[10], mines[11], mines[12], mines[16], mines[17], mines[18]], -2, true);
constraint int_lin_eq_reif([-1, -1, -1, -1, -1, -1, -1, -1, -1], [mines[7], mines[8], mines[9], mines[13], mines[14], mines[15], mines[19], mines[20], mines[21]], -2, true);
constraint int_lin_eq_reif([-1, -1, -1, -1, -1, -1, -1, -1, -1], [mines[8], mines[9], mines[10], mines[14], mines[15], mines[16], mines[20], mines[21], mines[22]], 0, true);
constraint int_lin_eq_reif([-1, -1, -1, -1, -1, -1, -1, -1, -1], [mines[9], mines[10], mines[11], mines[15], mines[16], mines[17], mines[21], mines[22], mines[23]], 0, true);
constraint int_lin_eq_reif([-1, -1, -1, -1, -1, -1, -1, -1, -1], [mines[10], mines[11], mines[12], mines[16], mines[17], mines[18], mines[22], mines[23], mines[24]], -2, true);
constraint int_lin_eq_reif([-1, -1, -1, -1, -1, -1, -1, -1, -1], [mines[13], mines[14], mines[15], mines[19], mines[20], mines[21], mines[25], mines[26], mines[27]], -2, true);
constraint int_lin_eq_reif([-1, -1, -1, -1, -1, -1, -1, -1, -1], [mines[14], mines[15], mines[16], mines[20], mines[21], mines[22], mines[26], mines[27], mines[28]], 0, true);
constraint int_lin_eq_reif([-1, -1, -1, -1, -1, -1, -1, -1, -1], [mines[15], mines[16], mines[17], mines[21], mines[22], mines[23], mines[27], mines[28], mines[29]], 0, true);
constraint int_lin_eq_reif([-1, -1, -1, -1, -1, -1, -1, -1, -1], [mines[16], mines[17], mines[18], mines[22], mines[23], mines[24], mines[28], mines[29], mines[30]], -2, true);
constraint int_lin_eq_reif([-1, -1, -1, -1, -1, -1, -1, -1, -1], [mines[19], mines[20], mines[21], mines[25], mines[26], mines[27], mines[31], mines[32], mines[33]], -2, true);
constraint int_lin_eq_reif([-1, -1, -1, -1, -1, -1, -1, -1, -1], [mines[20], mines[21], mines[22], mines[26], mines[27], mines[28], mines[32], mines[33], mines[34]], -2, true);
constraint int_lin_eq_reif([-1, -1, -1, -1, -1, -1, -1, -1, -1], [mines[21], mines[22], mines[23], mines[27], mines[28], mines[29], mines[33], mines[34], mines[35]], -2, true);
constraint int_lin_eq_reif([-1, -1, -1, -1, -1, -1, -1, -1, -1], [mines[22], mines[23], mines[24], mines[28], mines[29], mines[30], mines[34], mines[35], mines[36]], -2, true);
solve  :: int_search([mines[1], mines[2], mines[3], mines[4], mines[5], mines[6], mines[7], mines[8], mines[9], mines[10], mines[11], mines[12], mines[13], mines[14], mines[15], mines[16], mines[17], mines[18], mines[19], mines[20], mines[21], mines[22], mines[23], mines[24], mines[25], mines[26], mines[27], mines[28], mines[29], mines[30], mines[31], mines[32], mines[33], mines[34], mines[35], mines[36]], first_fail, indomain, complete) satisfy;
