predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..81] of int: rounds = [0, 10, 3, 10, 1, 4, 10, 2, 2, 10, 0, 4, 2, 10, 3, 10, 1, 1, 10, 2, 0, 10, 1, 10, 3, 4, 4, 10, 1, 10, 0, 2, 10, 3, 4, 3, 10, 4, 10, 3, 0, 10, 1, 2, 10, 1, 4, 3, 10, 10, 0, 2, 10, 10, 10, 3, 10, 2, 4, 1, 0, 10, 10, 4, 10, 3, 1, 10, 2, 10, 0, 10, 1, 2, 3, 4, 10, 2, 10, 10, 0];
array [1..9] of int: spouses = [2, 1, 4, 3, 6, 5, 8, 7, 0];
var 10..18: INT____00002 :: is_defined_var :: var_is_introduced;
var 19..27: INT____00004 :: is_defined_var :: var_is_introduced;
var 28..36: INT____00006 :: is_defined_var :: var_is_introduced;
var 37..45: INT____00008 :: is_defined_var :: var_is_introduced;
var 46..54: INT____00010 :: is_defined_var :: var_is_introduced;
var 55..63: INT____00012 :: is_defined_var :: var_is_introduced;
var 64..72: INT____00014 :: is_defined_var :: var_is_introduced;
var 73..81: INT____00016 :: is_defined_var :: var_is_introduced;
var 10..18: INT____00021 :: is_defined_var :: var_is_introduced;
var 19..27: INT____00024 :: is_defined_var :: var_is_introduced;
var 28..36: INT____00027 :: is_defined_var :: var_is_introduced;
var 37..45: INT____00030 :: is_defined_var :: var_is_introduced;
var 46..54: INT____00033 :: is_defined_var :: var_is_introduced;
var 55..63: INT____00036 :: is_defined_var :: var_is_introduced;
var 64..72: INT____00039 :: is_defined_var :: var_is_introduced;
var 73..81: INT____00042 :: is_defined_var :: var_is_introduced;
var 9..90: INT____00044 :: is_defined_var :: var_is_introduced;
var 1..9: j____00018;
var 1..9: j____00020;
var 1..9: j____00023;
var 1..9: j____00026;
var 1..9: j____00029;
var 1..9: j____00032;
var 1..9: j____00035;
var 1..9: j____00038;
var 1..9: j____00041;
array [1..9] of var 1..10: santa_distance :: output_array([1..9]);
array [1..9] of var 1..9: santas :: output_array([1..9]);
var 9..90: z :: output_var = INT____00044;
constraint all_different_int(santas);
constraint array_int_element(INT____00002, rounds, santa_distance[2]);
constraint array_int_element(INT____00004, rounds, santa_distance[3]);
constraint array_int_element(INT____00006, rounds, santa_distance[4]);
constraint array_int_element(INT____00008, rounds, santa_distance[5]);
constraint array_int_element(INT____00010, rounds, santa_distance[6]);
constraint array_int_element(INT____00012, rounds, santa_distance[7]);
constraint array_int_element(INT____00014, rounds, santa_distance[8]);
constraint array_int_element(INT____00016, rounds, santa_distance[9]);
constraint array_int_element(INT____00021, rounds, 1);
constraint array_int_element(INT____00024, rounds, 1);
constraint array_int_element(INT____00027, rounds, 1);
constraint array_int_element(INT____00030, rounds, 1);
constraint array_int_element(INT____00033, rounds, 1);
constraint array_int_element(INT____00036, rounds, 1);
constraint array_int_element(INT____00039, rounds, 1);
constraint array_int_element(INT____00042, rounds, 1);
constraint array_int_element(j____00018, rounds, 1);
constraint array_int_element(santas[1], rounds, santa_distance[1]);
constraint int_lin_eq([-1, 1], [INT____00002, santas[2]], -9) :: defines_var(INT____00002) :: domain;
constraint int_lin_eq([-1, 1], [INT____00004, santas[3]], -18) :: defines_var(INT____00004) :: domain;
constraint int_lin_eq([-1, 1], [INT____00006, santas[4]], -27) :: defines_var(INT____00006) :: domain;
constraint int_lin_eq([-1, 1], [INT____00008, santas[5]], -36) :: defines_var(INT____00008) :: domain;
constraint int_lin_eq([-1, 1], [INT____00010, santas[6]], -45) :: defines_var(INT____00010) :: domain;
constraint int_lin_eq([-1, 1], [INT____00012, santas[7]], -54) :: defines_var(INT____00012) :: domain;
constraint int_lin_eq([-1, 1], [INT____00014, santas[8]], -63) :: defines_var(INT____00014) :: domain;
constraint int_lin_eq([-1, 1], [INT____00016, santas[9]], -72) :: defines_var(INT____00016) :: domain;
constraint int_lin_eq([-1, 1], [INT____00021, j____00020], -9) :: defines_var(INT____00021) :: domain;
constraint int_lin_eq([-1, 1], [INT____00024, j____00023], -18) :: defines_var(INT____00024) :: domain;
constraint int_lin_eq([-1, 1], [INT____00027, j____00026], -27) :: defines_var(INT____00027) :: domain;
constraint int_lin_eq([-1, 1], [INT____00030, j____00029], -36) :: defines_var(INT____00030) :: domain;
constraint int_lin_eq([-1, 1], [INT____00033, j____00032], -45) :: defines_var(INT____00033) :: domain;
constraint int_lin_eq([-1, 1], [INT____00036, j____00035], -54) :: defines_var(INT____00036) :: domain;
constraint int_lin_eq([-1, 1], [INT____00039, j____00038], -63) :: defines_var(INT____00039) :: domain;
constraint int_lin_eq([-1, 1], [INT____00042, j____00041], -72) :: defines_var(INT____00042) :: domain;
constraint int_lin_eq([-1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [INT____00044, santa_distance[1], santa_distance[2], santa_distance[3], santa_distance[4], santa_distance[5], santa_distance[6], santa_distance[7], santa_distance[8], santa_distance[9]], 0) :: defines_var(INT____00044);
constraint int_ne(santas[1], 1);
constraint int_ne(santas[1], 2);
constraint int_ne(santas[1], j____00018);
constraint int_ne(santas[2], 1);
constraint int_ne(santas[2], 2);
constraint int_ne(santas[2], j____00020);
constraint int_ne(santas[3], 3);
constraint int_ne(santas[3], 4);
constraint int_ne(santas[3], j____00023);
constraint int_ne(santas[4], 3);
constraint int_ne(santas[4], 4);
constraint int_ne(santas[4], j____00026);
constraint int_ne(santas[5], 5);
constraint int_ne(santas[5], 6);
constraint int_ne(santas[5], j____00029);
constraint int_ne(santas[6], 5);
constraint int_ne(santas[6], 6);
constraint int_ne(santas[6], j____00032);
constraint int_ne(santas[7], 7);
constraint int_ne(santas[7], 8);
constraint int_ne(santas[7], j____00035);
constraint int_ne(santas[8], 7);
constraint int_ne(santas[8], 8);
constraint int_ne(santas[8], j____00038);
constraint int_ne(santas[9], 9);
constraint int_ne(santas[9], j____00041);
solve  :: int_search([santa_distance[1], santa_distance[2], santa_distance[3], santa_distance[4], santa_distance[5], santa_distance[6], santa_distance[7], santa_distance[8], santa_distance[9], santas[1], santas[2], santas[3], santas[4], santas[5], santas[6], santas[7], santas[8], santas[9], INT____00044], first_fail, indomain_min, complete) maximize INT____00044;
