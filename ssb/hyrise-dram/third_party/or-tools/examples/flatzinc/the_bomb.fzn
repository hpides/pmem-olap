var bool: BOOL____00001 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00002 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00003 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00004 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00005 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00006 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00007 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00008 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00009 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00010 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00011 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00012 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00013 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00014 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00015 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00016 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00017 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00018 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00019 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00020 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00021 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00022 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00023 :: is_defined_var :: var_is_introduced;
array [1..7] of var bool: x :: output_array([1..7]);
constraint array_bool_and([BOOL____00008, BOOL____00012], BOOL____00023) :: defines_var(BOOL____00023);
constraint array_bool_and([BOOL____00018, BOOL____00012], BOOL____00019) :: defines_var(BOOL____00019);
constraint array_bool_and([x[1], x[7]], BOOL____00015) :: defines_var(BOOL____00015);
constraint array_bool_and([x[4], x[3]], BOOL____00010) :: defines_var(BOOL____00010);
constraint array_bool_and([BOOL____00002, BOOL____00003, BOOL____00006], BOOL____00007) :: defines_var(BOOL____00007);
constraint array_bool_and([BOOL____00002, x[3], BOOL____00001], BOOL____00004) :: defines_var(BOOL____00004);
constraint array_bool_and([BOOL____00012, x[1], x[5]], BOOL____00013) :: defines_var(BOOL____00013);
constraint array_bool_and([BOOL____00016, BOOL____00001, BOOL____00006], BOOL____00021) :: defines_var(BOOL____00021);
constraint array_bool_and([x[1], x[6], x[7]], BOOL____00011) :: defines_var(BOOL____00011);
constraint array_bool_and([x[3], BOOL____00008, x[2]], BOOL____00009) :: defines_var(BOOL____00009);
constraint array_bool_and([x[5], BOOL____00006, x[4]], BOOL____00014) :: defines_var(BOOL____00014);
constraint array_bool_and([x[7], BOOL____00003, BOOL____00002], BOOL____00005) :: defines_var(BOOL____00005);
constraint array_bool_and([BOOL____00012, BOOL____00016, x[1], x[2]], BOOL____00022) :: defines_var(BOOL____00022);
constraint array_bool_and([x[3], x[6], BOOL____00016, x[2]], BOOL____00017) :: defines_var(BOOL____00017);
constraint array_bool_or([x[3], x[4]], BOOL____00018) :: defines_var(BOOL____00018);
constraint array_bool_or([BOOL____00023, BOOL____00022, BOOL____00021, BOOL____00020, BOOL____00019, BOOL____00017, BOOL____00015, BOOL____00014, BOOL____00013, BOOL____00011, BOOL____00011, BOOL____00010, BOOL____00009, BOOL____00007, BOOL____00004, BOOL____00005], false);
constraint bool_eq_reif(x[1], false, BOOL____00003) :: defines_var(BOOL____00003);
constraint bool_eq_reif(x[2], false, BOOL____00001) :: defines_var(BOOL____00001);
constraint bool_eq_reif(x[3], false, BOOL____00006) :: defines_var(BOOL____00006);
constraint bool_eq_reif(x[4], false, BOOL____00002) :: defines_var(BOOL____00002);
constraint bool_eq_reif(x[5], false, BOOL____00016) :: defines_var(BOOL____00016);
constraint bool_eq_reif(x[6], false, BOOL____00008) :: defines_var(BOOL____00008);
constraint bool_eq_reif(x[7], false, BOOL____00012) :: defines_var(BOOL____00012);
constraint bool_xor(x[6], x[7], BOOL____00020) :: defines_var(BOOL____00020);
solve satisfy;
