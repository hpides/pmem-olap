predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..256] of int: distances = [0, 509, 501, 312, 1019, 736, 656, 60, 1039, 726, 2314, 479, 448, 479, 619, 150, 509, 0, 126, 474, 1526, 1226, 1133, 532, 1449, 1122, 2789, 958, 941, 978, 1127, 542, 501, 126, 0, 541, 1516, 1184, 1084, 536, 1371, 1045, 2728, 913, 904, 946, 1115, 499, 312, 474, 541, 0, 1157, 980, 919, 271, 1333, 1029, 2553, 751, 704, 720, 783, 455, 1019, 1526, 1516, 1157, 0, 478, 583, 996, 858, 855, 1504, 677, 651, 600, 401, 1033, 736, 1226, 1184, 980, 478, 0, 115, 740, 470, 379, 1581, 271, 289, 261, 308, 687, 656, 1133, 1084, 919, 583, 115, 0, 667, 455, 288, 1661, 177, 216, 207, 343, 592, 60, 532, 536, 271, 996, 740, 667, 0, 1066, 759, 2320, 493, 454, 479, 598, 206, 1039, 1449, 1371, 1333, 858, 470, 455, 1066, 0, 328, 1387, 591, 650, 656, 776, 933, 726, 1122, 1045, 1029, 855, 379, 288, 759, 328, 0, 1697, 333, 400, 427, 622, 610, 2314, 2789, 2728, 2553, 1504, 1581, 1661, 2320, 1387, 1697, 0, 1838, 1868, 1841, 1789, 2248, 479, 958, 913, 751, 677, 271, 177, 493, 591, 333, 1838, 0, 68, 105, 336, 417, 448, 941, 904, 704, 651, 289, 216, 454, 650, 400, 1868, 68, 0, 52, 287, 406, 479, 978, 946, 720, 600, 261, 207, 479, 656, 427, 1841, 105, 52, 0, 237, 449, 619, 1127, 1115, 783, 401, 308, 343, 598, 776, 622, 1789, 336, 287, 237, 0, 636, 150, 542, 499, 455, 1033, 687, 592, 206, 933, 610, 2248, 417, 406, 449, 636, 0];
var bool: BOOL____00002 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00004 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00005 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00007 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00008 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00010 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00011 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00013 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00014 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00016 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00017 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00019 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00020 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00022 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00023 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00025 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00026 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00028 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00029 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00031 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00032 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00034 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00035 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00037 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00038 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00040 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00041 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00043 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00044 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00046 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00047 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00049 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00050 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00051 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00052 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00053 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00054 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00055 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00056 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00057 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00058 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00059 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00060 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00061 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00062 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00063 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00064 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00065 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00066 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00067 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00068 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00069 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00070 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00071 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00072 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00073 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00074 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00075 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00076 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00077 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00078 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00079 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00080 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00081 :: is_defined_var :: var_is_introduced;
var 1..16: INT____00003 :: is_defined_var :: var_is_introduced;
var 1..16: INT____00006 :: is_defined_var :: var_is_introduced;
var 1..16: INT____00009 :: is_defined_var :: var_is_introduced;
var 1..16: INT____00012 :: is_defined_var :: var_is_introduced;
var 1..16: INT____00015 :: is_defined_var :: var_is_introduced;
var 1..16: INT____00018 :: is_defined_var :: var_is_introduced;
var 1..16: INT____00021 :: is_defined_var :: var_is_introduced;
var 1..16: INT____00024 :: is_defined_var :: var_is_introduced;
var 1..16: INT____00027 :: is_defined_var :: var_is_introduced;
var 1..16: INT____00030 :: is_defined_var :: var_is_introduced;
var 1..16: INT____00033 :: is_defined_var :: var_is_introduced;
var 1..16: INT____00036 :: is_defined_var :: var_is_introduced;
var 1..16: INT____00039 :: is_defined_var :: var_is_introduced;
var 1..16: INT____00042 :: is_defined_var :: var_is_introduced;
var 1..16: INT____00045 :: is_defined_var :: var_is_introduced;
var 1..16: INT____00048 :: is_defined_var :: var_is_introduced;
var 832..44624: INT____00098 :: is_defined_var :: var_is_introduced;
array [1..16] of var 52..2789: d;
var 52..2248: INT____00097 :: var_is_introduced = d[16];
var 52..1789: INT____00096 :: var_is_introduced = d[15];
var 52..1841: INT____00095 :: var_is_introduced = d[14];
var 52..1868: INT____00094 :: var_is_introduced = d[13];
var 52..1838: INT____00093 :: var_is_introduced = d[12];
var 52..1697: INT____00091 :: var_is_introduced = d[10];
var 52..1449: INT____00090 :: var_is_introduced = d[9];
var 52..2320: INT____00089 :: var_is_introduced = d[8];
var 52..1661: INT____00088 :: var_is_introduced = d[7];
var 52..1581: INT____00087 :: var_is_introduced = d[6];
var 52..1526: INT____00086 :: var_is_introduced = d[5];
var 52..2553: INT____00085 :: var_is_introduced = d[4];
var 52..2728: INT____00084 :: var_is_introduced = d[3];
var 52..2314: INT____00082 :: var_is_introduced = d[1];
var 832..44624: distance :: output_var = INT____00098;
array [1..16] of var 1..16: order____00001;
array [1..16] of var 1..16: x :: output_array([1..16]);
constraint all_different_int(order____00001);
constraint all_different_int(x);
constraint array_int_element(x[1], [0, 509, 501, 312, 1019, 736, 656, 60, 1039, 726, 2314, 479, 448, 479, 619, 150], d[1]);
constraint array_int_element(x[2], [509, 0, 126, 474, 1526, 1226, 1133, 532, 1449, 1122, 2789, 958, 941, 978, 1127, 542], d[2]);
constraint array_int_element(x[3], [501, 126, 0, 541, 1516, 1184, 1084, 536, 1371, 1045, 2728, 913, 904, 946, 1115, 499], d[3]);
constraint array_int_element(x[4], [312, 474, 541, 0, 1157, 980, 919, 271, 1333, 1029, 2553, 751, 704, 720, 783, 455], d[4]);
constraint array_int_element(x[5], [1019, 1526, 1516, 1157, 0, 478, 583, 996, 858, 855, 1504, 677, 651, 600, 401, 1033], d[5]);
constraint array_int_element(x[6], [736, 1226, 1184, 980, 478, 0, 115, 740, 470, 379, 1581, 271, 289, 261, 308, 687], d[6]);
constraint array_int_element(x[7], [656, 1133, 1084, 919, 583, 115, 0, 667, 455, 288, 1661, 177, 216, 207, 343, 592], d[7]);
constraint array_int_element(x[8], [60, 532, 536, 271, 996, 740, 667, 0, 1066, 759, 2320, 493, 454, 479, 598, 206], d[8]);
constraint array_int_element(x[9], [1039, 1449, 1371, 1333, 858, 470, 455, 1066, 0, 328, 1387, 591, 650, 656, 776, 933], d[9]);
constraint array_int_element(x[10], [726, 1122, 1045, 1029, 855, 379, 288, 759, 328, 0, 1697, 333, 400, 427, 622, 610], d[10]);
constraint array_int_element(x[11], [2314, 2789, 2728, 2553, 1504, 1581, 1661, 2320, 1387, 1697, 0, 1838, 1868, 1841, 1789, 2248], d[11]);
constraint array_int_element(x[12], [479, 958, 913, 751, 677, 271, 177, 493, 591, 333, 1838, 0, 68, 105, 336, 417], d[12]);
constraint array_int_element(x[13], [448, 941, 904, 704, 651, 289, 216, 454, 650, 400, 1868, 68, 0, 52, 287, 406], d[13]);
constraint array_int_element(x[14], [479, 978, 946, 720, 600, 261, 207, 479, 656, 427, 1841, 105, 52, 0, 237, 449], d[14]);
constraint array_int_element(x[15], [619, 1127, 1115, 783, 401, 308, 343, 598, 776, 622, 1789, 336, 287, 237, 0, 636], d[15]);
constraint array_int_element(x[16], [150, 542, 499, 455, 1033, 687, 592, 206, 933, 610, 2248, 417, 406, 449, 636, 0], d[16]);
constraint array_var_int_element(x[1], order____00001, INT____00003) :: defines_var(INT____00003);
constraint array_var_int_element(x[2], order____00001, INT____00006) :: defines_var(INT____00006);
constraint array_var_int_element(x[3], order____00001, INT____00009) :: defines_var(INT____00009);
constraint array_var_int_element(x[4], order____00001, INT____00012) :: defines_var(INT____00012);
constraint array_var_int_element(x[5], order____00001, INT____00015) :: defines_var(INT____00015);
constraint array_var_int_element(x[6], order____00001, INT____00018) :: defines_var(INT____00018);
constraint array_var_int_element(x[7], order____00001, INT____00021) :: defines_var(INT____00021);
constraint array_var_int_element(x[8], order____00001, INT____00024) :: defines_var(INT____00024);
constraint array_var_int_element(x[9], order____00001, INT____00027) :: defines_var(INT____00027);
constraint array_var_int_element(x[10], order____00001, INT____00030) :: defines_var(INT____00030);
constraint array_var_int_element(x[11], order____00001, INT____00033) :: defines_var(INT____00033);
constraint array_var_int_element(x[12], order____00001, INT____00036) :: defines_var(INT____00036);
constraint array_var_int_element(x[13], order____00001, INT____00039) :: defines_var(INT____00039);
constraint array_var_int_element(x[14], order____00001, INT____00042) :: defines_var(INT____00042);
constraint array_var_int_element(x[15], order____00001, INT____00045) :: defines_var(INT____00045);
constraint array_var_int_element(x[16], order____00001, INT____00048) :: defines_var(INT____00048);
constraint bool_le(BOOL____00002, BOOL____00004);
constraint bool_le(BOOL____00005, BOOL____00007);
constraint bool_le(BOOL____00008, BOOL____00010);
constraint bool_le(BOOL____00011, BOOL____00013);
constraint bool_le(BOOL____00014, BOOL____00016);
constraint bool_le(BOOL____00017, BOOL____00019);
constraint bool_le(BOOL____00020, BOOL____00022);
constraint bool_le(BOOL____00023, BOOL____00025);
constraint bool_le(BOOL____00026, BOOL____00028);
constraint bool_le(BOOL____00029, BOOL____00031);
constraint bool_le(BOOL____00032, BOOL____00034);
constraint bool_le(BOOL____00035, BOOL____00037);
constraint bool_le(BOOL____00038, BOOL____00040);
constraint bool_le(BOOL____00041, BOOL____00043);
constraint bool_le(BOOL____00044, BOOL____00046);
constraint bool_le(BOOL____00047, BOOL____00049);
constraint bool_le(BOOL____00050, BOOL____00051);
constraint bool_le(BOOL____00052, BOOL____00053);
constraint bool_le(BOOL____00054, BOOL____00055);
constraint bool_le(BOOL____00056, BOOL____00057);
constraint bool_le(BOOL____00058, BOOL____00059);
constraint bool_le(BOOL____00060, BOOL____00061);
constraint bool_le(BOOL____00062, BOOL____00063);
constraint bool_le(BOOL____00064, BOOL____00065);
constraint bool_le(BOOL____00066, BOOL____00067);
constraint bool_le(BOOL____00068, BOOL____00069);
constraint bool_le(BOOL____00070, BOOL____00071);
constraint bool_le(BOOL____00072, BOOL____00073);
constraint bool_le(BOOL____00074, BOOL____00075);
constraint bool_le(BOOL____00076, BOOL____00077);
constraint bool_le(BOOL____00078, BOOL____00079);
constraint bool_le(BOOL____00080, BOOL____00081);
constraint int_eq(order____00001[1], 1);
constraint int_eq_reif(16, order____00001[1], BOOL____00050) :: defines_var(BOOL____00050);
constraint int_eq_reif(16, order____00001[2], BOOL____00052) :: defines_var(BOOL____00052);
constraint int_eq_reif(16, order____00001[3], BOOL____00054) :: defines_var(BOOL____00054);
constraint int_eq_reif(16, order____00001[4], BOOL____00056) :: defines_var(BOOL____00056);
constraint int_eq_reif(16, order____00001[5], BOOL____00058) :: defines_var(BOOL____00058);
constraint int_eq_reif(16, order____00001[6], BOOL____00060) :: defines_var(BOOL____00060);
constraint int_eq_reif(16, order____00001[7], BOOL____00062) :: defines_var(BOOL____00062);
constraint int_eq_reif(16, order____00001[8], BOOL____00064) :: defines_var(BOOL____00064);
constraint int_eq_reif(16, order____00001[9], BOOL____00066) :: defines_var(BOOL____00066);
constraint int_eq_reif(16, order____00001[10], BOOL____00068) :: defines_var(BOOL____00068);
constraint int_eq_reif(16, order____00001[11], BOOL____00070) :: defines_var(BOOL____00070);
constraint int_eq_reif(16, order____00001[12], BOOL____00072) :: defines_var(BOOL____00072);
constraint int_eq_reif(16, order____00001[13], BOOL____00074) :: defines_var(BOOL____00074);
constraint int_eq_reif(16, order____00001[14], BOOL____00076) :: defines_var(BOOL____00076);
constraint int_eq_reif(16, order____00001[15], BOOL____00078) :: defines_var(BOOL____00078);
constraint int_eq_reif(16, order____00001[16], BOOL____00080) :: defines_var(BOOL____00080);
constraint int_eq_reif(x[1], 1, BOOL____00051) :: defines_var(BOOL____00051);
constraint int_eq_reif(x[2], 1, BOOL____00053) :: defines_var(BOOL____00053);
constraint int_eq_reif(x[3], 1, BOOL____00055) :: defines_var(BOOL____00055);
constraint int_eq_reif(x[4], 1, BOOL____00057) :: defines_var(BOOL____00057);
constraint int_eq_reif(x[5], 1, BOOL____00059) :: defines_var(BOOL____00059);
constraint int_eq_reif(x[6], 1, BOOL____00061) :: defines_var(BOOL____00061);
constraint int_eq_reif(x[7], 1, BOOL____00063) :: defines_var(BOOL____00063);
constraint int_eq_reif(x[8], 1, BOOL____00065) :: defines_var(BOOL____00065);
constraint int_eq_reif(x[9], 1, BOOL____00067) :: defines_var(BOOL____00067);
constraint int_eq_reif(x[10], 1, BOOL____00069) :: defines_var(BOOL____00069);
constraint int_eq_reif(x[11], 1, BOOL____00071) :: defines_var(BOOL____00071);
constraint int_eq_reif(x[12], 1, BOOL____00073) :: defines_var(BOOL____00073);
constraint int_eq_reif(x[13], 1, BOOL____00075) :: defines_var(BOOL____00075);
constraint int_eq_reif(x[14], 1, BOOL____00077) :: defines_var(BOOL____00077);
constraint int_eq_reif(x[15], 1, BOOL____00079) :: defines_var(BOOL____00079);
constraint int_eq_reif(x[16], 1, BOOL____00081) :: defines_var(BOOL____00081);
constraint int_lin_eq([-1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [INT____00098, d[1], d[2], d[3], d[4], d[5], d[6], d[7], d[8], d[9], d[10], d[11], d[12], d[13], d[14], d[15], d[16]], 0) :: defines_var(INT____00098);
constraint int_lin_eq_reif([1, -1], [INT____00003, order____00001[1]], 1, BOOL____00004) :: defines_var(BOOL____00004);
constraint int_lin_eq_reif([1, -1], [INT____00006, order____00001[2]], 1, BOOL____00007) :: defines_var(BOOL____00007);
constraint int_lin_eq_reif([1, -1], [INT____00009, order____00001[3]], 1, BOOL____00010) :: defines_var(BOOL____00010);
constraint int_lin_eq_reif([1, -1], [INT____00012, order____00001[4]], 1, BOOL____00013) :: defines_var(BOOL____00013);
constraint int_lin_eq_reif([1, -1], [INT____00015, order____00001[5]], 1, BOOL____00016) :: defines_var(BOOL____00016);
constraint int_lin_eq_reif([1, -1], [INT____00018, order____00001[6]], 1, BOOL____00019) :: defines_var(BOOL____00019);
constraint int_lin_eq_reif([1, -1], [INT____00021, order____00001[7]], 1, BOOL____00022) :: defines_var(BOOL____00022);
constraint int_lin_eq_reif([1, -1], [INT____00024, order____00001[8]], 1, BOOL____00025) :: defines_var(BOOL____00025);
constraint int_lin_eq_reif([1, -1], [INT____00027, order____00001[9]], 1, BOOL____00028) :: defines_var(BOOL____00028);
constraint int_lin_eq_reif([1, -1], [INT____00030, order____00001[10]], 1, BOOL____00031) :: defines_var(BOOL____00031);
constraint int_lin_eq_reif([1, -1], [INT____00033, order____00001[11]], 1, BOOL____00034) :: defines_var(BOOL____00034);
constraint int_lin_eq_reif([1, -1], [INT____00036, order____00001[12]], 1, BOOL____00037) :: defines_var(BOOL____00037);
constraint int_lin_eq_reif([1, -1], [INT____00039, order____00001[13]], 1, BOOL____00040) :: defines_var(BOOL____00040);
constraint int_lin_eq_reif([1, -1], [INT____00042, order____00001[14]], 1, BOOL____00043) :: defines_var(BOOL____00043);
constraint int_lin_eq_reif([1, -1], [INT____00045, order____00001[15]], 1, BOOL____00046) :: defines_var(BOOL____00046);
constraint int_lin_eq_reif([1, -1], [INT____00048, order____00001[16]], 1, BOOL____00049) :: defines_var(BOOL____00049);
constraint int_ne(x[1], 1);
constraint int_ne(x[2], 2);
constraint int_ne(x[3], 3);
constraint int_ne(x[4], 4);
constraint int_ne(x[5], 5);
constraint int_ne(x[6], 6);
constraint int_ne(x[7], 7);
constraint int_ne(x[8], 8);
constraint int_ne(x[9], 9);
constraint int_ne(x[10], 10);
constraint int_ne(x[11], 11);
constraint int_ne(x[12], 12);
constraint int_ne(x[13], 13);
constraint int_ne(x[14], 14);
constraint int_ne(x[15], 15);
constraint int_ne(x[16], 16);
constraint int_ne_reif(order____00001[1], 16, BOOL____00002) :: defines_var(BOOL____00002);
constraint int_ne_reif(order____00001[2], 16, BOOL____00005) :: defines_var(BOOL____00005);
constraint int_ne_reif(order____00001[3], 16, BOOL____00008) :: defines_var(BOOL____00008);
constraint int_ne_reif(order____00001[4], 16, BOOL____00011) :: defines_var(BOOL____00011);
constraint int_ne_reif(order____00001[5], 16, BOOL____00014) :: defines_var(BOOL____00014);
constraint int_ne_reif(order____00001[6], 16, BOOL____00017) :: defines_var(BOOL____00017);
constraint int_ne_reif(order____00001[7], 16, BOOL____00020) :: defines_var(BOOL____00020);
constraint int_ne_reif(order____00001[8], 16, BOOL____00023) :: defines_var(BOOL____00023);
constraint int_ne_reif(order____00001[9], 16, BOOL____00026) :: defines_var(BOOL____00026);
constraint int_ne_reif(order____00001[10], 16, BOOL____00029) :: defines_var(BOOL____00029);
constraint int_ne_reif(order____00001[11], 16, BOOL____00032) :: defines_var(BOOL____00032);
constraint int_ne_reif(order____00001[12], 16, BOOL____00035) :: defines_var(BOOL____00035);
constraint int_ne_reif(order____00001[13], 16, BOOL____00038) :: defines_var(BOOL____00038);
constraint int_ne_reif(order____00001[14], 16, BOOL____00041) :: defines_var(BOOL____00041);
constraint int_ne_reif(order____00001[15], 16, BOOL____00044) :: defines_var(BOOL____00044);
constraint int_ne_reif(order____00001[16], 16, BOOL____00047) :: defines_var(BOOL____00047);
solve  :: int_search(d, smallest, indomain_min, complete) minimize INT____00098;
