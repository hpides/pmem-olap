predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..3] of var 1..8: the_period :: output_array([1..3]);
array [1..8] of var 1..8: x :: output_array([1..8]);
constraint int_eq(the_period[1], x[1]);
constraint int_eq(the_period[2], x[2]);
constraint int_eq(the_period[3], x[3]);
constraint int_eq(x[1], x[4]);
constraint int_eq(x[1], x[7]);
constraint int_eq(x[2], x[5]);
constraint int_eq(x[2], x[8]);
constraint int_eq(x[3], x[6]);
solve satisfy;
