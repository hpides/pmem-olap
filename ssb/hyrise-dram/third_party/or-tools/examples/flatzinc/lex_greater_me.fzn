predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var bool: BOOL____00002 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00003 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00004 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00006 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00007 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00008 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00010 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00011 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00012 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00014 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00015 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00016 :: is_defined_var :: var_is_introduced;
array [1..5] of var bool: b____00001;
array [1..4] of var 1..7: vector1 :: output_array([1..4]);
array [1..4] of var 1..7: vector2 :: output_array([1..4]);
constraint array_bool_and([BOOL____00004, BOOL____00002], b____00001[1]);
constraint array_bool_and([BOOL____00008, BOOL____00006], b____00001[2]);
constraint array_bool_and([BOOL____00012, BOOL____00010], b____00001[3]);
constraint array_bool_and([BOOL____00016, BOOL____00014], b____00001[4]);
constraint array_bool_or([BOOL____00003, b____00001[2]], BOOL____00004) :: defines_var(BOOL____00004);
constraint array_bool_or([BOOL____00007, b____00001[3]], BOOL____00008) :: defines_var(BOOL____00008);
constraint array_bool_or([BOOL____00011, b____00001[4]], BOOL____00012) :: defines_var(BOOL____00012);
constraint array_bool_or([BOOL____00015, b____00001[5]], BOOL____00016) :: defines_var(BOOL____00016);
constraint bool_eq(b____00001[1], true);
constraint bool_eq(b____00001[5], false);
constraint int_eq(vector1[1], 5);
constraint int_eq(vector1[2], 2);
constraint int_eq(vector1[3], 7);
constraint int_eq(vector1[4], 1);
constraint int_eq(vector2[1], 5);
constraint int_eq(vector2[2], 2);
constraint int_eq(vector2[3], 6);
constraint int_eq(vector2[4], 2);
constraint int_le_reif(vector2[1], vector1[1], BOOL____00002) :: defines_var(BOOL____00002);
constraint int_le_reif(vector2[2], vector1[2], BOOL____00006) :: defines_var(BOOL____00006);
constraint int_le_reif(vector2[3], vector1[3], BOOL____00010) :: defines_var(BOOL____00010);
constraint int_le_reif(vector2[4], vector1[4], BOOL____00014) :: defines_var(BOOL____00014);
constraint int_lt_reif(vector2[1], vector1[1], BOOL____00003) :: defines_var(BOOL____00003);
constraint int_lt_reif(vector2[2], vector1[2], BOOL____00007) :: defines_var(BOOL____00007);
constraint int_lt_reif(vector2[3], vector1[3], BOOL____00011) :: defines_var(BOOL____00011);
constraint int_lt_reif(vector2[4], vector1[4], BOOL____00015) :: defines_var(BOOL____00015);
solve satisfy;
