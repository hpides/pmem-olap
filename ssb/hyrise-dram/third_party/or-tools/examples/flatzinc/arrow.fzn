predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..9] of int: data = [1, 8, 4, 6, 3, 9, 5, 7, 2];
var bool: BOOL____00008 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00009 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00011 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00012 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00013 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00014 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00015 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00016 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00020 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00028 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00029 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00031 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00032 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00033 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00034 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00035 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00036 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00040 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00048 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00049 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00051 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00052 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00053 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00054 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00055 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00056 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00060 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00068 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00069 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00071 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00072 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00073 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00074 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00075 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00076 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00080 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00088 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00089 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00091 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00092 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00093 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00094 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00095 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00096 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00100 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00108 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00109 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00111 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00112 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00113 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00114 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00115 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00116 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00120 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00128 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00129 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00131 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00132 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00133 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00134 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00135 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00136 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00140 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00148 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00149 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00151 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00152 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00153 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00154 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00155 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00156 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00160 :: is_defined_var :: var_is_introduced;
var 123456789..987654321: INT____00001 :: is_defined_var :: var_is_introduced;
var 1..9: INT____00006 :: is_defined_var :: var_is_introduced;
var -3..13: INT____00017 :: is_defined_var :: var_is_introduced;
var 1..9: INT____00018 :: is_defined_var :: var_is_introduced;
var 1..9: INT____00019 :: is_defined_var :: var_is_introduced;
var 1..9: INT____00026 :: is_defined_var :: var_is_introduced;
var -3..13: INT____00037 :: is_defined_var :: var_is_introduced;
var 1..9: INT____00038 :: is_defined_var :: var_is_introduced;
var 1..9: INT____00039 :: is_defined_var :: var_is_introduced;
var 1..9: INT____00046 :: is_defined_var :: var_is_introduced;
var -3..13: INT____00057 :: is_defined_var :: var_is_introduced;
var 1..9: INT____00058 :: is_defined_var :: var_is_introduced;
var 1..9: INT____00059 :: is_defined_var :: var_is_introduced;
var 1..9: INT____00066 :: is_defined_var :: var_is_introduced;
var -3..13: INT____00077 :: is_defined_var :: var_is_introduced;
var 1..9: INT____00078 :: is_defined_var :: var_is_introduced;
var 1..9: INT____00079 :: is_defined_var :: var_is_introduced;
var 1..9: INT____00086 :: is_defined_var :: var_is_introduced;
var -3..13: INT____00097 :: is_defined_var :: var_is_introduced;
var 1..9: INT____00098 :: is_defined_var :: var_is_introduced;
var 1..9: INT____00099 :: is_defined_var :: var_is_introduced;
var 1..9: INT____00106 :: is_defined_var :: var_is_introduced;
var -3..13: INT____00117 :: is_defined_var :: var_is_introduced;
var 1..9: INT____00118 :: is_defined_var :: var_is_introduced;
var 1..9: INT____00119 :: is_defined_var :: var_is_introduced;
var 1..9: INT____00126 :: is_defined_var :: var_is_introduced;
var -3..13: INT____00137 :: is_defined_var :: var_is_introduced;
var 1..9: INT____00138 :: is_defined_var :: var_is_introduced;
var 1..9: INT____00139 :: is_defined_var :: var_is_introduced;
var 1..9: INT____00146 :: is_defined_var :: var_is_introduced;
var -3..13: INT____00157 :: is_defined_var :: var_is_introduced;
var 1..9: INT____00158 :: is_defined_var :: var_is_introduced;
var 1..9: INT____00159 :: is_defined_var :: var_is_introduced;
var -1..1: a____00004;
var -1..1: a____00024;
var -1..1: a____00044;
var -1..1: a____00064;
var -1..1: a____00084;
var -1..1: a____00104;
var -1..1: a____00124;
var -1..1: a____00144;
var -1..1: b____00005;
var -1..1: b____00025;
var -1..1: b____00045;
var -1..1: b____00065;
var -1..1: b____00085;
var -1..1: b____00105;
var -1..1: b____00125;
var -1..1: b____00145;
var 1..3: i____00002;
var 1..3: i____00022;
var 1..3: i____00042;
var 1..3: i____00062;
var 1..3: i____00082;
var 1..3: i____00102;
var 1..3: i____00122;
var 1..3: i____00142;
var 1..3: j____00003;
var 1..3: j____00023;
var 1..3: j____00043;
var 1..3: j____00063;
var 1..3: j____00083;
var 1..3: j____00103;
var 1..3: j____00123;
var 1..3: j____00143;
var 123456789..987654321: num :: output_var = INT____00001;
array [1..9] of var 1..9: x :: output_array([1..9]);
constraint all_different_int(x);
constraint array_bool_and([BOOL____00011, BOOL____00012], BOOL____00013) :: defines_var(BOOL____00013);
constraint array_bool_and([BOOL____00014, BOOL____00015], BOOL____00016) :: defines_var(BOOL____00016);
constraint array_bool_and([BOOL____00031, BOOL____00032], BOOL____00033) :: defines_var(BOOL____00033);
constraint array_bool_and([BOOL____00034, BOOL____00035], BOOL____00036) :: defines_var(BOOL____00036);
constraint array_bool_and([BOOL____00051, BOOL____00052], BOOL____00053) :: defines_var(BOOL____00053);
constraint array_bool_and([BOOL____00054, BOOL____00055], BOOL____00056) :: defines_var(BOOL____00056);
constraint array_bool_and([BOOL____00071, BOOL____00072], BOOL____00073) :: defines_var(BOOL____00073);
constraint array_bool_and([BOOL____00074, BOOL____00075], BOOL____00076) :: defines_var(BOOL____00076);
constraint array_bool_and([BOOL____00091, BOOL____00092], BOOL____00093) :: defines_var(BOOL____00093);
constraint array_bool_and([BOOL____00094, BOOL____00095], BOOL____00096) :: defines_var(BOOL____00096);
constraint array_bool_and([BOOL____00111, BOOL____00112], BOOL____00113) :: defines_var(BOOL____00113);
constraint array_bool_and([BOOL____00114, BOOL____00115], BOOL____00116) :: defines_var(BOOL____00116);
constraint array_bool_and([BOOL____00131, BOOL____00132], BOOL____00133) :: defines_var(BOOL____00133);
constraint array_bool_and([BOOL____00134, BOOL____00135], BOOL____00136) :: defines_var(BOOL____00136);
constraint array_bool_and([BOOL____00151, BOOL____00152], BOOL____00153) :: defines_var(BOOL____00153);
constraint array_bool_and([BOOL____00154, BOOL____00155], BOOL____00156) :: defines_var(BOOL____00156);
constraint array_bool_and([BOOL____00020, BOOL____00016, BOOL____00015, BOOL____00014, BOOL____00013, BOOL____00012, BOOL____00011], true);
constraint array_bool_and([BOOL____00040, BOOL____00036, BOOL____00035, BOOL____00034, BOOL____00033, BOOL____00032, BOOL____00031], true);
constraint array_bool_and([BOOL____00060, BOOL____00056, BOOL____00055, BOOL____00054, BOOL____00053, BOOL____00052, BOOL____00051], true);
constraint array_bool_and([BOOL____00080, BOOL____00076, BOOL____00075, BOOL____00074, BOOL____00073, BOOL____00072, BOOL____00071], true);
constraint array_bool_and([BOOL____00100, BOOL____00096, BOOL____00095, BOOL____00094, BOOL____00093, BOOL____00092, BOOL____00091], true);
constraint array_bool_and([BOOL____00120, BOOL____00116, BOOL____00115, BOOL____00114, BOOL____00113, BOOL____00112, BOOL____00111], true);
constraint array_bool_and([BOOL____00140, BOOL____00136, BOOL____00135, BOOL____00134, BOOL____00133, BOOL____00132, BOOL____00131], true);
constraint array_bool_and([BOOL____00160, BOOL____00156, BOOL____00155, BOOL____00154, BOOL____00153, BOOL____00152, BOOL____00151], true);
constraint array_bool_or([BOOL____00008, BOOL____00009], true);
constraint array_bool_or([BOOL____00028, BOOL____00029], true);
constraint array_bool_or([BOOL____00048, BOOL____00049], true);
constraint array_bool_or([BOOL____00068, BOOL____00069], true);
constraint array_bool_or([BOOL____00088, BOOL____00089], true);
constraint array_bool_or([BOOL____00108, BOOL____00109], true);
constraint array_bool_or([BOOL____00128, BOOL____00129], true);
constraint array_bool_or([BOOL____00148, BOOL____00149], true);
constraint array_int_element(INT____00006, data, x[1]);
constraint array_int_element(INT____00018, data, INT____00019) :: defines_var(INT____00019);
constraint array_int_element(INT____00026, data, x[2]);
constraint array_int_element(INT____00038, data, INT____00039) :: defines_var(INT____00039);
constraint array_int_element(INT____00046, data, x[3]);
constraint array_int_element(INT____00058, data, INT____00059) :: defines_var(INT____00059);
constraint array_int_element(INT____00066, data, x[4]);
constraint array_int_element(INT____00078, data, INT____00079) :: defines_var(INT____00079);
constraint array_int_element(INT____00086, data, x[5]);
constraint array_int_element(INT____00098, data, INT____00099) :: defines_var(INT____00099);
constraint array_int_element(INT____00106, data, x[6]);
constraint array_int_element(INT____00118, data, INT____00119) :: defines_var(INT____00119);
constraint array_int_element(INT____00126, data, x[7]);
constraint array_int_element(INT____00138, data, INT____00139) :: defines_var(INT____00139);
constraint array_int_element(INT____00146, data, x[8]);
constraint array_int_element(INT____00158, data, INT____00159) :: defines_var(INT____00159);
constraint int_eq_reif(INT____00017, INT____00018, BOOL____00016);
constraint int_eq_reif(INT____00037, INT____00038, BOOL____00036);
constraint int_eq_reif(INT____00057, INT____00058, BOOL____00056);
constraint int_eq_reif(INT____00077, INT____00078, BOOL____00076);
constraint int_eq_reif(INT____00097, INT____00098, BOOL____00096);
constraint int_eq_reif(INT____00117, INT____00118, BOOL____00116);
constraint int_eq_reif(INT____00137, INT____00138, BOOL____00136);
constraint int_eq_reif(INT____00157, INT____00158, BOOL____00156);
constraint int_eq_reif(a____00004, 0, BOOL____00008) :: defines_var(BOOL____00008);
constraint int_eq_reif(a____00024, 0, BOOL____00028) :: defines_var(BOOL____00028);
constraint int_eq_reif(a____00044, 0, BOOL____00048) :: defines_var(BOOL____00048);
constraint int_eq_reif(a____00064, 0, BOOL____00068) :: defines_var(BOOL____00068);
constraint int_eq_reif(a____00084, 0, BOOL____00088) :: defines_var(BOOL____00088);
constraint int_eq_reif(a____00104, 0, BOOL____00108) :: defines_var(BOOL____00108);
constraint int_eq_reif(a____00124, 0, BOOL____00128) :: defines_var(BOOL____00128);
constraint int_eq_reif(a____00144, 0, BOOL____00148) :: defines_var(BOOL____00148);
constraint int_eq_reif(b____00005, 0, BOOL____00009) :: defines_var(BOOL____00009);
constraint int_eq_reif(b____00025, 0, BOOL____00029) :: defines_var(BOOL____00029);
constraint int_eq_reif(b____00045, 0, BOOL____00049) :: defines_var(BOOL____00049);
constraint int_eq_reif(b____00065, 0, BOOL____00069) :: defines_var(BOOL____00069);
constraint int_eq_reif(b____00085, 0, BOOL____00089) :: defines_var(BOOL____00089);
constraint int_eq_reif(b____00105, 0, BOOL____00109) :: defines_var(BOOL____00109);
constraint int_eq_reif(b____00125, 0, BOOL____00129) :: defines_var(BOOL____00129);
constraint int_eq_reif(b____00145, 0, BOOL____00149) :: defines_var(BOOL____00149);
constraint int_eq_reif(x[2], INT____00019, BOOL____00020) :: defines_var(BOOL____00020);
constraint int_eq_reif(x[3], INT____00039, BOOL____00040) :: defines_var(BOOL____00040);
constraint int_eq_reif(x[4], INT____00059, BOOL____00060) :: defines_var(BOOL____00060);
constraint int_eq_reif(x[5], INT____00079, BOOL____00080) :: defines_var(BOOL____00080);
constraint int_eq_reif(x[6], INT____00099, BOOL____00100) :: defines_var(BOOL____00100);
constraint int_eq_reif(x[7], INT____00119, BOOL____00120) :: defines_var(BOOL____00120);
constraint int_eq_reif(x[8], INT____00139, BOOL____00140) :: defines_var(BOOL____00140);
constraint int_eq_reif(x[9], INT____00159, BOOL____00160) :: defines_var(BOOL____00160);
constraint int_lin_eq([-1, 3, 1], [INT____00006, i____00002, j____00003], 3) :: defines_var(INT____00006) :: domain;
constraint int_lin_eq([-1, 3, 1], [INT____00026, i____00022, j____00023], 3) :: defines_var(INT____00026) :: domain;
constraint int_lin_eq([-1, 3, 1], [INT____00046, i____00042, j____00043], 3) :: defines_var(INT____00046) :: domain;
constraint int_lin_eq([-1, 3, 1], [INT____00066, i____00062, j____00063], 3) :: defines_var(INT____00066) :: domain;
constraint int_lin_eq([-1, 3, 1], [INT____00086, i____00082, j____00083], 3) :: defines_var(INT____00086) :: domain;
constraint int_lin_eq([-1, 3, 1], [INT____00106, i____00102, j____00103], 3) :: defines_var(INT____00106) :: domain;
constraint int_lin_eq([-1, 3, 1], [INT____00126, i____00122, j____00123], 3) :: defines_var(INT____00126) :: domain;
constraint int_lin_eq([-1, 3, 1], [INT____00146, i____00142, j____00143], 3) :: defines_var(INT____00146) :: domain;
constraint int_lin_eq([-1, 3, 1, 3, 1], [INT____00017, a____00004, b____00005, i____00002, j____00003], 3) :: defines_var(INT____00017) :: domain;
constraint int_lin_eq([-1, 3, 1, 3, 1], [INT____00037, a____00024, b____00025, i____00022, j____00023], 3) :: defines_var(INT____00037) :: domain;
constraint int_lin_eq([-1, 3, 1, 3, 1], [INT____00057, a____00044, b____00045, i____00042, j____00043], 3) :: defines_var(INT____00057) :: domain;
constraint int_lin_eq([-1, 3, 1, 3, 1], [INT____00077, a____00064, b____00065, i____00062, j____00063], 3) :: defines_var(INT____00077) :: domain;
constraint int_lin_eq([-1, 3, 1, 3, 1], [INT____00097, a____00084, b____00085, i____00082, j____00083], 3) :: defines_var(INT____00097) :: domain;
constraint int_lin_eq([-1, 3, 1, 3, 1], [INT____00117, a____00104, b____00105, i____00102, j____00103], 3) :: defines_var(INT____00117) :: domain;
constraint int_lin_eq([-1, 3, 1, 3, 1], [INT____00137, a____00124, b____00125, i____00122, j____00123], 3) :: defines_var(INT____00137) :: domain;
constraint int_lin_eq([-1, 3, 1, 3, 1], [INT____00157, a____00144, b____00145, i____00142, j____00143], 3) :: defines_var(INT____00157) :: domain;
constraint int_lin_eq([-1, 100000000, 10000000, 1000000, 100000, 10000, 1000, 100, 10, 1], [INT____00001, x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9]], 0) :: defines_var(INT____00001);
constraint int_lin_le([-1, -1], [a____00004, i____00002], -1);
constraint int_lin_le([-1, -1], [a____00024, i____00022], -1);
constraint int_lin_le([-1, -1], [a____00044, i____00042], -1);
constraint int_lin_le([-1, -1], [a____00064, i____00062], -1);
constraint int_lin_le([-1, -1], [a____00084, i____00082], -1);
constraint int_lin_le([-1, -1], [a____00104, i____00102], -1);
constraint int_lin_le([-1, -1], [a____00124, i____00122], -1);
constraint int_lin_le([-1, -1], [a____00144, i____00142], -1);
constraint int_lin_le([-1, -1], [b____00005, j____00003], -1);
constraint int_lin_le([-1, -1], [b____00025, j____00023], -1);
constraint int_lin_le([-1, -1], [b____00045, j____00043], -1);
constraint int_lin_le([-1, -1], [b____00065, j____00063], -1);
constraint int_lin_le([-1, -1], [b____00085, j____00083], -1);
constraint int_lin_le([-1, -1], [b____00105, j____00103], -1);
constraint int_lin_le([-1, -1], [b____00125, j____00123], -1);
constraint int_lin_le([-1, -1], [b____00145, j____00143], -1);
constraint int_lin_le([1, 1], [a____00004, i____00002], 3);
constraint int_lin_le([1, 1], [a____00024, i____00022], 3);
constraint int_lin_le([1, 1], [a____00044, i____00042], 3);
constraint int_lin_le([1, 1], [a____00064, i____00062], 3);
constraint int_lin_le([1, 1], [a____00084, i____00082], 3);
constraint int_lin_le([1, 1], [a____00104, i____00102], 3);
constraint int_lin_le([1, 1], [a____00124, i____00122], 3);
constraint int_lin_le([1, 1], [a____00144, i____00142], 3);
constraint int_lin_le([1, 1], [b____00005, j____00003], 3);
constraint int_lin_le([1, 1], [b____00025, j____00023], 3);
constraint int_lin_le([1, 1], [b____00045, j____00043], 3);
constraint int_lin_le([1, 1], [b____00065, j____00063], 3);
constraint int_lin_le([1, 1], [b____00085, j____00083], 3);
constraint int_lin_le([1, 1], [b____00105, j____00103], 3);
constraint int_lin_le([1, 1], [b____00125, j____00123], 3);
constraint int_lin_le([1, 1], [b____00145, j____00143], 3);
constraint int_lin_le_reif([-1, -1], [a____00004, i____00002], -1, BOOL____00014) :: defines_var(BOOL____00014);
constraint int_lin_le_reif([-1, -1], [a____00024, i____00022], -1, BOOL____00034) :: defines_var(BOOL____00034);
constraint int_lin_le_reif([-1, -1], [a____00044, i____00042], -1, BOOL____00054) :: defines_var(BOOL____00054);
constraint int_lin_le_reif([-1, -1], [a____00064, i____00062], -1, BOOL____00074) :: defines_var(BOOL____00074);
constraint int_lin_le_reif([-1, -1], [a____00084, i____00082], -1, BOOL____00094) :: defines_var(BOOL____00094);
constraint int_lin_le_reif([-1, -1], [a____00104, i____00102], -1, BOOL____00114) :: defines_var(BOOL____00114);
constraint int_lin_le_reif([-1, -1], [a____00124, i____00122], -1, BOOL____00134) :: defines_var(BOOL____00134);
constraint int_lin_le_reif([-1, -1], [a____00144, i____00142], -1, BOOL____00154) :: defines_var(BOOL____00154);
constraint int_lin_le_reif([-1, -1], [b____00005, j____00003], -1, BOOL____00011) :: defines_var(BOOL____00011);
constraint int_lin_le_reif([-1, -1], [b____00025, j____00023], -1, BOOL____00031) :: defines_var(BOOL____00031);
constraint int_lin_le_reif([-1, -1], [b____00045, j____00043], -1, BOOL____00051) :: defines_var(BOOL____00051);
constraint int_lin_le_reif([-1, -1], [b____00065, j____00063], -1, BOOL____00071) :: defines_var(BOOL____00071);
constraint int_lin_le_reif([-1, -1], [b____00085, j____00083], -1, BOOL____00091) :: defines_var(BOOL____00091);
constraint int_lin_le_reif([-1, -1], [b____00105, j____00103], -1, BOOL____00111) :: defines_var(BOOL____00111);
constraint int_lin_le_reif([-1, -1], [b____00125, j____00123], -1, BOOL____00131) :: defines_var(BOOL____00131);
constraint int_lin_le_reif([-1, -1], [b____00145, j____00143], -1, BOOL____00151) :: defines_var(BOOL____00151);
constraint int_lin_le_reif([1, 1], [a____00004, i____00002], 3, BOOL____00015) :: defines_var(BOOL____00015);
constraint int_lin_le_reif([1, 1], [a____00024, i____00022], 3, BOOL____00035) :: defines_var(BOOL____00035);
constraint int_lin_le_reif([1, 1], [a____00044, i____00042], 3, BOOL____00055) :: defines_var(BOOL____00055);
constraint int_lin_le_reif([1, 1], [a____00064, i____00062], 3, BOOL____00075) :: defines_var(BOOL____00075);
constraint int_lin_le_reif([1, 1], [a____00084, i____00082], 3, BOOL____00095) :: defines_var(BOOL____00095);
constraint int_lin_le_reif([1, 1], [a____00104, i____00102], 3, BOOL____00115) :: defines_var(BOOL____00115);
constraint int_lin_le_reif([1, 1], [a____00124, i____00122], 3, BOOL____00135) :: defines_var(BOOL____00135);
constraint int_lin_le_reif([1, 1], [a____00144, i____00142], 3, BOOL____00155) :: defines_var(BOOL____00155);
constraint int_lin_le_reif([1, 1], [b____00005, j____00003], 3, BOOL____00012) :: defines_var(BOOL____00012);
constraint int_lin_le_reif([1, 1], [b____00025, j____00023], 3, BOOL____00032) :: defines_var(BOOL____00032);
constraint int_lin_le_reif([1, 1], [b____00045, j____00043], 3, BOOL____00052) :: defines_var(BOOL____00052);
constraint int_lin_le_reif([1, 1], [b____00065, j____00063], 3, BOOL____00072) :: defines_var(BOOL____00072);
constraint int_lin_le_reif([1, 1], [b____00085, j____00083], 3, BOOL____00092) :: defines_var(BOOL____00092);
constraint int_lin_le_reif([1, 1], [b____00105, j____00103], 3, BOOL____00112) :: defines_var(BOOL____00112);
constraint int_lin_le_reif([1, 1], [b____00125, j____00123], 3, BOOL____00132) :: defines_var(BOOL____00132);
constraint int_lin_le_reif([1, 1], [b____00145, j____00143], 3, BOOL____00152) :: defines_var(BOOL____00152);
solve  :: int_search(x, first_fail, indomain_max, complete) maximize INT____00001;
