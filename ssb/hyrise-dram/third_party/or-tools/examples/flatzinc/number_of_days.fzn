predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..10] of int: data = [1, 1000, 2, 1200, 3, 2500, 4, 3100, 7, 4000];
var 0..11800: INT____00001 :: is_defined_var :: var_is_introduced;
var 0..17: days :: output_var = 13;
var 0..11800: total_cost :: output_var = INT____00001;
array [1..5] of var 0..1: x :: output_array([1..5]);
constraint int_lin_eq([-1, 1, 2, 3, 4, 7], [13, x[1], x[2], x[3], x[4], x[5]], 0);
constraint int_lin_eq([-1, 1000, 1200, 2500, 3100, 4000], [INT____00001, x[1], x[2], x[3], x[4], x[5]], 0) :: defines_var(INT____00001);
solve minimize INT____00001;
