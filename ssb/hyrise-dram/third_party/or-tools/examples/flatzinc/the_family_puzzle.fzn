predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..3] of int: men = [1, 2, 3];
var 1..3: Albert;
var bool: BOOL____00001 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00002 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00003 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00004 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00005 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00006 :: is_defined_var :: var_is_introduced;
var 1..3: Doris;
var 1..3: Edith;
var 1..3: Henry;
var 1..3: Luisa;
var 1..3: Victor;
array [1..3] of var 1..3: sons :: output_array([1..3]) = [Albert, Henry, Victor];
array [1..3] of var 1..3: women :: output_array([1..3]) = [Edith, Doris, Luisa];
constraint all_different_int(sons);
constraint all_different_int(women);
constraint array_bool_or([BOOL____00001, BOOL____00002], BOOL____00004) :: defines_var(BOOL____00004);
constraint bool_le(BOOL____00004, BOOL____00003);
constraint bool_le(BOOL____00005, BOOL____00006);
constraint int_eq_reif(Albert, 2, BOOL____00001) :: defines_var(BOOL____00001);
constraint int_eq_reif(Albert, 3, BOOL____00002) :: defines_var(BOOL____00002);
constraint int_eq_reif(Luisa, 2, BOOL____00005) :: defines_var(BOOL____00005);
constraint int_eq_reif(Luisa, Victor, BOOL____00003) :: defines_var(BOOL____00003);
constraint int_ne(3, Henry);
constraint int_ne(3, Luisa);
constraint int_ne(Edith, 2);
constraint int_ne(Edith, Albert);
constraint int_ne_reif(Doris, Albert, BOOL____00006) :: defines_var(BOOL____00006);
solve satisfy;
