predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var bool: BOOL____00001 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00004 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00007 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00010 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00013 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00016 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00019 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00022 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00025 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00028 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00031 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00034 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00037 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00040 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00043 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00046 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00002 :: is_defined_var :: var_is_introduced;
var 0..9: INT____00003 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00005 :: is_defined_var :: var_is_introduced;
var 0..9: INT____00006 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00008 :: is_defined_var :: var_is_introduced;
var 0..9: INT____00009 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00011 :: is_defined_var :: var_is_introduced;
var 0..9: INT____00012 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00014 :: is_defined_var :: var_is_introduced;
var 0..9: INT____00015 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00017 :: is_defined_var :: var_is_introduced;
var 0..9: INT____00018 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00020 :: is_defined_var :: var_is_introduced;
var 0..9: INT____00021 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00023 :: is_defined_var :: var_is_introduced;
var 0..9: INT____00024 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00026 :: is_defined_var :: var_is_introduced;
var 0..9: INT____00027 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00029 :: is_defined_var :: var_is_introduced;
var 0..9: INT____00030 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00032 :: is_defined_var :: var_is_introduced;
var 0..9: INT____00033 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00035 :: is_defined_var :: var_is_introduced;
var 0..9: INT____00036 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00038 :: is_defined_var :: var_is_introduced;
var 0..9: INT____00039 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00041 :: is_defined_var :: var_is_introduced;
var 0..9: INT____00042 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00044 :: is_defined_var :: var_is_introduced;
var 0..9: INT____00045 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00047 :: is_defined_var :: var_is_introduced;
var 0..9: INT____00048 :: is_defined_var :: var_is_introduced;
var 17..17: cost :: output_var = 17;
array [1..16] of var 0..9: matrix;
array [1..4] of var 1..4: variables :: output_array([1..4]);
constraint all_different_int(variables);
constraint bool2int(BOOL____00001, INT____00002) :: defines_var(INT____00002);
constraint bool2int(BOOL____00004, INT____00005) :: defines_var(INT____00005);
constraint bool2int(BOOL____00007, INT____00008) :: defines_var(INT____00008);
constraint bool2int(BOOL____00010, INT____00011) :: defines_var(INT____00011);
constraint bool2int(BOOL____00013, INT____00014) :: defines_var(INT____00014);
constraint bool2int(BOOL____00016, INT____00017) :: defines_var(INT____00017);
constraint bool2int(BOOL____00019, INT____00020) :: defines_var(INT____00020);
constraint bool2int(BOOL____00022, INT____00023) :: defines_var(INT____00023);
constraint bool2int(BOOL____00025, INT____00026) :: defines_var(INT____00026);
constraint bool2int(BOOL____00028, INT____00029) :: defines_var(INT____00029);
constraint bool2int(BOOL____00031, INT____00032) :: defines_var(INT____00032);
constraint bool2int(BOOL____00034, INT____00035) :: defines_var(INT____00035);
constraint bool2int(BOOL____00037, INT____00038) :: defines_var(INT____00038);
constraint bool2int(BOOL____00040, INT____00041) :: defines_var(INT____00041);
constraint bool2int(BOOL____00043, INT____00044) :: defines_var(INT____00044);
constraint bool2int(BOOL____00046, INT____00047) :: defines_var(INT____00047);
constraint int_eq(0, matrix[4]);
constraint int_eq(0, matrix[6]);
constraint int_eq(0, matrix[13]);
constraint int_eq(0, matrix[14]);
constraint int_eq(1, matrix[2]);
constraint int_eq(1, matrix[5]);
constraint int_eq(1, matrix[11]);
constraint int_eq(2, matrix[8]);
constraint int_eq(2, matrix[10]);
constraint int_eq(3, matrix[9]);
constraint int_eq(4, matrix[1]);
constraint int_eq(5, matrix[16]);
constraint int_eq(6, matrix[12]);
constraint int_eq(6, matrix[15]);
constraint int_eq(7, matrix[3]);
constraint int_eq(8, matrix[7]);
constraint int_eq(variables[1], 2);
constraint int_eq(variables[2], 3);
constraint int_eq(variables[3], 1);
constraint int_eq(variables[4], 4);
constraint int_eq_reif(variables[1], 1, BOOL____00001) :: defines_var(BOOL____00001);
constraint int_eq_reif(variables[1], 2, BOOL____00004) :: defines_var(BOOL____00004);
constraint int_eq_reif(variables[1], 3, BOOL____00007) :: defines_var(BOOL____00007);
constraint int_eq_reif(variables[1], 4, BOOL____00010) :: defines_var(BOOL____00010);
constraint int_eq_reif(variables[2], 1, BOOL____00013) :: defines_var(BOOL____00013);
constraint int_eq_reif(variables[2], 2, BOOL____00016) :: defines_var(BOOL____00016);
constraint int_eq_reif(variables[2], 3, BOOL____00019) :: defines_var(BOOL____00019);
constraint int_eq_reif(variables[2], 4, BOOL____00022) :: defines_var(BOOL____00022);
constraint int_eq_reif(variables[3], 1, BOOL____00025) :: defines_var(BOOL____00025);
constraint int_eq_reif(variables[3], 2, BOOL____00028) :: defines_var(BOOL____00028);
constraint int_eq_reif(variables[3], 3, BOOL____00031) :: defines_var(BOOL____00031);
constraint int_eq_reif(variables[3], 4, BOOL____00034) :: defines_var(BOOL____00034);
constraint int_eq_reif(variables[4], 1, BOOL____00037) :: defines_var(BOOL____00037);
constraint int_eq_reif(variables[4], 2, BOOL____00040) :: defines_var(BOOL____00040);
constraint int_eq_reif(variables[4], 3, BOOL____00043) :: defines_var(BOOL____00043);
constraint int_eq_reif(variables[4], 4, BOOL____00046) :: defines_var(BOOL____00046);
constraint int_lin_eq([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [INT____00003, INT____00006, INT____00009, INT____00012, INT____00015, INT____00018, INT____00021, INT____00024, INT____00027, INT____00030, INT____00033, INT____00036, INT____00039, INT____00042, INT____00045, INT____00048], -17);
constraint int_times(INT____00002, matrix[1], INT____00003) :: defines_var(INT____00003);
constraint int_times(INT____00005, matrix[2], INT____00006) :: defines_var(INT____00006);
constraint int_times(INT____00008, matrix[3], INT____00009) :: defines_var(INT____00009);
constraint int_times(INT____00011, matrix[4], INT____00012) :: defines_var(INT____00012);
constraint int_times(INT____00014, matrix[5], INT____00015) :: defines_var(INT____00015);
constraint int_times(INT____00017, matrix[6], INT____00018) :: defines_var(INT____00018);
constraint int_times(INT____00020, matrix[7], INT____00021) :: defines_var(INT____00021);
constraint int_times(INT____00023, matrix[8], INT____00024) :: defines_var(INT____00024);
constraint int_times(INT____00026, matrix[9], INT____00027) :: defines_var(INT____00027);
constraint int_times(INT____00029, matrix[10], INT____00030) :: defines_var(INT____00030);
constraint int_times(INT____00032, matrix[11], INT____00033) :: defines_var(INT____00033);
constraint int_times(INT____00035, matrix[12], INT____00036) :: defines_var(INT____00036);
constraint int_times(INT____00038, matrix[13], INT____00039) :: defines_var(INT____00039);
constraint int_times(INT____00041, matrix[14], INT____00042) :: defines_var(INT____00042);
constraint int_times(INT____00044, matrix[15], INT____00045) :: defines_var(INT____00045);
constraint int_times(INT____00047, matrix[16], INT____00048) :: defines_var(INT____00048);
solve satisfy;
