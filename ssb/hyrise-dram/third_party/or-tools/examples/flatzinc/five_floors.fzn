predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var 1..5: Baker;
var 1..4: Cooper;
var 1..5: Fletcher;
var -4..4: INT____00001 :: is_defined_var :: var_is_introduced;
var 2..4: INT____00002 :: is_defined_var :: var_is_introduced;
var -3..4: INT____00003 :: is_defined_var :: var_is_introduced;
var 2..4: INT____00004 :: is_defined_var :: var_is_introduced;
var 2..5: Miller;
var 1..5: Smith;
array [1..5] of var 1..5: x :: output_array([1..5]) = [Baker, Cooper, Fletcher, Miller, Smith];
constraint all_different_int(x);
constraint int_abs(INT____00001, INT____00002) :: defines_var(INT____00002);
constraint int_abs(INT____00003, INT____00004) :: defines_var(INT____00004);
constraint int_lin_eq([-1, -1, 1], [INT____00001, Fletcher, Smith], 0) :: defines_var(INT____00001);
constraint int_lin_eq([-1, -1, 1], [INT____00003, Cooper, Fletcher], 0) :: defines_var(INT____00003);
constraint int_lt(Cooper, Miller);
constraint int_ne(Baker, 5);
constraint int_ne(Cooper, 1);
constraint int_ne(Fletcher, 1);
constraint int_ne(Fletcher, 5);
solve satisfy;
