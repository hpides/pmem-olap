predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var 1..1: Baker :: output_var = 1;
var 0..4: Farmer :: output_var;
var 0..4: Glover :: output_var;
var 0..4: Hosier :: output_var;
var -2..2: INT____00001 :: is_defined_var :: var_is_introduced;
var 0..4: INT____00002 :: is_defined_var :: var_is_introduced;
var -1..3: INT____00003 :: is_defined_var :: var_is_introduced;
var 0..4: INT____00004 :: is_defined_var :: var_is_introduced;
var 1..5: INT____00005 :: is_defined_var :: var_is_introduced;
var 0..4: INT____00006 :: is_defined_var :: var_is_introduced;
var 0..4: Dyer :: output_var = INT____00006;
var 3..3: baker :: output_var = 3;
var 0..4: dyer :: output_var = INT____00002;
var 0..4: farmer :: output_var = INT____00004;
var 0..4: glover :: output_var;
var 0..4: hosier :: output_var;
constraint all_different_int([Baker, Dyer, Farmer, Glover, Hosier]);
constraint all_different_int([baker, dyer, farmer, glover, hosier]);
constraint int_lin_eq([-1, 1], [INT____00001, Hosier], 2) :: defines_var(INT____00001);
constraint int_lin_eq([-1, 1], [INT____00003, Farmer], 1) :: defines_var(INT____00003);
constraint int_lin_eq([-1, 1], [INT____00005, glover], -1) :: defines_var(INT____00005);
constraint int_mod(INT____00001, 5, INT____00002) :: defines_var(INT____00002);
constraint int_mod(INT____00003, 5, INT____00004) :: defines_var(INT____00004);
constraint int_mod(INT____00005, 5, INT____00006) :: defines_var(INT____00006);
constraint int_ne(baker, 1);
constraint int_ne(dyer, Dyer);
constraint int_ne(farmer, Farmer);
constraint int_ne(glover, Glover);
constraint int_ne(hosier, Hosier);
solve satisfy;
