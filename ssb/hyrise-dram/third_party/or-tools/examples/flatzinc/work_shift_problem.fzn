predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..3] of int: lower = [1, 2, 2];
array [1..3] of int: upper = [4, 3, 2];
var bool: BOOL____00001 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00003 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00005 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00007 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00009 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00011 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00014 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00016 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00018 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00020 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00022 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00024 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00027 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00029 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00031 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00033 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00035 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00037 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00002 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00004 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00006 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00008 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00010 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00012 :: is_defined_var :: var_is_introduced;
var 1..4: INT____00013 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00015 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00017 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00019 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00021 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00023 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00025 :: is_defined_var :: var_is_introduced;
var 2..3: INT____00026 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00028 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00030 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00032 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00034 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00036 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00038 :: is_defined_var :: var_is_introduced;
var 0..6: INT____00039 :: is_defined_var :: var_is_introduced;
array [1..6] of var 1..3: x :: output_array([1..6]);
constraint bool2int(BOOL____00001, INT____00002) :: defines_var(INT____00002);
constraint bool2int(BOOL____00003, INT____00004) :: defines_var(INT____00004);
constraint bool2int(BOOL____00005, INT____00006) :: defines_var(INT____00006);
constraint bool2int(BOOL____00007, INT____00008) :: defines_var(INT____00008);
constraint bool2int(BOOL____00009, INT____00010) :: defines_var(INT____00010);
constraint bool2int(BOOL____00011, INT____00012) :: defines_var(INT____00012);
constraint bool2int(BOOL____00014, INT____00015) :: defines_var(INT____00015);
constraint bool2int(BOOL____00016, INT____00017) :: defines_var(INT____00017);
constraint bool2int(BOOL____00018, INT____00019) :: defines_var(INT____00019);
constraint bool2int(BOOL____00020, INT____00021) :: defines_var(INT____00021);
constraint bool2int(BOOL____00022, INT____00023) :: defines_var(INT____00023);
constraint bool2int(BOOL____00024, INT____00025) :: defines_var(INT____00025);
constraint bool2int(BOOL____00027, INT____00028) :: defines_var(INT____00028);
constraint bool2int(BOOL____00029, INT____00030) :: defines_var(INT____00030);
constraint bool2int(BOOL____00031, INT____00032) :: defines_var(INT____00032);
constraint bool2int(BOOL____00033, INT____00034) :: defines_var(INT____00034);
constraint bool2int(BOOL____00035, INT____00036) :: defines_var(INT____00036);
constraint bool2int(BOOL____00037, INT____00038) :: defines_var(INT____00038);
constraint int_eq(x[2], 3);
constraint int_eq_reif(x[1], 1, BOOL____00001) :: defines_var(BOOL____00001);
constraint int_eq_reif(x[1], 2, BOOL____00014) :: defines_var(BOOL____00014);
constraint int_eq_reif(x[1], 3, BOOL____00027) :: defines_var(BOOL____00027);
constraint int_eq_reif(x[2], 1, BOOL____00003) :: defines_var(BOOL____00003);
constraint int_eq_reif(x[2], 2, BOOL____00016) :: defines_var(BOOL____00016);
constraint int_eq_reif(x[2], 3, BOOL____00029) :: defines_var(BOOL____00029);
constraint int_eq_reif(x[3], 1, BOOL____00005) :: defines_var(BOOL____00005);
constraint int_eq_reif(x[3], 2, BOOL____00018) :: defines_var(BOOL____00018);
constraint int_eq_reif(x[3], 3, BOOL____00031) :: defines_var(BOOL____00031);
constraint int_eq_reif(x[4], 1, BOOL____00007) :: defines_var(BOOL____00007);
constraint int_eq_reif(x[4], 2, BOOL____00020) :: defines_var(BOOL____00020);
constraint int_eq_reif(x[4], 3, BOOL____00033) :: defines_var(BOOL____00033);
constraint int_eq_reif(x[5], 1, BOOL____00009) :: defines_var(BOOL____00009);
constraint int_eq_reif(x[5], 2, BOOL____00022) :: defines_var(BOOL____00022);
constraint int_eq_reif(x[5], 3, BOOL____00035) :: defines_var(BOOL____00035);
constraint int_eq_reif(x[6], 1, BOOL____00011) :: defines_var(BOOL____00011);
constraint int_eq_reif(x[6], 2, BOOL____00024) :: defines_var(BOOL____00024);
constraint int_eq_reif(x[6], 3, BOOL____00037) :: defines_var(BOOL____00037);
constraint int_lin_eq([1, 1, 1, 1, 1, 1], [INT____00028, INT____00030, INT____00032, INT____00034, INT____00036, INT____00038], 2);
constraint int_lin_eq([-1, 1, 1, 1, 1, 1, 1], [INT____00013, INT____00002, INT____00004, INT____00006, INT____00008, INT____00010, INT____00012], 0) :: defines_var(INT____00013);
constraint int_lin_eq([-1, 1, 1, 1, 1, 1, 1], [INT____00026, INT____00015, INT____00017, INT____00019, INT____00021, INT____00023, INT____00025], 0) :: defines_var(INT____00026);
constraint int_lin_eq([-1, 1, 1, 1, 1, 1, 1], [INT____00039, INT____00028, INT____00030, INT____00032, INT____00034, INT____00036, INT____00038], 0) :: defines_var(INT____00039);
constraint int_ne(x[1], 1);
solve satisfy;
