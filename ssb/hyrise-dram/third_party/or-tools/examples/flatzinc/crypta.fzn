predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var 0..9: A;
var 1..9: B;
var 0..9: C;
var 1..9: D;
var 0..9: E;
var 0..9: F;
var 1..9: G;
var 0..9: H;
var 0..9: I;
var 0..9: J;
array [1..10] of var 0..9: LD :: output_array([1..10]) = [A, B, C, D, E, F, G, H, I, J];
var 0..1: Sr1;
var 0..1: Sr2;
constraint all_different_int(LD);
constraint int_lin_eq([100001, -989000, 100001, 1900999, 10000, -1000, -10000, 110, -10000000], [A, B, E, F, G, H, I, J, Sr1], 0);
constraint int_lin_eq([900, 100, 1000001, -999000, -999, -9900, 120010, 999999, 1, -10000000], [A, B, C, D, F, H, I, J, Sr1, Sr2], 0);
constraint int_lin_eq([10001, 100001, -1, 100000, -1000, 1000, -100000, 10000, 1000, -9890, 1], [A, B, C, D, E, F, G, H, I, J, Sr2], 0);
solve  :: int_search(LD, first_fail, indomain, complete) satisfy;
