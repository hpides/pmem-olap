predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..25] of int: t = [7, 8, 5, 9, 10, 6, 7, 4, 8, 9, 9, 10, 7, 11, 12, 8, 9, 6, 10, 11, 4, 5, 2, 6, 7];
var 0..190: INT____00001 :: is_defined_var :: var_is_introduced;
var 0..190: the_sum :: output_var = INT____00001;
array [1..25] of var 0..1: x :: output_array([1..5, 1..5]);
constraint int_lin_eq([1, 1, 1, 1, 1], [x[1], x[2], x[3], x[4], x[5]], 1);
constraint int_lin_eq([1, 1, 1, 1, 1], [x[1], x[6], x[11], x[16], x[21]], 1);
constraint int_lin_eq([1, 1, 1, 1, 1], [x[2], x[7], x[12], x[17], x[22]], 1);
constraint int_lin_eq([1, 1, 1, 1, 1], [x[3], x[8], x[13], x[18], x[23]], 1);
constraint int_lin_eq([1, 1, 1, 1, 1], [x[4], x[9], x[14], x[19], x[24]], 1);
constraint int_lin_eq([1, 1, 1, 1, 1], [x[5], x[10], x[15], x[20], x[25]], 1);
constraint int_lin_eq([1, 1, 1, 1, 1], [x[6], x[7], x[8], x[9], x[10]], 1);
constraint int_lin_eq([1, 1, 1, 1, 1], [x[11], x[12], x[13], x[14], x[15]], 1);
constraint int_lin_eq([1, 1, 1, 1, 1], [x[16], x[17], x[18], x[19], x[20]], 1);
constraint int_lin_eq([1, 1, 1, 1, 1], [x[21], x[22], x[23], x[24], x[25]], 1);
constraint int_lin_eq([-1, 7, 8, 5, 9, 10, 6, 7, 4, 8, 9, 9, 10, 7, 11, 12, 8, 9, 6, 10, 11, 4, 5, 2, 6, 7], [INT____00001, x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10], x[11], x[12], x[13], x[14], x[15], x[16], x[17], x[18], x[19], x[20], x[21], x[22], x[23], x[24], x[25]], 0) :: defines_var(INT____00001);
solve satisfy;
