predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var 0..999999999: d____00001;
var 0..499999999: d____00002;
var 0..333333333: d____00003;
var 0..249999999: d____00004;
var 0..199999999: d____00005;
var 0..166666666: d____00006;
var 0..142857142: d____00007;
var 0..124999999: d____00008;
var 0..111111111: d____00009;
array [1..9] of var 0..999999999: t :: output_array([1..9]);
array [1..9] of var 1..9: x :: output_array([1..9]);
constraint all_different_int(x);
constraint int_lin_eq([1, -1], [d____00001, t[9]], 0);
constraint int_lin_eq([1, -1], [t[9], x[1]], 0);
constraint int_lin_eq([2, -1], [d____00002, t[8]], 0);
constraint int_lin_eq([3, -1], [d____00003, t[7]], 0);
constraint int_lin_eq([4, -1], [d____00004, t[6]], 0);
constraint int_lin_eq([5, -1], [d____00005, t[5]], 0);
constraint int_lin_eq([6, -1], [d____00006, t[4]], 0);
constraint int_lin_eq([7, -1], [d____00007, t[3]], 0);
constraint int_lin_eq([8, -1], [d____00008, t[2]], 0);
constraint int_lin_eq([9, -1], [d____00009, t[1]], 0);
constraint int_lin_eq([1, -10, -1], [t[8], x[1], x[2]], 0);
constraint int_lin_eq([1, -100, -10, -1], [t[7], x[1], x[2], x[3]], 0);
constraint int_lin_eq([1, -1000, -100, -10, -1], [t[6], x[1], x[2], x[3], x[4]], 0);
constraint int_lin_eq([1, -10000, -1000, -100, -10, -1], [t[5], x[1], x[2], x[3], x[4], x[5]], 0);
constraint int_lin_eq([1, -100000, -10000, -1000, -100, -10, -1], [t[4], x[1], x[2], x[3], x[4], x[5], x[6]], 0);
constraint int_lin_eq([1, -1000000, -100000, -10000, -1000, -100, -10, -1], [t[3], x[1], x[2], x[3], x[4], x[5], x[6], x[7]], 0);
constraint int_lin_eq([1, -10000000, -1000000, -100000, -10000, -1000, -100, -10, -1], [t[2], x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8]], 0);
constraint int_lin_eq([1, -100000000, -10000000, -1000000, -100000, -10000, -1000, -100, -10, -1], [t[1], x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9]], 0);
solve  :: int_search(x, occurrence, indomain_max, complete) satisfy;
