predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..3] of var 0..2: gcc____00001;
array [1..3] of var 0..2: gcc____00002;
array [1..3] of var 0..2: gcc____00003;
array [1..3] of var 0..2: gcc____00004;
array [1..3] of var 0..2: gcc____00005;
array [1..3] of var 0..2: gcc____00006;
array [1..3] of var 0..2: gcc____00007;
array [1..3] of var 0..2: gcc____00008;
array [1..3] of var 0..2: gcc____00009;
array [1..3] of var 0..2: gcc____00010;
array [1..3] of var 0..2: gcc____00011;
array [1..3] of var 0..2: gcc____00012;
array [1..3] of var 0..2: gcc____00013;
array [1..3] of var 0..2: gcc____00014;
array [1..3] of var 0..2: gcc____00015;
array [1..3] of var 0..2: gcc____00016;
array [1..16] of var 0..2: x :: output_array([1..4, 1..4]);
constraint global_cardinality([x[1], x[2], x[3]], [0, 1, 2], gcc____00001) :: domain;
constraint global_cardinality([x[1], x[5], x[9]], [0, 1, 2], gcc____00003) :: domain;
constraint global_cardinality([x[2], x[3], x[4]], [0, 1, 2], gcc____00002) :: domain;
constraint global_cardinality([x[2], x[6], x[10]], [0, 1, 2], gcc____00007) :: domain;
constraint global_cardinality([x[3], x[7], x[11]], [0, 1, 2], gcc____00011) :: domain;
constraint global_cardinality([x[4], x[8], x[12]], [0, 1, 2], gcc____00015) :: domain;
constraint global_cardinality([x[5], x[6], x[7]], [0, 1, 2], gcc____00005) :: domain;
constraint global_cardinality([x[5], x[9], x[13]], [0, 1, 2], gcc____00004) :: domain;
constraint global_cardinality([x[6], x[7], x[8]], [0, 1, 2], gcc____00006) :: domain;
constraint global_cardinality([x[6], x[10], x[14]], [0, 1, 2], gcc____00008) :: domain;
constraint global_cardinality([x[7], x[11], x[15]], [0, 1, 2], gcc____00012) :: domain;
constraint global_cardinality([x[8], x[12], x[16]], [0, 1, 2], gcc____00016) :: domain;
constraint global_cardinality([x[9], x[10], x[11]], [0, 1, 2], gcc____00009) :: domain;
constraint global_cardinality([x[10], x[11], x[12]], [0, 1, 2], gcc____00010) :: domain;
constraint global_cardinality([x[13], x[14], x[15]], [0, 1, 2], gcc____00013) :: domain;
constraint global_cardinality([x[14], x[15], x[16]], [0, 1, 2], gcc____00014) :: domain;
solve satisfy;
