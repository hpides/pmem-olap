predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..4] of int: one = [1, 1, 1, 1];
array [1..16] of int: reading_order = [2, 1, 3, 4, 1, 3, 2, 4, 2, 3, 1, 4, 3, 2, 4, 1];
array [1..16] of int: reading_times = [30, 60, 2, 5, 75, 25, 3, 10, 15, 10, 5, 30, 1, 1, 1, 90];
array [1..4] of int: start_times = [0, 15, 15, 60];
var 0..200: INT____00001 :: is_defined_var :: var_is_introduced;
var 0..200: INT____00002 :: is_defined_var :: var_is_introduced;
var 0..200: INT____00003 :: is_defined_var :: var_is_introduced;
var 0..200: INT____00004 :: is_defined_var :: var_is_introduced;
var 0..200: INT____00005 :: is_defined_var :: var_is_introduced;
var 0..200: INT____00006 :: is_defined_var :: var_is_introduced;
var 0..200: INT____00007 :: is_defined_var :: var_is_introduced;
var 0..200: INT____00008 :: is_defined_var :: var_is_introduced;
var 0..200: INT____00009 :: is_defined_var :: var_is_introduced;
var 0..200: INT____00010 :: is_defined_var :: var_is_introduced;
var 0..200: INT____00011 :: is_defined_var :: var_is_introduced;
var 0..200: INT____00012 :: is_defined_var :: var_is_introduced;
var 0..200: INT____00013 :: is_defined_var :: var_is_introduced;
var 0..200: INT____00014 :: is_defined_var :: var_is_introduced;
var 0..200: INT____00015 :: is_defined_var :: var_is_introduced;
var 0..200: INT____00016 :: is_defined_var :: var_is_introduced;
var 0..200: earliest_end_time :: output_var = INT____00016;
array [1..16] of var 0..200: reading_end :: output_array([1..4, 1..4]);
array [1..16] of var 0..200: reading_start :: output_array([1..4, 1..4]);
constraint fixed_cumulative([reading_start[1], reading_start[5], reading_start[9], reading_start[13]], [30, 75, 15, 1], one, 1);
constraint fixed_cumulative([reading_start[2], reading_start[6], reading_start[10], reading_start[14]], [60, 25, 10, 1], one, 1);
constraint fixed_cumulative([reading_start[3], reading_start[7], reading_start[11], reading_start[15]], [2, 3, 5, 1], one, 1);
constraint fixed_cumulative([reading_start[4], reading_start[8], reading_start[12], reading_start[16]], [5, 10, 30, 90], one, 1);
constraint int_le(15, reading_start[5]);
constraint int_le(15, reading_start[6]);
constraint int_le(15, reading_start[7]);
constraint int_le(15, reading_start[8]);
constraint int_le(15, reading_start[9]);
constraint int_le(15, reading_start[10]);
constraint int_le(15, reading_start[11]);
constraint int_le(15, reading_start[12]);
constraint int_le(60, reading_start[13]);
constraint int_le(60, reading_start[14]);
constraint int_le(60, reading_start[15]);
constraint int_le(60, reading_start[16]);
constraint int_le(reading_end[1], reading_start[3]);
constraint int_le(reading_end[1], reading_start[4]);
constraint int_le(reading_end[2], reading_start[1]);
constraint int_le(reading_end[2], reading_start[3]);
constraint int_le(reading_end[2], reading_start[4]);
constraint int_le(reading_end[3], reading_start[4]);
constraint int_le(reading_end[5], reading_start[6]);
constraint int_le(reading_end[5], reading_start[7]);
constraint int_le(reading_end[5], reading_start[8]);
constraint int_le(reading_end[6], reading_start[8]);
constraint int_le(reading_end[7], reading_start[6]);
constraint int_le(reading_end[7], reading_start[8]);
constraint int_le(reading_end[9], reading_start[10]);
constraint int_le(reading_end[9], reading_start[12]);
constraint int_le(reading_end[10], reading_start[12]);
constraint int_le(reading_end[11], reading_start[9]);
constraint int_le(reading_end[11], reading_start[10]);
constraint int_le(reading_end[11], reading_start[12]);
constraint int_le(reading_end[13], reading_start[15]);
constraint int_le(reading_end[14], reading_start[13]);
constraint int_le(reading_end[14], reading_start[15]);
constraint int_le(reading_end[16], reading_start[13]);
constraint int_le(reading_end[16], reading_start[14]);
constraint int_le(reading_end[16], reading_start[15]);
constraint int_lin_eq([1, -1], [reading_end[1], reading_start[1]], 30);
constraint int_lin_eq([1, -1], [reading_end[2], reading_start[2]], 60);
constraint int_lin_eq([1, -1], [reading_end[3], reading_start[3]], 2);
constraint int_lin_eq([1, -1], [reading_end[4], reading_start[4]], 5);
constraint int_lin_eq([1, -1], [reading_end[5], reading_start[5]], 75);
constraint int_lin_eq([1, -1], [reading_end[6], reading_start[6]], 25);
constraint int_lin_eq([1, -1], [reading_end[7], reading_start[7]], 3);
constraint int_lin_eq([1, -1], [reading_end[8], reading_start[8]], 10);
constraint int_lin_eq([1, -1], [reading_end[9], reading_start[9]], 15);
constraint int_lin_eq([1, -1], [reading_end[10], reading_start[10]], 10);
constraint int_lin_eq([1, -1], [reading_end[11], reading_start[11]], 5);
constraint int_lin_eq([1, -1], [reading_end[12], reading_start[12]], 30);
constraint int_lin_eq([1, -1], [reading_end[13], reading_start[13]], 1);
constraint int_lin_eq([1, -1], [reading_end[14], reading_start[14]], 1);
constraint int_lin_eq([1, -1], [reading_end[15], reading_start[15]], 1);
constraint int_lin_eq([1, -1], [reading_end[16], reading_start[16]], 90);
constraint int_max(reading_end[1], reading_end[1], INT____00001) :: defines_var(INT____00001);
constraint int_max(reading_end[2], INT____00001, INT____00002) :: defines_var(INT____00002);
constraint int_max(reading_end[3], INT____00002, INT____00003) :: defines_var(INT____00003);
constraint int_max(reading_end[4], INT____00003, INT____00004) :: defines_var(INT____00004);
constraint int_max(reading_end[5], INT____00004, INT____00005) :: defines_var(INT____00005);
constraint int_max(reading_end[6], INT____00005, INT____00006) :: defines_var(INT____00006);
constraint int_max(reading_end[7], INT____00006, INT____00007) :: defines_var(INT____00007);
constraint int_max(reading_end[8], INT____00007, INT____00008) :: defines_var(INT____00008);
constraint int_max(reading_end[9], INT____00008, INT____00009) :: defines_var(INT____00009);
constraint int_max(reading_end[10], INT____00009, INT____00010) :: defines_var(INT____00010);
constraint int_max(reading_end[11], INT____00010, INT____00011) :: defines_var(INT____00011);
constraint int_max(reading_end[12], INT____00011, INT____00012) :: defines_var(INT____00012);
constraint int_max(reading_end[13], INT____00012, INT____00013) :: defines_var(INT____00013);
constraint int_max(reading_end[14], INT____00013, INT____00014) :: defines_var(INT____00014);
constraint int_max(reading_end[15], INT____00014, INT____00015) :: defines_var(INT____00015);
constraint int_max(reading_end[16], INT____00015, INT____00016) :: defines_var(INT____00016);
solve  :: int_search([reading_start[1], reading_start[2], reading_start[3], reading_start[4], reading_start[5], reading_start[6], reading_start[7], reading_start[8], reading_start[9], reading_start[10], reading_start[11], reading_start[12], reading_start[13], reading_start[14], reading_start[15], reading_start[16]], first_fail, indomain_min, complete) minimize INT____00016;
