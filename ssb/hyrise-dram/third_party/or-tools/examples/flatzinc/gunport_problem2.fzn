var bool: BOOL____00001 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00003 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00005 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00007 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00009 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00011 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00013 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00015 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00017 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00019 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00021 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00023 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00025 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00027 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00029 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00031 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00002 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00004 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00006 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00008 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00010 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00012 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00014 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00016 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00018 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00020 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00022 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00024 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00026 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00028 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00030 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00032 :: is_defined_var :: var_is_introduced;
var 4..16: INT____00033 :: is_defined_var :: var_is_introduced;
array [1..16] of var 0..16: rt :: output_array([1..4, 1..4]);
var 0..16: sum_zeros :: output_var = INT____00033;
array [1..96] of var 0..1: x;
constraint bool2int(BOOL____00001, INT____00002) :: defines_var(INT____00002);
constraint bool2int(BOOL____00003, INT____00004) :: defines_var(INT____00004);
constraint bool2int(BOOL____00005, INT____00006) :: defines_var(INT____00006);
constraint bool2int(BOOL____00007, INT____00008) :: defines_var(INT____00008);
constraint bool2int(BOOL____00009, INT____00010) :: defines_var(INT____00010);
constraint bool2int(BOOL____00011, INT____00012) :: defines_var(INT____00012);
constraint bool2int(BOOL____00013, INT____00014) :: defines_var(INT____00014);
constraint bool2int(BOOL____00015, INT____00016) :: defines_var(INT____00016);
constraint bool2int(BOOL____00017, INT____00018) :: defines_var(INT____00018);
constraint bool2int(BOOL____00019, INT____00020) :: defines_var(INT____00020);
constraint bool2int(BOOL____00021, INT____00022) :: defines_var(INT____00022);
constraint bool2int(BOOL____00023, INT____00024) :: defines_var(INT____00024);
constraint bool2int(BOOL____00025, INT____00026) :: defines_var(INT____00026);
constraint bool2int(BOOL____00027, INT____00028) :: defines_var(INT____00028);
constraint bool2int(BOOL____00029, INT____00030) :: defines_var(INT____00030);
constraint bool2int(BOOL____00031, INT____00032) :: defines_var(INT____00032);
constraint int_eq_reif(rt[1], 0, BOOL____00001) :: defines_var(BOOL____00001);
constraint int_eq_reif(rt[2], 0, BOOL____00003) :: defines_var(BOOL____00003);
constraint int_eq_reif(rt[3], 0, BOOL____00005) :: defines_var(BOOL____00005);
constraint int_eq_reif(rt[4], 0, BOOL____00007) :: defines_var(BOOL____00007);
constraint int_eq_reif(rt[5], 0, BOOL____00009) :: defines_var(BOOL____00009);
constraint int_eq_reif(rt[6], 0, BOOL____00011) :: defines_var(BOOL____00011);
constraint int_eq_reif(rt[7], 0, BOOL____00013) :: defines_var(BOOL____00013);
constraint int_eq_reif(rt[8], 0, BOOL____00015) :: defines_var(BOOL____00015);
constraint int_eq_reif(rt[9], 0, BOOL____00017) :: defines_var(BOOL____00017);
constraint int_eq_reif(rt[10], 0, BOOL____00019) :: defines_var(BOOL____00019);
constraint int_eq_reif(rt[11], 0, BOOL____00021) :: defines_var(BOOL____00021);
constraint int_eq_reif(rt[12], 0, BOOL____00023) :: defines_var(BOOL____00023);
constraint int_eq_reif(rt[13], 0, BOOL____00025) :: defines_var(BOOL____00025);
constraint int_eq_reif(rt[14], 0, BOOL____00027) :: defines_var(BOOL____00027);
constraint int_eq_reif(rt[15], 0, BOOL____00029) :: defines_var(BOOL____00029);
constraint int_eq_reif(rt[16], 0, BOOL____00031) :: defines_var(BOOL____00031);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6], [rt[1], x[1], x[2], x[3], x[4], x[5], x[6]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6], [rt[2], x[7], x[8], x[9], x[10], x[11], x[12]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6], [rt[3], x[13], x[14], x[15], x[16], x[17], x[18]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6], [rt[4], x[19], x[20], x[21], x[22], x[23], x[24]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6], [rt[5], x[25], x[26], x[27], x[28], x[29], x[30]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6], [rt[6], x[31], x[32], x[33], x[34], x[35], x[36]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6], [rt[7], x[37], x[38], x[39], x[40], x[41], x[42]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6], [rt[8], x[43], x[44], x[45], x[46], x[47], x[48]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6], [rt[9], x[49], x[50], x[51], x[52], x[53], x[54]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6], [rt[10], x[55], x[56], x[57], x[58], x[59], x[60]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6], [rt[11], x[61], x[62], x[63], x[64], x[65], x[66]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6], [rt[12], x[67], x[68], x[69], x[70], x[71], x[72]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6], [rt[13], x[73], x[74], x[75], x[76], x[77], x[78]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6], [rt[14], x[79], x[80], x[81], x[82], x[83], x[84]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6], [rt[15], x[85], x[86], x[87], x[88], x[89], x[90]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6], [rt[16], x[91], x[92], x[93], x[94], x[95], x[96]], 0);
constraint int_lin_eq([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [x[1], x[7], x[13], x[19], x[25], x[31], x[37], x[43], x[49], x[55], x[61], x[67], x[73], x[79], x[85], x[91]], 2);
constraint int_lin_eq([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [x[2], x[8], x[14], x[20], x[26], x[32], x[38], x[44], x[50], x[56], x[62], x[68], x[74], x[80], x[86], x[92]], 2);
constraint int_lin_eq([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [x[3], x[9], x[15], x[21], x[27], x[33], x[39], x[45], x[51], x[57], x[63], x[69], x[75], x[81], x[87], x[93]], 2);
constraint int_lin_eq([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [x[4], x[10], x[16], x[22], x[28], x[34], x[40], x[46], x[52], x[58], x[64], x[70], x[76], x[82], x[88], x[94]], 2);
constraint int_lin_eq([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [x[5], x[11], x[17], x[23], x[29], x[35], x[41], x[47], x[53], x[59], x[65], x[71], x[77], x[83], x[89], x[95]], 2);
constraint int_lin_eq([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [x[6], x[12], x[18], x[24], x[30], x[36], x[42], x[48], x[54], x[60], x[66], x[72], x[78], x[84], x[90], x[96]], 2);
constraint int_lin_eq([-1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [INT____00033, INT____00002, INT____00004, INT____00006, INT____00008, INT____00010, INT____00012, INT____00014, INT____00016, INT____00018, INT____00020, INT____00022, INT____00024, INT____00026, INT____00028, INT____00030, INT____00032], 0) :: defines_var(INT____00033);
constraint int_lin_le([-1, -1, 1], [x[67], x[85], x[91]], 0);
constraint int_lin_le([-1, -1, 1], [x[68], x[86], x[92]], 0);
constraint int_lin_le([-1, -1, 1], [x[69], x[87], x[93]], 0);
constraint int_lin_le([-1, -1, 1], [x[70], x[88], x[94]], 0);
constraint int_lin_le([-1, -1, 1], [x[71], x[89], x[95]], 0);
constraint int_lin_le([-1, -1, 1], [x[72], x[90], x[96]], 0);
constraint int_lin_le([-1, 1, -1], [x[13], x[19], x[43]], 0);
constraint int_lin_le([-1, 1, -1], [x[14], x[20], x[44]], 0);
constraint int_lin_le([-1, 1, -1], [x[15], x[21], x[45]], 0);
constraint int_lin_le([-1, 1, -1], [x[16], x[22], x[46]], 0);
constraint int_lin_le([-1, 1, -1], [x[17], x[23], x[47]], 0);
constraint int_lin_le([-1, 1, -1], [x[18], x[24], x[48]], 0);
constraint int_lin_le([-1, 1, -1], [x[49], x[73], x[79]], 0);
constraint int_lin_le([-1, 1, -1], [x[50], x[74], x[80]], 0);
constraint int_lin_le([-1, 1, -1], [x[51], x[75], x[81]], 0);
constraint int_lin_le([-1, 1, -1], [x[52], x[76], x[82]], 0);
constraint int_lin_le([-1, 1, -1], [x[53], x[77], x[83]], 0);
constraint int_lin_le([-1, 1, -1], [x[54], x[78], x[84]], 0);
constraint int_lin_le([1, -1, -1], [x[1], x[7], x[25]], 0);
constraint int_lin_le([1, -1, -1], [x[2], x[8], x[26]], 0);
constraint int_lin_le([1, -1, -1], [x[3], x[9], x[27]], 0);
constraint int_lin_le([1, -1, -1], [x[4], x[10], x[28]], 0);
constraint int_lin_le([1, -1, -1], [x[5], x[11], x[29]], 0);
constraint int_lin_le([1, -1, -1], [x[6], x[12], x[30]], 0);
constraint int_lin_le([-1, -1, 1, -1], [x[19], x[37], x[43], x[67]], 0);
constraint int_lin_le([-1, -1, 1, -1], [x[20], x[38], x[44], x[68]], 0);
constraint int_lin_le([-1, -1, 1, -1], [x[21], x[39], x[45], x[69]], 0);
constraint int_lin_le([-1, -1, 1, -1], [x[22], x[40], x[46], x[70]], 0);
constraint int_lin_le([-1, -1, 1, -1], [x[23], x[41], x[47], x[71]], 0);
constraint int_lin_le([-1, -1, 1, -1], [x[24], x[42], x[48], x[72]], 0);
constraint int_lin_le([-1, -1, 1, -1], [x[43], x[61], x[67], x[91]], 0);
constraint int_lin_le([-1, -1, 1, -1], [x[44], x[62], x[68], x[92]], 0);
constraint int_lin_le([-1, -1, 1, -1], [x[45], x[63], x[69], x[93]], 0);
constraint int_lin_le([-1, -1, 1, -1], [x[46], x[64], x[70], x[94]], 0);
constraint int_lin_le([-1, -1, 1, -1], [x[47], x[65], x[71], x[95]], 0);
constraint int_lin_le([-1, -1, 1, -1], [x[48], x[66], x[72], x[96]], 0);
constraint int_lin_le([-1, -1, 1, -1], [x[55], x[73], x[79], x[85]], 0);
constraint int_lin_le([-1, -1, 1, -1], [x[56], x[74], x[80], x[86]], 0);
constraint int_lin_le([-1, -1, 1, -1], [x[57], x[75], x[81], x[87]], 0);
constraint int_lin_le([-1, -1, 1, -1], [x[58], x[76], x[82], x[88]], 0);
constraint int_lin_le([-1, -1, 1, -1], [x[59], x[77], x[83], x[89]], 0);
constraint int_lin_le([-1, -1, 1, -1], [x[60], x[78], x[84], x[90]], 0);
constraint int_lin_le([-1, -1, 1, -1], [x[61], x[79], x[85], x[91]], 0);
constraint int_lin_le([-1, -1, 1, -1], [x[62], x[80], x[86], x[92]], 0);
constraint int_lin_le([-1, -1, 1, -1], [x[63], x[81], x[87], x[93]], 0);
constraint int_lin_le([-1, -1, 1, -1], [x[64], x[82], x[88], x[94]], 0);
constraint int_lin_le([-1, -1, 1, -1], [x[65], x[83], x[89], x[95]], 0);
constraint int_lin_le([-1, -1, 1, -1], [x[66], x[84], x[90], x[96]], 0);
constraint int_lin_le([-1, 1, -1, -1], [x[1], x[7], x[13], x[31]], 0);
constraint int_lin_le([-1, 1, -1, -1], [x[1], x[25], x[31], x[49]], 0);
constraint int_lin_le([-1, 1, -1, -1], [x[2], x[8], x[14], x[32]], 0);
constraint int_lin_le([-1, 1, -1, -1], [x[2], x[26], x[32], x[50]], 0);
constraint int_lin_le([-1, 1, -1, -1], [x[3], x[9], x[15], x[33]], 0);
constraint int_lin_le([-1, 1, -1, -1], [x[3], x[27], x[33], x[51]], 0);
constraint int_lin_le([-1, 1, -1, -1], [x[4], x[10], x[16], x[34]], 0);
constraint int_lin_le([-1, 1, -1, -1], [x[4], x[28], x[34], x[52]], 0);
constraint int_lin_le([-1, 1, -1, -1], [x[5], x[11], x[17], x[35]], 0);
constraint int_lin_le([-1, 1, -1, -1], [x[5], x[29], x[35], x[53]], 0);
constraint int_lin_le([-1, 1, -1, -1], [x[6], x[12], x[18], x[36]], 0);
constraint int_lin_le([-1, 1, -1, -1], [x[6], x[30], x[36], x[54]], 0);
constraint int_lin_le([-1, 1, -1, -1], [x[7], x[13], x[19], x[37]], 0);
constraint int_lin_le([-1, 1, -1, -1], [x[8], x[14], x[20], x[38]], 0);
constraint int_lin_le([-1, 1, -1, -1], [x[9], x[15], x[21], x[39]], 0);
constraint int_lin_le([-1, 1, -1, -1], [x[10], x[16], x[22], x[40]], 0);
constraint int_lin_le([-1, 1, -1, -1], [x[11], x[17], x[23], x[41]], 0);
constraint int_lin_le([-1, 1, -1, -1], [x[12], x[18], x[24], x[42]], 0);
constraint int_lin_le([-1, 1, -1, -1], [x[25], x[49], x[55], x[73]], 0);
constraint int_lin_le([-1, 1, -1, -1], [x[26], x[50], x[56], x[74]], 0);
constraint int_lin_le([-1, 1, -1, -1], [x[27], x[51], x[57], x[75]], 0);
constraint int_lin_le([-1, 1, -1, -1], [x[28], x[52], x[58], x[76]], 0);
constraint int_lin_le([-1, 1, -1, -1], [x[29], x[53], x[59], x[77]], 0);
constraint int_lin_le([-1, 1, -1, -1], [x[30], x[54], x[60], x[78]], 0);
constraint int_lin_le([-1, -1, 1, -1, -1], [x[7], x[25], x[31], x[37], x[55]], 0);
constraint int_lin_le([-1, -1, 1, -1, -1], [x[8], x[26], x[32], x[38], x[56]], 0);
constraint int_lin_le([-1, -1, 1, -1, -1], [x[9], x[27], x[33], x[39], x[57]], 0);
constraint int_lin_le([-1, -1, 1, -1, -1], [x[10], x[28], x[34], x[40], x[58]], 0);
constraint int_lin_le([-1, -1, 1, -1, -1], [x[11], x[29], x[35], x[41], x[59]], 0);
constraint int_lin_le([-1, -1, 1, -1, -1], [x[12], x[30], x[36], x[42], x[60]], 0);
constraint int_lin_le([-1, -1, 1, -1, -1], [x[13], x[31], x[37], x[43], x[61]], 0);
constraint int_lin_le([-1, -1, 1, -1, -1], [x[14], x[32], x[38], x[44], x[62]], 0);
constraint int_lin_le([-1, -1, 1, -1, -1], [x[15], x[33], x[39], x[45], x[63]], 0);
constraint int_lin_le([-1, -1, 1, -1, -1], [x[16], x[34], x[40], x[46], x[64]], 0);
constraint int_lin_le([-1, -1, 1, -1, -1], [x[17], x[35], x[41], x[47], x[65]], 0);
constraint int_lin_le([-1, -1, 1, -1, -1], [x[18], x[36], x[42], x[48], x[66]], 0);
constraint int_lin_le([-1, -1, 1, -1, -1], [x[31], x[49], x[55], x[61], x[79]], 0);
constraint int_lin_le([-1, -1, 1, -1, -1], [x[32], x[50], x[56], x[62], x[80]], 0);
constraint int_lin_le([-1, -1, 1, -1, -1], [x[33], x[51], x[57], x[63], x[81]], 0);
constraint int_lin_le([-1, -1, 1, -1, -1], [x[34], x[52], x[58], x[64], x[82]], 0);
constraint int_lin_le([-1, -1, 1, -1, -1], [x[35], x[53], x[59], x[65], x[83]], 0);
constraint int_lin_le([-1, -1, 1, -1, -1], [x[36], x[54], x[60], x[66], x[84]], 0);
constraint int_lin_le([-1, -1, 1, -1, -1], [x[37], x[55], x[61], x[67], x[85]], 0);
constraint int_lin_le([-1, -1, 1, -1, -1], [x[38], x[56], x[62], x[68], x[86]], 0);
constraint int_lin_le([-1, -1, 1, -1, -1], [x[39], x[57], x[63], x[69], x[87]], 0);
constraint int_lin_le([-1, -1, 1, -1, -1], [x[40], x[58], x[64], x[70], x[88]], 0);
constraint int_lin_le([-1, -1, 1, -1, -1], [x[41], x[59], x[65], x[71], x[89]], 0);
constraint int_lin_le([-1, -1, 1, -1, -1], [x[42], x[60], x[66], x[72], x[90]], 0);
constraint int_lin_le([1, 1, 1, 1, 1, 1], [x[1], x[2], x[3], x[4], x[5], x[6]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1], [x[7], x[8], x[9], x[10], x[11], x[12]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1], [x[13], x[14], x[15], x[16], x[17], x[18]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1], [x[19], x[20], x[21], x[22], x[23], x[24]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1], [x[25], x[26], x[27], x[28], x[29], x[30]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1], [x[31], x[32], x[33], x[34], x[35], x[36]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1], [x[37], x[38], x[39], x[40], x[41], x[42]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1], [x[43], x[44], x[45], x[46], x[47], x[48]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1], [x[49], x[50], x[51], x[52], x[53], x[54]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1], [x[55], x[56], x[57], x[58], x[59], x[60]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1], [x[61], x[62], x[63], x[64], x[65], x[66]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1], [x[67], x[68], x[69], x[70], x[71], x[72]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1], [x[73], x[74], x[75], x[76], x[77], x[78]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1], [x[79], x[80], x[81], x[82], x[83], x[84]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1], [x[85], x[86], x[87], x[88], x[89], x[90]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1], [x[91], x[92], x[93], x[94], x[95], x[96]], 1);
constraint int_lin_le([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10], x[11], x[12]], -1);
constraint int_lin_le([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [x[1], x[2], x[3], x[4], x[5], x[6], x[25], x[26], x[27], x[28], x[29], x[30]], -1);
constraint int_lin_le([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [x[7], x[8], x[9], x[10], x[11], x[12], x[13], x[14], x[15], x[16], x[17], x[18]], -1);
constraint int_lin_le([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [x[7], x[8], x[9], x[10], x[11], x[12], x[31], x[32], x[33], x[34], x[35], x[36]], -1);
constraint int_lin_le([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [x[13], x[14], x[15], x[16], x[17], x[18], x[19], x[20], x[21], x[22], x[23], x[24]], -1);
constraint int_lin_le([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [x[13], x[14], x[15], x[16], x[17], x[18], x[37], x[38], x[39], x[40], x[41], x[42]], -1);
constraint int_lin_le([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [x[19], x[20], x[21], x[22], x[23], x[24], x[43], x[44], x[45], x[46], x[47], x[48]], -1);
constraint int_lin_le([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [x[25], x[26], x[27], x[28], x[29], x[30], x[31], x[32], x[33], x[34], x[35], x[36]], -1);
constraint int_lin_le([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [x[25], x[26], x[27], x[28], x[29], x[30], x[49], x[50], x[51], x[52], x[53], x[54]], -1);
constraint int_lin_le([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [x[31], x[32], x[33], x[34], x[35], x[36], x[37], x[38], x[39], x[40], x[41], x[42]], -1);
constraint int_lin_le([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [x[31], x[32], x[33], x[34], x[35], x[36], x[55], x[56], x[57], x[58], x[59], x[60]], -1);
constraint int_lin_le([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [x[37], x[38], x[39], x[40], x[41], x[42], x[43], x[44], x[45], x[46], x[47], x[48]], -1);
constraint int_lin_le([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [x[37], x[38], x[39], x[40], x[41], x[42], x[61], x[62], x[63], x[64], x[65], x[66]], -1);
constraint int_lin_le([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [x[43], x[44], x[45], x[46], x[47], x[48], x[67], x[68], x[69], x[70], x[71], x[72]], -1);
constraint int_lin_le([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [x[49], x[50], x[51], x[52], x[53], x[54], x[55], x[56], x[57], x[58], x[59], x[60]], -1);
constraint int_lin_le([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [x[49], x[50], x[51], x[52], x[53], x[54], x[73], x[74], x[75], x[76], x[77], x[78]], -1);
constraint int_lin_le([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [x[55], x[56], x[57], x[58], x[59], x[60], x[61], x[62], x[63], x[64], x[65], x[66]], -1);
constraint int_lin_le([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [x[55], x[56], x[57], x[58], x[59], x[60], x[79], x[80], x[81], x[82], x[83], x[84]], -1);
constraint int_lin_le([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [x[61], x[62], x[63], x[64], x[65], x[66], x[67], x[68], x[69], x[70], x[71], x[72]], -1);
constraint int_lin_le([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [x[61], x[62], x[63], x[64], x[65], x[66], x[85], x[86], x[87], x[88], x[89], x[90]], -1);
constraint int_lin_le([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [x[67], x[68], x[69], x[70], x[71], x[72], x[91], x[92], x[93], x[94], x[95], x[96]], -1);
constraint int_lin_le([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [x[73], x[74], x[75], x[76], x[77], x[78], x[79], x[80], x[81], x[82], x[83], x[84]], -1);
constraint int_lin_le([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [x[79], x[80], x[81], x[82], x[83], x[84], x[85], x[86], x[87], x[88], x[89], x[90]], -1);
constraint int_lin_le([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [x[85], x[86], x[87], x[88], x[89], x[90], x[91], x[92], x[93], x[94], x[95], x[96]], -1);
solve  :: int_search([x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10], x[11], x[12], x[13], x[14], x[15], x[16], x[17], x[18], x[19], x[20], x[21], x[22], x[23], x[24], x[25], x[26], x[27], x[28], x[29], x[30], x[31], x[32], x[33], x[34], x[35], x[36], x[37], x[38], x[39], x[40], x[41], x[42], x[43], x[44], x[45], x[46], x[47], x[48], x[49], x[50], x[51], x[52], x[53], x[54], x[55], x[56], x[57], x[58], x[59], x[60], x[61], x[62], x[63], x[64], x[65], x[66], x[67], x[68], x[69], x[70], x[71], x[72], x[73], x[74], x[75], x[76], x[77], x[78], x[79], x[80], x[81], x[82], x[83], x[84], x[85], x[86], x[87], x[88], x[89], x[90], x[91], x[92], x[93], x[94], x[95], x[96]], first_fail, indomain, complete) satisfy;
