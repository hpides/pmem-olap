predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..8] of int: color_cost = [100, 200, 300, 400, 500, 600, 700, 800];
array [1..16] of set of int: neighbours = [2..3, {1, 3, 9}, {2, 4, 8, 9}, {3, 5, 8}, {4, 6, 8}, {5, 7, 8}, {6, 8}, {3, 4, 5, 6, 7, 9, 10, 11, 14}, {1, 2, 3, 8, 10, 12}, {8, 9, 11, 12, 13}, {8, 10, 13, 14}, {9, 10, 13}, {10, 11, 12, 14, 15}, {8, 11, 13}, {13, 16}, 15..15];
var bool: BOOL____00001 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00004 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00007 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00010 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00013 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00016 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00019 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00022 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00025 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00028 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00031 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00034 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00037 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00040 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00043 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00046 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00049 :: is_defined_var :: var_is_introduced;
var 1..8: INT____00002 :: is_defined_var :: var_is_introduced;
var 100..800: INT____00003 :: is_defined_var :: var_is_introduced;
var 1..8: INT____00005 :: is_defined_var :: var_is_introduced;
var 100..800: INT____00006 :: is_defined_var :: var_is_introduced;
var 1..8: INT____00008 :: is_defined_var :: var_is_introduced;
var 100..800: INT____00009 :: is_defined_var :: var_is_introduced;
var 1..8: INT____00011 :: is_defined_var :: var_is_introduced;
var 100..800: INT____00012 :: is_defined_var :: var_is_introduced;
var 1..8: INT____00014 :: is_defined_var :: var_is_introduced;
var 100..800: INT____00015 :: is_defined_var :: var_is_introduced;
var 1..8: INT____00017 :: is_defined_var :: var_is_introduced;
var 100..800: INT____00018 :: is_defined_var :: var_is_introduced;
var 1..8: INT____00020 :: is_defined_var :: var_is_introduced;
var 100..800: INT____00021 :: is_defined_var :: var_is_introduced;
var 1..8: INT____00023 :: is_defined_var :: var_is_introduced;
var 100..800: INT____00024 :: is_defined_var :: var_is_introduced;
var 1..8: INT____00026 :: is_defined_var :: var_is_introduced;
var 100..800: INT____00027 :: is_defined_var :: var_is_introduced;
var 1..8: INT____00029 :: is_defined_var :: var_is_introduced;
var 100..800: INT____00030 :: is_defined_var :: var_is_introduced;
var 1..8: INT____00032 :: is_defined_var :: var_is_introduced;
var 100..800: INT____00033 :: is_defined_var :: var_is_introduced;
var 1..8: INT____00035 :: is_defined_var :: var_is_introduced;
var 100..800: INT____00036 :: is_defined_var :: var_is_introduced;
var 1..8: INT____00038 :: is_defined_var :: var_is_introduced;
var 100..800: INT____00039 :: is_defined_var :: var_is_introduced;
var 1..8: INT____00041 :: is_defined_var :: var_is_introduced;
var 100..800: INT____00042 :: is_defined_var :: var_is_introduced;
var 1..8: INT____00044 :: is_defined_var :: var_is_introduced;
var 100..800: INT____00045 :: is_defined_var :: var_is_introduced;
var 1..8: INT____00047 :: is_defined_var :: var_is_introduced;
var 100..800: INT____00048 :: is_defined_var :: var_is_introduced;
var 0..12800: total :: output_var;
array [1..16] of var 1..16: x :: output_array([1..16]);
constraint array_bool_and([BOOL____00049, BOOL____00046, BOOL____00046, BOOL____00043, BOOL____00043, BOOL____00040, BOOL____00040, BOOL____00037, BOOL____00037, BOOL____00034, BOOL____00034, BOOL____00031, BOOL____00031, BOOL____00028, BOOL____00028, BOOL____00025, BOOL____00025, BOOL____00022, BOOL____00022, BOOL____00019, BOOL____00019, BOOL____00016, BOOL____00016, BOOL____00013, BOOL____00013, BOOL____00010, BOOL____00010, BOOL____00007, BOOL____00007, BOOL____00004, BOOL____00004, BOOL____00001, BOOL____00001], true);
constraint array_int_element(INT____00002, color_cost, INT____00003) :: defines_var(INT____00003);
constraint array_int_element(INT____00005, color_cost, INT____00006) :: defines_var(INT____00006);
constraint array_int_element(INT____00008, color_cost, INT____00009) :: defines_var(INT____00009);
constraint array_int_element(INT____00011, color_cost, INT____00012) :: defines_var(INT____00012);
constraint array_int_element(INT____00014, color_cost, INT____00015) :: defines_var(INT____00015);
constraint array_int_element(INT____00017, color_cost, INT____00018) :: defines_var(INT____00018);
constraint array_int_element(INT____00020, color_cost, INT____00021) :: defines_var(INT____00021);
constraint array_int_element(INT____00023, color_cost, INT____00024) :: defines_var(INT____00024);
constraint array_int_element(INT____00026, color_cost, INT____00027) :: defines_var(INT____00027);
constraint array_int_element(INT____00029, color_cost, INT____00030) :: defines_var(INT____00030);
constraint array_int_element(INT____00032, color_cost, INT____00033) :: defines_var(INT____00033);
constraint array_int_element(INT____00035, color_cost, INT____00036) :: defines_var(INT____00036);
constraint array_int_element(INT____00038, color_cost, INT____00039) :: defines_var(INT____00039);
constraint array_int_element(INT____00041, color_cost, INT____00042) :: defines_var(INT____00042);
constraint array_int_element(INT____00044, color_cost, INT____00045) :: defines_var(INT____00045);
constraint array_int_element(INT____00047, color_cost, INT____00048) :: defines_var(INT____00048);
constraint int_eq_reif(x[1], INT____00002, BOOL____00001);
constraint int_eq_reif(x[2], INT____00005, BOOL____00004);
constraint int_eq_reif(x[3], INT____00008, BOOL____00007);
constraint int_eq_reif(x[4], INT____00011, BOOL____00010);
constraint int_eq_reif(x[5], INT____00014, BOOL____00013);
constraint int_eq_reif(x[6], INT____00017, BOOL____00016);
constraint int_eq_reif(x[7], INT____00020, BOOL____00019);
constraint int_eq_reif(x[8], INT____00023, BOOL____00022);
constraint int_eq_reif(x[9], INT____00026, BOOL____00025);
constraint int_eq_reif(x[10], INT____00029, BOOL____00028);
constraint int_eq_reif(x[11], INT____00032, BOOL____00031);
constraint int_eq_reif(x[12], INT____00035, BOOL____00034);
constraint int_eq_reif(x[13], INT____00038, BOOL____00037);
constraint int_eq_reif(x[14], INT____00041, BOOL____00040);
constraint int_eq_reif(x[15], INT____00044, BOOL____00043);
constraint int_eq_reif(x[16], INT____00047, BOOL____00046);
constraint int_le(x[1], 4);
constraint int_le(x[2], 4);
constraint int_le(x[3], 4);
constraint int_le(x[4], 4);
constraint int_le(x[5], 4);
constraint int_le(x[6], 4);
constraint int_le(x[7], 4);
constraint int_le(x[8], 4);
constraint int_le(x[9], 4);
constraint int_le(x[10], 4);
constraint int_le(x[11], 4);
constraint int_le(x[12], 4);
constraint int_le(x[13], 4);
constraint int_le(x[14], 4);
constraint int_le(x[15], 4);
constraint int_le(x[16], 4);
constraint int_le_reif(x[1], 8, BOOL____00001) :: defines_var(BOOL____00001);
constraint int_le_reif(x[2], 8, BOOL____00004) :: defines_var(BOOL____00004);
constraint int_le_reif(x[3], 8, BOOL____00007) :: defines_var(BOOL____00007);
constraint int_le_reif(x[4], 8, BOOL____00010) :: defines_var(BOOL____00010);
constraint int_le_reif(x[5], 8, BOOL____00013) :: defines_var(BOOL____00013);
constraint int_le_reif(x[6], 8, BOOL____00016) :: defines_var(BOOL____00016);
constraint int_le_reif(x[7], 8, BOOL____00019) :: defines_var(BOOL____00019);
constraint int_le_reif(x[8], 8, BOOL____00022) :: defines_var(BOOL____00022);
constraint int_le_reif(x[9], 8, BOOL____00025) :: defines_var(BOOL____00025);
constraint int_le_reif(x[10], 8, BOOL____00028) :: defines_var(BOOL____00028);
constraint int_le_reif(x[11], 8, BOOL____00031) :: defines_var(BOOL____00031);
constraint int_le_reif(x[12], 8, BOOL____00034) :: defines_var(BOOL____00034);
constraint int_le_reif(x[13], 8, BOOL____00037) :: defines_var(BOOL____00037);
constraint int_le_reif(x[14], 8, BOOL____00040) :: defines_var(BOOL____00040);
constraint int_le_reif(x[15], 8, BOOL____00043) :: defines_var(BOOL____00043);
constraint int_le_reif(x[16], 8, BOOL____00046) :: defines_var(BOOL____00046);
constraint int_lin_eq_reif([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1], [INT____00003, INT____00006, INT____00009, INT____00012, INT____00015, INT____00018, INT____00021, INT____00024, INT____00027, INT____00030, INT____00033, INT____00036, INT____00039, INT____00042, INT____00045, INT____00048, total], 0, BOOL____00049) :: defines_var(BOOL____00049);
constraint int_ne(x[1], x[2]);
constraint int_ne(x[1], x[3]);
constraint int_ne(x[2], x[1]);
constraint int_ne(x[2], x[3]);
constraint int_ne(x[2], x[9]);
constraint int_ne(x[3], x[2]);
constraint int_ne(x[3], x[4]);
constraint int_ne(x[3], x[8]);
constraint int_ne(x[3], x[9]);
constraint int_ne(x[4], x[3]);
constraint int_ne(x[4], x[5]);
constraint int_ne(x[4], x[8]);
constraint int_ne(x[5], x[4]);
constraint int_ne(x[5], x[6]);
constraint int_ne(x[5], x[8]);
constraint int_ne(x[6], x[5]);
constraint int_ne(x[6], x[7]);
constraint int_ne(x[6], x[8]);
constraint int_ne(x[7], x[6]);
constraint int_ne(x[7], x[8]);
constraint int_ne(x[8], x[3]);
constraint int_ne(x[8], x[4]);
constraint int_ne(x[8], x[5]);
constraint int_ne(x[8], x[6]);
constraint int_ne(x[8], x[7]);
constraint int_ne(x[8], x[9]);
constraint int_ne(x[8], x[10]);
constraint int_ne(x[8], x[11]);
constraint int_ne(x[8], x[14]);
constraint int_ne(x[9], x[1]);
constraint int_ne(x[9], x[2]);
constraint int_ne(x[9], x[3]);
constraint int_ne(x[9], x[8]);
constraint int_ne(x[9], x[10]);
constraint int_ne(x[9], x[12]);
constraint int_ne(x[10], x[8]);
constraint int_ne(x[10], x[9]);
constraint int_ne(x[10], x[11]);
constraint int_ne(x[10], x[12]);
constraint int_ne(x[10], x[13]);
constraint int_ne(x[11], x[8]);
constraint int_ne(x[11], x[10]);
constraint int_ne(x[11], x[13]);
constraint int_ne(x[11], x[14]);
constraint int_ne(x[12], x[9]);
constraint int_ne(x[12], x[10]);
constraint int_ne(x[12], x[13]);
constraint int_ne(x[13], x[10]);
constraint int_ne(x[13], x[11]);
constraint int_ne(x[13], x[12]);
constraint int_ne(x[13], x[14]);
constraint int_ne(x[13], x[15]);
constraint int_ne(x[14], x[8]);
constraint int_ne(x[14], x[11]);
constraint int_ne(x[14], x[13]);
constraint int_ne(x[15], x[13]);
constraint int_ne(x[15], x[16]);
constraint int_ne(x[16], x[15]);
solve minimize total;
