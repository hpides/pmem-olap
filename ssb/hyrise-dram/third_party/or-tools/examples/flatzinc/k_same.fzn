predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..9] of var 0..9: i_gcc____00001;
array [1..9] of var 0..9: i_gcc____00003;
array [1..9] of var 0..9: j_gcc____00002;
array [1..9] of var 0..9: j_gcc____00004;
array [1..18] of var 1..9: x :: output_array([1..3, 1..6]);
constraint global_cardinality([x[1], x[2], x[3], x[4], x[5], x[6]], [1, 2, 3, 4, 5, 6, 7, 8, 9], j_gcc____00002);
constraint global_cardinality([x[7], x[8], x[9], x[10], x[11], x[12]], [1, 2, 3, 4, 5, 6, 7, 8, 9], i_gcc____00001);
constraint global_cardinality([x[7], x[8], x[9], x[10], x[11], x[12]], [1, 2, 3, 4, 5, 6, 7, 8, 9], j_gcc____00004);
constraint global_cardinality([x[13], x[14], x[15], x[16], x[17], x[18]], [1, 2, 3, 4, 5, 6, 7, 8, 9], i_gcc____00003);
constraint int_eq(1, x[1]);
constraint int_eq(1, x[3]);
constraint int_eq(1, x[6]);
constraint int_eq(1, x[8]);
constraint int_eq(1, x[9]);
constraint int_eq(1, x[10]);
constraint int_eq(1, x[15]);
constraint int_eq(1, x[16]);
constraint int_eq(1, x[18]);
constraint int_eq(2, x[5]);
constraint int_eq(2, x[11]);
constraint int_eq(2, x[14]);
constraint int_eq(5, x[4]);
constraint int_eq(5, x[12]);
constraint int_eq(5, x[13]);
constraint int_eq(9, x[2]);
constraint int_eq(9, x[7]);
constraint int_eq(9, x[17]);
constraint int_eq(i_gcc____00001[1], j_gcc____00002[1]);
constraint int_eq(i_gcc____00001[2], j_gcc____00002[2]);
constraint int_eq(i_gcc____00001[3], j_gcc____00002[3]);
constraint int_eq(i_gcc____00001[4], j_gcc____00002[4]);
constraint int_eq(i_gcc____00001[5], j_gcc____00002[5]);
constraint int_eq(i_gcc____00001[6], j_gcc____00002[6]);
constraint int_eq(i_gcc____00001[7], j_gcc____00002[7]);
constraint int_eq(i_gcc____00001[8], j_gcc____00002[8]);
constraint int_eq(i_gcc____00001[9], j_gcc____00002[9]);
constraint int_eq(i_gcc____00003[1], j_gcc____00004[1]);
constraint int_eq(i_gcc____00003[2], j_gcc____00004[2]);
constraint int_eq(i_gcc____00003[3], j_gcc____00004[3]);
constraint int_eq(i_gcc____00003[4], j_gcc____00004[4]);
constraint int_eq(i_gcc____00003[5], j_gcc____00004[5]);
constraint int_eq(i_gcc____00003[6], j_gcc____00004[6]);
constraint int_eq(i_gcc____00003[7], j_gcc____00004[7]);
constraint int_eq(i_gcc____00003[8], j_gcc____00004[8]);
constraint int_eq(i_gcc____00003[9], j_gcc____00004[9]);
solve  :: int_search([x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10], x[11], x[12], x[13], x[14], x[15], x[16], x[17], x[18]], anti_first_fail, indomain, complete) satisfy;
