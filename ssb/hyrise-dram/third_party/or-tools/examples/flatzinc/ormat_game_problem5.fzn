predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..3000] of int: overlays = [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1];
array [1..25] of int: problem = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0];
var bool: BOOL____00002 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00003 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00004 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00005 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00006 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00007 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00008 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00009 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00010 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00011 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00012 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00013 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00014 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00015 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00016 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00017 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00018 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00019 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00020 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00021 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00022 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00023 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00024 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00025 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00026 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00027 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00028 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00029 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00030 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00031 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00032 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00033 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00034 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00035 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00036 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00037 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00038 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00039 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00040 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00041 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00042 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00043 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00044 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00045 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00046 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00047 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00048 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00049 :: is_defined_var :: var_is_introduced;
var 1..120: INT____00001 :: is_defined_var :: var_is_introduced;
var 1..120: num_overlays :: output_var = INT____00001;
array [1..120] of var 0..1: x :: output_array([1..120]);
constraint array_bool_or([false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, BOOL____00007, BOOL____00006, BOOL____00005, BOOL____00004, BOOL____00003, BOOL____00002], true);
constraint array_bool_or([false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, BOOL____00021, BOOL____00020, BOOL____00015, BOOL____00014, BOOL____00009, BOOL____00008], true);
constraint array_bool_or([false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, BOOL____00024, BOOL____00022, BOOL____00018, BOOL____00016, BOOL____00012, BOOL____00010], true);
constraint array_bool_or([false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, BOOL____00025, BOOL____00023, BOOL____00019, BOOL____00017, BOOL____00013, BOOL____00011], true);
constraint array_bool_or([false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, BOOL____00031, BOOL____00030, BOOL____00029, BOOL____00028, BOOL____00027, BOOL____00026], true);
constraint array_bool_or([false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, BOOL____00045, BOOL____00044, BOOL____00039, BOOL____00038, BOOL____00033, BOOL____00032], true);
constraint array_bool_or([false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, BOOL____00048, BOOL____00046, BOOL____00042, BOOL____00040, BOOL____00036, BOOL____00034], true);
constraint array_bool_or([false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, BOOL____00049, BOOL____00047, BOOL____00043, BOOL____00041, BOOL____00037, BOOL____00035], true);
constraint array_bool_or([false, false, false, false, false, false, false, false, false, false, false, false, BOOL____00037, BOOL____00036, BOOL____00035, BOOL____00034, BOOL____00033, BOOL____00032, BOOL____00013, BOOL____00012, BOOL____00011, BOOL____00010, BOOL____00009, BOOL____00008], true);
constraint array_bool_or([false, false, false, false, false, false, false, false, false, false, false, false, BOOL____00040, BOOL____00038, BOOL____00034, BOOL____00032, BOOL____00028, BOOL____00026, BOOL____00016, BOOL____00014, BOOL____00010, BOOL____00008, BOOL____00004, BOOL____00002], true);
constraint array_bool_or([false, false, false, false, false, false, false, false, false, false, false, false, BOOL____00041, BOOL____00039, BOOL____00035, BOOL____00033, BOOL____00029, BOOL____00027, BOOL____00017, BOOL____00015, BOOL____00011, BOOL____00009, BOOL____00005, BOOL____00003], true);
constraint array_bool_or([false, false, false, false, false, false, false, false, false, false, false, false, BOOL____00043, BOOL____00042, BOOL____00037, BOOL____00036, BOOL____00031, BOOL____00030, BOOL____00019, BOOL____00018, BOOL____00013, BOOL____00012, BOOL____00007, BOOL____00006], true);
constraint array_bool_or([false, false, false, false, false, false, false, false, false, false, false, false, BOOL____00043, BOOL____00042, BOOL____00041, BOOL____00040, BOOL____00039, BOOL____00038, BOOL____00019, BOOL____00018, BOOL____00017, BOOL____00016, BOOL____00015, BOOL____00014], true);
constraint array_bool_or([false, false, false, false, false, false, false, false, false, false, false, false, BOOL____00046, BOOL____00044, BOOL____00036, BOOL____00033, BOOL____00030, BOOL____00027, BOOL____00022, BOOL____00020, BOOL____00012, BOOL____00009, BOOL____00006, BOOL____00003], true);
constraint array_bool_or([false, false, false, false, false, false, false, false, false, false, false, false, BOOL____00047, BOOL____00045, BOOL____00037, BOOL____00032, BOOL____00031, BOOL____00026, BOOL____00023, BOOL____00021, BOOL____00013, BOOL____00008, BOOL____00007, BOOL____00002], true);
constraint array_bool_or([false, false, false, false, false, false, false, false, false, false, false, false, BOOL____00047, BOOL____00046, BOOL____00041, BOOL____00040, BOOL____00027, BOOL____00026, BOOL____00023, BOOL____00022, BOOL____00017, BOOL____00016, BOOL____00003, BOOL____00002], true);
constraint array_bool_or([false, false, false, false, false, false, false, false, false, false, false, false, BOOL____00048, BOOL____00045, BOOL____00042, BOOL____00039, BOOL____00031, BOOL____00029, BOOL____00024, BOOL____00021, BOOL____00018, BOOL____00015, BOOL____00007, BOOL____00005], true);
constraint array_bool_or([false, false, false, false, false, false, false, false, false, false, false, false, BOOL____00049, BOOL____00044, BOOL____00043, BOOL____00038, BOOL____00030, BOOL____00028, BOOL____00025, BOOL____00020, BOOL____00019, BOOL____00014, BOOL____00006, BOOL____00004], true);
constraint array_bool_or([false, false, false, false, false, false, false, false, false, false, false, false, BOOL____00049, BOOL____00048, BOOL____00035, BOOL____00034, BOOL____00029, BOOL____00028, BOOL____00025, BOOL____00024, BOOL____00011, BOOL____00010, BOOL____00005, BOOL____00004], true);
constraint array_bool_or([false, false, false, false, false, false, false, false, false, false, false, false, BOOL____00049, BOOL____00048, BOOL____00047, BOOL____00046, BOOL____00045, BOOL____00044, BOOL____00025, BOOL____00024, BOOL____00023, BOOL____00022, BOOL____00021, BOOL____00020], true);
constraint array_bool_or([BOOL____00025, BOOL____00024, BOOL____00023, BOOL____00022, BOOL____00021, BOOL____00020, BOOL____00019, BOOL____00018, BOOL____00017, BOOL____00016, BOOL____00015, BOOL____00014, BOOL____00013, BOOL____00012, BOOL____00011, BOOL____00010, BOOL____00009, BOOL____00008, BOOL____00007, BOOL____00006, BOOL____00005, BOOL____00004, BOOL____00003, BOOL____00002], true);
constraint array_bool_or([BOOL____00049, BOOL____00048, BOOL____00047, BOOL____00046, BOOL____00045, BOOL____00044, BOOL____00043, BOOL____00042, BOOL____00041, BOOL____00040, BOOL____00039, BOOL____00038, BOOL____00037, BOOL____00036, BOOL____00035, BOOL____00034, BOOL____00033, BOOL____00032, BOOL____00031, BOOL____00030, BOOL____00029, BOOL____00028, BOOL____00027, BOOL____00026], true);
constraint int_eq_reif(x[1], 1, BOOL____00002) :: defines_var(BOOL____00002);
constraint int_eq_reif(x[2], 1, BOOL____00003) :: defines_var(BOOL____00003);
constraint int_eq_reif(x[3], 1, BOOL____00004) :: defines_var(BOOL____00004);
constraint int_eq_reif(x[4], 1, BOOL____00005) :: defines_var(BOOL____00005);
constraint int_eq_reif(x[5], 1, BOOL____00006) :: defines_var(BOOL____00006);
constraint int_eq_reif(x[6], 1, BOOL____00007) :: defines_var(BOOL____00007);
constraint int_eq_reif(x[7], 1, BOOL____00008) :: defines_var(BOOL____00008);
constraint int_eq_reif(x[8], 1, BOOL____00009) :: defines_var(BOOL____00009);
constraint int_eq_reif(x[9], 1, BOOL____00010) :: defines_var(BOOL____00010);
constraint int_eq_reif(x[10], 1, BOOL____00011) :: defines_var(BOOL____00011);
constraint int_eq_reif(x[11], 1, BOOL____00012) :: defines_var(BOOL____00012);
constraint int_eq_reif(x[12], 1, BOOL____00013) :: defines_var(BOOL____00013);
constraint int_eq_reif(x[13], 1, BOOL____00014) :: defines_var(BOOL____00014);
constraint int_eq_reif(x[14], 1, BOOL____00015) :: defines_var(BOOL____00015);
constraint int_eq_reif(x[15], 1, BOOL____00016) :: defines_var(BOOL____00016);
constraint int_eq_reif(x[16], 1, BOOL____00017) :: defines_var(BOOL____00017);
constraint int_eq_reif(x[17], 1, BOOL____00018) :: defines_var(BOOL____00018);
constraint int_eq_reif(x[18], 1, BOOL____00019) :: defines_var(BOOL____00019);
constraint int_eq_reif(x[19], 1, BOOL____00020) :: defines_var(BOOL____00020);
constraint int_eq_reif(x[20], 1, BOOL____00021) :: defines_var(BOOL____00021);
constraint int_eq_reif(x[21], 1, BOOL____00022) :: defines_var(BOOL____00022);
constraint int_eq_reif(x[22], 1, BOOL____00023) :: defines_var(BOOL____00023);
constraint int_eq_reif(x[23], 1, BOOL____00024) :: defines_var(BOOL____00024);
constraint int_eq_reif(x[24], 1, BOOL____00025) :: defines_var(BOOL____00025);
constraint int_eq_reif(x[25], 1, BOOL____00026) :: defines_var(BOOL____00026);
constraint int_eq_reif(x[26], 1, BOOL____00027) :: defines_var(BOOL____00027);
constraint int_eq_reif(x[27], 1, BOOL____00028) :: defines_var(BOOL____00028);
constraint int_eq_reif(x[28], 1, BOOL____00029) :: defines_var(BOOL____00029);
constraint int_eq_reif(x[29], 1, BOOL____00030) :: defines_var(BOOL____00030);
constraint int_eq_reif(x[30], 1, BOOL____00031) :: defines_var(BOOL____00031);
constraint int_eq_reif(x[31], 1, BOOL____00032) :: defines_var(BOOL____00032);
constraint int_eq_reif(x[32], 1, BOOL____00033) :: defines_var(BOOL____00033);
constraint int_eq_reif(x[33], 1, BOOL____00034) :: defines_var(BOOL____00034);
constraint int_eq_reif(x[34], 1, BOOL____00035) :: defines_var(BOOL____00035);
constraint int_eq_reif(x[35], 1, BOOL____00036) :: defines_var(BOOL____00036);
constraint int_eq_reif(x[36], 1, BOOL____00037) :: defines_var(BOOL____00037);
constraint int_eq_reif(x[37], 1, BOOL____00038) :: defines_var(BOOL____00038);
constraint int_eq_reif(x[38], 1, BOOL____00039) :: defines_var(BOOL____00039);
constraint int_eq_reif(x[39], 1, BOOL____00040) :: defines_var(BOOL____00040);
constraint int_eq_reif(x[40], 1, BOOL____00041) :: defines_var(BOOL____00041);
constraint int_eq_reif(x[41], 1, BOOL____00042) :: defines_var(BOOL____00042);
constraint int_eq_reif(x[42], 1, BOOL____00043) :: defines_var(BOOL____00043);
constraint int_eq_reif(x[43], 1, BOOL____00044) :: defines_var(BOOL____00044);
constraint int_eq_reif(x[44], 1, BOOL____00045) :: defines_var(BOOL____00045);
constraint int_eq_reif(x[45], 1, BOOL____00046) :: defines_var(BOOL____00046);
constraint int_eq_reif(x[46], 1, BOOL____00047) :: defines_var(BOOL____00047);
constraint int_eq_reif(x[47], 1, BOOL____00048) :: defines_var(BOOL____00048);
constraint int_eq_reif(x[48], 1, BOOL____00049) :: defines_var(BOOL____00049);
constraint int_eq_reif(x[49], 1, false);
constraint int_eq_reif(x[50], 1, false);
constraint int_eq_reif(x[51], 1, false);
constraint int_eq_reif(x[52], 1, false);
constraint int_eq_reif(x[53], 1, false);
constraint int_eq_reif(x[54], 1, false);
constraint int_eq_reif(x[55], 1, false);
constraint int_eq_reif(x[56], 1, false);
constraint int_eq_reif(x[57], 1, false);
constraint int_eq_reif(x[58], 1, false);
constraint int_eq_reif(x[59], 1, false);
constraint int_eq_reif(x[60], 1, false);
constraint int_eq_reif(x[61], 1, false);
constraint int_eq_reif(x[62], 1, false);
constraint int_eq_reif(x[63], 1, false);
constraint int_eq_reif(x[64], 1, false);
constraint int_eq_reif(x[65], 1, false);
constraint int_eq_reif(x[66], 1, false);
constraint int_eq_reif(x[67], 1, false);
constraint int_eq_reif(x[68], 1, false);
constraint int_eq_reif(x[69], 1, false);
constraint int_eq_reif(x[70], 1, false);
constraint int_eq_reif(x[71], 1, false);
constraint int_eq_reif(x[72], 1, false);
constraint int_eq_reif(x[73], 1, false);
constraint int_eq_reif(x[74], 1, false);
constraint int_eq_reif(x[75], 1, false);
constraint int_eq_reif(x[76], 1, false);
constraint int_eq_reif(x[77], 1, false);
constraint int_eq_reif(x[78], 1, false);
constraint int_eq_reif(x[79], 1, false);
constraint int_eq_reif(x[80], 1, false);
constraint int_eq_reif(x[81], 1, false);
constraint int_eq_reif(x[82], 1, false);
constraint int_eq_reif(x[83], 1, false);
constraint int_eq_reif(x[84], 1, false);
constraint int_eq_reif(x[85], 1, false);
constraint int_eq_reif(x[86], 1, false);
constraint int_eq_reif(x[87], 1, false);
constraint int_eq_reif(x[88], 1, false);
constraint int_eq_reif(x[89], 1, false);
constraint int_eq_reif(x[90], 1, false);
constraint int_eq_reif(x[91], 1, false);
constraint int_eq_reif(x[92], 1, false);
constraint int_eq_reif(x[93], 1, false);
constraint int_eq_reif(x[94], 1, false);
constraint int_eq_reif(x[95], 1, false);
constraint int_eq_reif(x[96], 1, false);
constraint int_eq_reif(x[97], 1, false);
constraint int_eq_reif(x[98], 1, false);
constraint int_eq_reif(x[99], 1, false);
constraint int_eq_reif(x[100], 1, false);
constraint int_eq_reif(x[101], 1, false);
constraint int_eq_reif(x[102], 1, false);
constraint int_eq_reif(x[103], 1, false);
constraint int_eq_reif(x[104], 1, false);
constraint int_eq_reif(x[105], 1, false);
constraint int_eq_reif(x[106], 1, false);
constraint int_eq_reif(x[107], 1, false);
constraint int_eq_reif(x[108], 1, false);
constraint int_eq_reif(x[109], 1, false);
constraint int_eq_reif(x[110], 1, false);
constraint int_eq_reif(x[111], 1, false);
constraint int_eq_reif(x[112], 1, false);
constraint int_eq_reif(x[113], 1, false);
constraint int_eq_reif(x[114], 1, false);
constraint int_eq_reif(x[115], 1, false);
constraint int_eq_reif(x[116], 1, false);
constraint int_eq_reif(x[117], 1, false);
constraint int_eq_reif(x[118], 1, false);
constraint int_eq_reif(x[119], 1, false);
constraint int_eq_reif(x[120], 1, false);
constraint int_lin_eq([-1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [INT____00001, x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10], x[11], x[12], x[13], x[14], x[15], x[16], x[17], x[18], x[19], x[20], x[21], x[22], x[23], x[24], x[25], x[26], x[27], x[28], x[29], x[30], x[31], x[32], x[33], x[34], x[35], x[36], x[37], x[38], x[39], x[40], x[41], x[42], x[43], x[44], x[45], x[46], x[47], x[48], x[49], x[50], x[51], x[52], x[53], x[54], x[55], x[56], x[57], x[58], x[59], x[60], x[61], x[62], x[63], x[64], x[65], x[66], x[67], x[68], x[69], x[70], x[71], x[72], x[73], x[74], x[75], x[76], x[77], x[78], x[79], x[80], x[81], x[82], x[83], x[84], x[85], x[86], x[87], x[88], x[89], x[90], x[91], x[92], x[93], x[94], x[95], x[96], x[97], x[98], x[99], x[100], x[101], x[102], x[103], x[104], x[105], x[106], x[107], x[108], x[109], x[110], x[111], x[112], x[113], x[114], x[115], x[116], x[117], x[118], x[119], x[120]], 0) :: defines_var(INT____00001);
solve  :: int_search([x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10], x[11], x[12], x[13], x[14], x[15], x[16], x[17], x[18], x[19], x[20], x[21], x[22], x[23], x[24], x[25], x[26], x[27], x[28], x[29], x[30], x[31], x[32], x[33], x[34], x[35], x[36], x[37], x[38], x[39], x[40], x[41], x[42], x[43], x[44], x[45], x[46], x[47], x[48], x[49], x[50], x[51], x[52], x[53], x[54], x[55], x[56], x[57], x[58], x[59], x[60], x[61], x[62], x[63], x[64], x[65], x[66], x[67], x[68], x[69], x[70], x[71], x[72], x[73], x[74], x[75], x[76], x[77], x[78], x[79], x[80], x[81], x[82], x[83], x[84], x[85], x[86], x[87], x[88], x[89], x[90], x[91], x[92], x[93], x[94], x[95], x[96], x[97], x[98], x[99], x[100], x[101], x[102], x[103], x[104], x[105], x[106], x[107], x[108], x[109], x[110], x[111], x[112], x[113], x[114], x[115], x[116], x[117], x[118], x[119], x[120], INT____00001], max_regret, indomain_min, complete) minimize INT____00001;
