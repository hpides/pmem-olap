predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..4] of var 1..4: p :: output_array([1..4]);
array [1..4] of var 1..4: x :: output_array([1..4]);
array [1..4] of var 1..4: z____00001;
constraint all_different_int(x);
constraint all_different_int(z____00001);
constraint array_var_int_element(p[1], x, p[2]);
constraint array_var_int_element(p[2], x, p[3]);
constraint array_var_int_element(p[3], x, p[4]);
constraint array_var_int_element(z____00001[1], x, z____00001[2]);
constraint array_var_int_element(z____00001[2], x, z____00001[3]);
constraint array_var_int_element(z____00001[3], x, z____00001[4]);
constraint int_eq(p[1], 1);
constraint int_eq(z____00001[1], x[1]);
constraint int_eq(z____00001[4], 1);
constraint int_ne(z____00001[1], 1);
constraint int_ne(z____00001[2], 1);
constraint int_ne(z____00001[3], 1);
solve  :: int_search(x, first_fail, indomain_min, complete) satisfy;
