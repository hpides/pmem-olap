predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var 1..2: Dominique;
var 1..5: Ignace;
var 4..6: Naren;
var 2..6: Olivier;
var 1..5: Pascal;
var 1..4: Philippe;
array [1..6] of var 1..6: runners :: output_array([1..6]) = [Dominique, Ignace, Naren, Olivier, Philippe, Pascal];
constraint all_different_int(runners);
constraint int_lin_eq([-1, 1], [Naren, Pascal], -3);
constraint int_lt(Dominique, Naren);
constraint int_lt(Dominique, Olivier);
constraint int_lt(Ignace, Naren);
constraint int_lt(Ignace, Olivier);
constraint int_lt(Pascal, Naren);
constraint int_lt(Pascal, Olivier);
constraint int_ne(Ignace, 2);
constraint int_ne(Ignace, 3);
constraint int_ne(Ignace, 4);
constraint int_ne(Olivier, 6);
solve satisfy;
