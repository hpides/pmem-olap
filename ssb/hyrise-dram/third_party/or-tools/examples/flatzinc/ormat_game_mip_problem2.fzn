predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..54] of int: overlays = [1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0];
array [1..9] of int: problem = [1, 1, 1, 1, 1, 1, 1, 1, 1];
var 1..6: INT____00001 :: is_defined_var :: var_is_introduced;
var 1..6: num_overlays :: output_var = INT____00001;
array [1..6] of var 0..1: x :: output_array([1..6]);
constraint int_lin_eq([-1, 1, 1, 1, 1, 1, 1], [INT____00001, x[1], x[2], x[3], x[4], x[5], x[6]], 0) :: defines_var(INT____00001);
constraint int_lin_le([-1, -1], [x[1], x[2]], -1);
constraint int_lin_le([-1, -1], [x[1], x[3]], -1);
constraint int_lin_le([-1, -1], [x[1], x[6]], -1);
constraint int_lin_le([-1, -1], [x[2], x[4]], -1);
constraint int_lin_le([-1, -1], [x[2], x[5]], -1);
constraint int_lin_le([-1, -1], [x[3], x[4]], -1);
constraint int_lin_le([-1, -1], [x[3], x[5]], -1);
constraint int_lin_le([-1, -1], [x[4], x[6]], -1);
constraint int_lin_le([-1, -1], [x[5], x[6]], -1);
solve  :: int_search([x[1], x[2], x[3], x[4], x[5], x[6], INT____00001], smallest, indomain_min, complete) minimize INT____00001;
