array [1..9] of int: age = [63, 37, 35, 43, 22, 85, 60, 33, 65];
array [1..12] of int: is_father = [6, 7, 6, 1, 7, 8, 7, 2, 7, 3, 9, 4];
array [1..4] of int: is_mother = [1, 4, 4, 5];
var bool: BOOL____00001 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00002 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00003 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00004 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00005 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00006 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00007 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00008 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00009 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00010 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00011 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00012 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00013 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00014 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00015 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00016 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00017 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00018 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00019 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00020 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00021 :: is_defined_var :: var_is_introduced;
var 1..9: X :: output_var;
var 8..8: Y :: output_var = 8;
constraint array_bool_and([BOOL____00015, BOOL____00013, BOOL____00019], BOOL____00021) :: defines_var(BOOL____00021);
constraint array_bool_and([BOOL____00015, BOOL____00017, BOOL____00006], BOOL____00020) :: defines_var(BOOL____00020);
constraint array_bool_or([BOOL____00002, BOOL____00001], BOOL____00018) :: defines_var(BOOL____00018);
constraint array_bool_or([BOOL____00009, BOOL____00008], BOOL____00016) :: defines_var(BOOL____00016);
constraint array_bool_or([BOOL____00005, BOOL____00004, BOOL____00003], BOOL____00019) :: defines_var(BOOL____00019);
constraint array_bool_or([BOOL____00012, BOOL____00011, BOOL____00010], BOOL____00017) :: defines_var(BOOL____00017);
constraint array_bool_or([BOOL____00021, BOOL____00021, BOOL____00021, BOOL____00021, BOOL____00021, BOOL____00021, BOOL____00021, BOOL____00021, BOOL____00021, BOOL____00020, BOOL____00020, BOOL____00020, BOOL____00020, BOOL____00020, BOOL____00020, BOOL____00020, BOOL____00020, BOOL____00020], true);
constraint int_eq_reif(1, X, BOOL____00002) :: defines_var(BOOL____00002);
constraint int_eq_reif(1, Y, BOOL____00009) :: defines_var(BOOL____00009);
constraint int_eq_reif(2, X, BOOL____00004) :: defines_var(BOOL____00004);
constraint int_eq_reif(2, Y, BOOL____00011) :: defines_var(BOOL____00011);
constraint int_eq_reif(3, X, BOOL____00005) :: defines_var(BOOL____00005);
constraint int_eq_reif(3, Y, BOOL____00012) :: defines_var(BOOL____00012);
constraint int_eq_reif(4, X, BOOL____00006) :: defines_var(BOOL____00006);
constraint int_eq_reif(4, Y, BOOL____00013) :: defines_var(BOOL____00013);
constraint int_eq_reif(5, X, BOOL____00007) :: defines_var(BOOL____00007);
constraint int_eq_reif(5, Y, BOOL____00014) :: defines_var(BOOL____00014);
constraint int_eq_reif(7, X, BOOL____00001) :: defines_var(BOOL____00001);
constraint int_eq_reif(7, Y, BOOL____00008) :: defines_var(BOOL____00008);
constraint int_eq_reif(8, X, BOOL____00003) :: defines_var(BOOL____00003);
constraint int_eq_reif(8, Y, BOOL____00010) :: defines_var(BOOL____00010);
constraint int_ne_reif(X, Y, BOOL____00015) :: defines_var(BOOL____00015);
solve satisfy;
