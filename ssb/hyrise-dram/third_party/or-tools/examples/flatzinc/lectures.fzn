predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..14] of int: g = [1, 2, 1, 4, 3, 5, 2, 6, 4, 5, 5, 6, 1, 6];
var 1..6: max_c;
array [1..6] of var 1..6: v :: output_array([1..6]);
constraint int_eq(v[1], 1);
constraint int_le(v[2], 2);
constraint int_ne(v[1], v[2]);
constraint int_ne(v[1], v[4]);
constraint int_ne(v[1], v[6]);
constraint int_ne(v[2], v[6]);
constraint int_ne(v[3], v[5]);
constraint int_ne(v[4], v[5]);
constraint int_ne(v[5], v[6]);
constraint maximum_int(max_c, v);
solve minimize max_c;
