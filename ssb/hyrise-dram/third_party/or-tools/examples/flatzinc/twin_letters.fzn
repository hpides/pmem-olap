predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var 0..9: A;
var 0..9: B;
var 0..9: C;
var 0..1: C1 :: output_var;
var 0..2: C2 :: output_var;
var 0..1: C3 :: output_var;
var 0..9: D;
var 0..9: E;
var 0..9: F;
var 0..9: G;
var 0..9: H;
var 0..9: I;
var 0..999: INT____00002 :: is_defined_var :: var_is_introduced;
var 0..999: INT____00004 :: is_defined_var :: var_is_introduced;
var 0..999: INT____00006 :: is_defined_var :: var_is_introduced;
var 0..999: INT____00008 :: is_defined_var :: var_is_introduced;
var 0..999: INT____00009 :: is_defined_var :: var_is_introduced;
var 0..99999: INT____00011 :: is_defined_var :: var_is_introduced;
var 0..9: J;
var 0..9: K;
var 0..9: L;
var 0..9: M;
var 0..9: N;
var 0..9: O;
var 0..9: P;
var 0..9: Q;
var 0..9: R;
var 0..9: S;
var 0..9: T = I;
array [1..20] of var 0..9: x :: output_array([1..20]) = [A, B, C, D, E, F, G, H, T, J, K, L, M, N, O, P, Q, R, S, T];
constraint count(x, 0, 2);
constraint count(x, 1, 2);
constraint count(x, 2, 2);
constraint count(x, 3, 2);
constraint count(x, 4, 2);
constraint count(x, 5, 2);
constraint count(x, 6, 2);
constraint count(x, 7, 2);
constraint count(x, 8, 2);
constraint count(x, 9, 2);
constraint int_lin_eq([-1, 100, 10, 1], [INT____00002, D, E, F], 0) :: defines_var(INT____00002);
constraint int_lin_eq([-1, 100, 10, 1], [INT____00004, G, H, T], 0) :: defines_var(INT____00004);
constraint int_lin_eq([-1, 100, 10, 1], [INT____00006, J, K, L], 0) :: defines_var(INT____00006);
constraint int_lin_eq([-1, 100, 10, 1], [INT____00008, M, N, O], 0) :: defines_var(INT____00008);
constraint int_lin_eq([-1, 100, 10, 1], [INT____00009, A, B, C], 0) :: defines_var(INT____00009);
constraint int_lin_eq([10, -1, -1, 1], [C1, H, L, S], 0);
constraint int_lin_eq([-1, 10, -1, -1, 1], [C2, C3, J, N, Q], 0);
constraint int_lin_eq([-1, 1, 10000, 1000, 100, 10], [INT____00011, T, P, Q, R, S], 0) :: defines_var(INT____00011);
constraint int_lin_eq([-1, 10, -1, -1, -1, 1], [C1, C2, G, K, O, R], 0);
constraint int_lin_eq([100, 10, -10000, 1000, 100, 10, 10000, 1000, 100, -1000, -100, -10], [G, H, P, J, K, L, M, N, O, Q, R, S], 0);
constraint int_plus(C3, M, P);
constraint int_times(INT____00002, A, INT____00008);
constraint int_times(INT____00002, B, INT____00006);
constraint int_times(INT____00002, C, INT____00004);
constraint int_times(INT____00009, INT____00002, INT____00011);
solve  :: int_search(x, first_fail, indomain_min, complete) satisfy;
