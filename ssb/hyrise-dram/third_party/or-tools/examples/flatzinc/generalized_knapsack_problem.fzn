predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..12] of int: benefits = [45, 70, 90, 0, 20, 40, 50, 0, 50, 70, 85, 95];
array [1..3] of int: limits = [3, 3, 4];
array [1..3] of int: weight = [4, 5, 3];
var 0..95: INT____00001 :: is_defined_var :: var_is_introduced;
var 5..8: INT____00002 :: is_defined_var :: var_is_introduced;
var 0..95: INT____00003 :: is_defined_var :: var_is_introduced;
var 9..12: INT____00004 :: is_defined_var :: var_is_introduced;
var 0..95: INT____00005 :: is_defined_var :: var_is_introduced;
var 0..285: INT____00006 :: is_defined_var :: var_is_introduced;
var 12..48: INT____00007 :: is_defined_var :: var_is_introduced;
var 0..285: tot_benefit :: output_var = INT____00006;
var 12..20: tot_weight :: output_var = INT____00007;
array [1..3] of var 1..4: x :: output_array([1..3]);
constraint array_int_element(INT____00002, benefits, INT____00003) :: defines_var(INT____00003);
constraint array_int_element(INT____00004, benefits, INT____00005) :: defines_var(INT____00005);
constraint array_int_element(x[1], benefits, INT____00001) :: defines_var(INT____00001);
constraint int_le(x[1], 3);
constraint int_le(x[2], 3);
constraint int_lin_eq([-1, 1], [INT____00002, x[2]], -4) :: defines_var(INT____00002) :: domain;
constraint int_lin_eq([-1, 1], [INT____00004, x[3]], -8) :: defines_var(INT____00004) :: domain;
constraint int_lin_eq([-1, 1, 1, 1], [INT____00006, INT____00001, INT____00003, INT____00005], 0) :: defines_var(INT____00006);
constraint int_lin_eq([-1, 4, 5, 3], [INT____00007, x[1], x[2], x[3]], 0) :: defines_var(INT____00007);
solve  :: int_search([INT____00006, INT____00007, x[1], x[2], x[3]], first_fail, indomain_max, complete) maximize INT____00006;
