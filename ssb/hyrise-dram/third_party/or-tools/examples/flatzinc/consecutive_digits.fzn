predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var 1..9: A;
var 1..9: B;
var bool: BOOL____00004 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00005 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00006 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00007 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00009 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00010 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00011 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00012 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00014 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00015 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00016 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00017 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00019 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00020 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00021 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00022 :: is_defined_var :: var_is_introduced;
var 1..9: C;
var 1..9: D;
var 1111..9999: INT____00001 :: is_defined_var :: var_is_introduced;
var 1111..9999: DCBA :: output_var = INT____00001;
var 1111..9999: INT____00002 :: is_defined_var :: var_is_introduced;
var 1111..9999: ABCD :: output_var = INT____00002;
var 1111..9999: INT____00003 :: is_defined_var :: var_is_introduced;
array [1..4] of var 1..9: dots;
var 1111..9999: dots_num :: output_var = INT____00003;
array [1..4] of var 1..9: fd = [A, B, C, D];
constraint all_different_int(dots);
constraint all_different_int(fd);
constraint array_bool_or([BOOL____00007, BOOL____00006, BOOL____00005, BOOL____00004], true);
constraint array_bool_or([BOOL____00012, BOOL____00011, BOOL____00010, BOOL____00009], true);
constraint array_bool_or([BOOL____00017, BOOL____00016, BOOL____00015, BOOL____00014], true);
constraint array_bool_or([BOOL____00022, BOOL____00021, BOOL____00020, BOOL____00019], true);
constraint int_eq_reif(dots[1], A, BOOL____00004) :: defines_var(BOOL____00004);
constraint int_eq_reif(dots[1], B, BOOL____00009) :: defines_var(BOOL____00009);
constraint int_eq_reif(dots[1], C, BOOL____00014) :: defines_var(BOOL____00014);
constraint int_eq_reif(dots[1], D, BOOL____00019) :: defines_var(BOOL____00019);
constraint int_eq_reif(dots[2], A, BOOL____00005) :: defines_var(BOOL____00005);
constraint int_eq_reif(dots[2], B, BOOL____00010) :: defines_var(BOOL____00010);
constraint int_eq_reif(dots[2], C, BOOL____00015) :: defines_var(BOOL____00015);
constraint int_eq_reif(dots[2], D, BOOL____00020) :: defines_var(BOOL____00020);
constraint int_eq_reif(dots[3], A, BOOL____00006) :: defines_var(BOOL____00006);
constraint int_eq_reif(dots[3], B, BOOL____00011) :: defines_var(BOOL____00011);
constraint int_eq_reif(dots[3], C, BOOL____00016) :: defines_var(BOOL____00016);
constraint int_eq_reif(dots[3], D, BOOL____00021) :: defines_var(BOOL____00021);
constraint int_eq_reif(dots[4], A, BOOL____00007) :: defines_var(BOOL____00007);
constraint int_eq_reif(dots[4], B, BOOL____00012) :: defines_var(BOOL____00012);
constraint int_eq_reif(dots[4], C, BOOL____00017) :: defines_var(BOOL____00017);
constraint int_eq_reif(dots[4], D, BOOL____00022) :: defines_var(BOOL____00022);
constraint int_le(A, B);
constraint int_le(B, C);
constraint int_le(C, D);
constraint int_lin_eq([-1, -1, -1], [INT____00001, INT____00002, INT____00003], -12300);
constraint int_lin_eq([-1, 1, 10, 100, 1000], [INT____00001, A, B, C, D], 0) :: defines_var(INT____00001);
constraint int_lin_eq([-1, 1000, 100, 10, 1], [INT____00002, A, B, C, D], 0) :: defines_var(INT____00002);
constraint int_lin_eq([-1, 1000, 100, 10, 1], [INT____00003, dots[1], dots[2], dots[3], dots[4]], 0) :: defines_var(INT____00003);
solve  :: int_search([A, B, C, D, dots[1], dots[2], dots[3], dots[4], INT____00002, INT____00001, INT____00003], first_fail, indomain, complete) satisfy;
