predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..16] of var 1..4: x :: output_array([1..4, 1..4]);
var 1..4: X____00012 = x[15];
var 1..4: X____00011 = x[14];
var 1..4: X____00010 = x[13];
var 1..4: X____00009 = x[12];
var 1..4: X____00008 = x[11];
var 1..4: X____00007 = x[9];
var 1..4: X____00006 = x[8];
var 1..4: X____00005 = x[6];
var 1..4: X____00004 = x[5];
var 1..4: X____00003 = x[4];
var 1..4: X____00002 = x[3];
var 1..4: X____00001 = x[1];
constraint all_different_int([x[1], x[2], x[3], x[4]]);
constraint all_different_int([x[1], x[5], x[9], x[13]]);
constraint all_different_int([x[2], x[6], x[10], x[14]]);
constraint all_different_int([x[3], x[7], x[11], x[15]]);
constraint all_different_int([x[4], x[8], x[12], x[16]]);
constraint all_different_int([x[5], x[6], x[7], x[8]]);
constraint all_different_int([x[9], x[10], x[11], x[12]]);
constraint all_different_int([x[13], x[14], x[15], x[16]]);
constraint int_eq(1, x[2]);
constraint int_eq(2, x[7]);
constraint int_eq(3, x[10]);
constraint int_eq(4, x[16]);
solve satisfy;
