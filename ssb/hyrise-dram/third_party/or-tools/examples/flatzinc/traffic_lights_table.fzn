predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..16] of int: allowed = [1, 1, 3, 3, 2, 1, 4, 1, 3, 3, 1, 1, 4, 1, 2, 1];
array [1..4] of var 1..3: P :: output_array([1..4]);
array [1..4] of var 1..4: V :: output_array([1..4]);
constraint set_in(P[1], {1, 3});
constraint set_in(P[2], {1, 3});
constraint set_in(P[3], {1, 3});
constraint set_in(P[4], {1, 3});
constraint table_int([V[1], P[1], V[2], P[2]], allowed);
constraint table_int([V[2], P[2], V[3], P[3]], allowed);
constraint table_int([V[4], P[4], V[1], P[1]], allowed);
solve satisfy;
