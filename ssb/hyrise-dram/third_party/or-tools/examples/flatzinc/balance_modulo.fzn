predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var bool: BOOL____00005 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00008 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00011 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00014 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00017 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00019 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00021 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00023 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00025 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00027 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00029 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00031 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00033 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00035 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00037 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00042 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00043 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00044 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00045 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00046 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00047 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00048 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00049 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00050 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00051 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00052 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00053 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00054 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00055 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00056 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00057 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00058 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00059 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00060 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00061 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00062 :: is_defined_var :: var_is_introduced;
var 0..2: INT____00004 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00006 :: is_defined_var :: var_is_introduced;
var 0..2: INT____00007 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00009 :: is_defined_var :: var_is_introduced;
var 0..2: INT____00010 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00012 :: is_defined_var :: var_is_introduced;
var 0..2: INT____00013 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00015 :: is_defined_var :: var_is_introduced;
var 0..2: INT____00016 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00018 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00020 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00022 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00024 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00026 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00028 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00030 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00032 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00034 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00036 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00038 :: is_defined_var :: var_is_introduced;
var 0..5: INT____00039 :: is_defined_var :: var_is_introduced;
var 0..5: INT____00040 :: is_defined_var :: var_is_introduced;
var 0..4: INT____00064 :: is_defined_var :: var_is_introduced;
var 0..4: bal :: output_var = INT____00064;
var 0..5: c_max____00002;
var 1..5: c_min____00003;
array [1..3] of var 0..5: counts____00001;
array [1..5] of var 1..7: x :: output_array([1..5]);
constraint array_bool_and([BOOL____00042, BOOL____00047, BOOL____00048], BOOL____00060) :: defines_var(BOOL____00060);
constraint array_bool_and([BOOL____00049, BOOL____00053, BOOL____00054], BOOL____00061) :: defines_var(BOOL____00061);
constraint array_bool_and([BOOL____00055, BOOL____00058, BOOL____00059], BOOL____00062) :: defines_var(BOOL____00062);
constraint array_bool_or([BOOL____00043, BOOL____00044], BOOL____00048) :: defines_var(BOOL____00048);
constraint array_bool_or([BOOL____00045, BOOL____00046], BOOL____00047) :: defines_var(BOOL____00047);
constraint array_bool_or([BOOL____00050, BOOL____00051], BOOL____00054) :: defines_var(BOOL____00054);
constraint array_bool_or([BOOL____00052, BOOL____00046], BOOL____00053) :: defines_var(BOOL____00053);
constraint array_bool_or([BOOL____00056, BOOL____00051], BOOL____00059) :: defines_var(BOOL____00059);
constraint array_bool_or([BOOL____00057, BOOL____00044], BOOL____00058) :: defines_var(BOOL____00058);
constraint array_bool_or([BOOL____00062, BOOL____00060, BOOL____00061], true);
constraint bool2int(BOOL____00005, INT____00006) :: defines_var(INT____00006);
constraint bool2int(BOOL____00008, INT____00009) :: defines_var(INT____00009);
constraint bool2int(BOOL____00011, INT____00012) :: defines_var(INT____00012);
constraint bool2int(BOOL____00014, INT____00015) :: defines_var(INT____00015);
constraint bool2int(BOOL____00017, INT____00018) :: defines_var(INT____00018);
constraint bool2int(BOOL____00019, INT____00020) :: defines_var(INT____00020);
constraint bool2int(BOOL____00021, INT____00022) :: defines_var(INT____00022);
constraint bool2int(BOOL____00023, INT____00024) :: defines_var(INT____00024);
constraint bool2int(BOOL____00025, INT____00026) :: defines_var(INT____00026);
constraint bool2int(BOOL____00027, INT____00028) :: defines_var(INT____00028);
constraint bool2int(BOOL____00029, INT____00030) :: defines_var(INT____00030);
constraint bool2int(BOOL____00031, INT____00032) :: defines_var(INT____00032);
constraint bool2int(BOOL____00033, INT____00034) :: defines_var(INT____00034);
constraint bool2int(BOOL____00035, INT____00036) :: defines_var(INT____00036);
constraint bool2int(BOOL____00037, INT____00038) :: defines_var(INT____00038);
constraint int_eq(1, x[2]);
constraint int_eq(1, x[4]);
constraint int_eq(5, x[5]);
constraint int_eq(6, x[1]);
constraint int_eq(7, x[3]);
constraint int_eq_reif(INT____00004, 0, BOOL____00005) :: defines_var(BOOL____00005);
constraint int_eq_reif(INT____00004, 1, BOOL____00019) :: defines_var(BOOL____00019);
constraint int_eq_reif(INT____00004, 2, BOOL____00029) :: defines_var(BOOL____00029);
constraint int_eq_reif(INT____00007, 0, BOOL____00008) :: defines_var(BOOL____00008);
constraint int_eq_reif(INT____00007, 1, BOOL____00021) :: defines_var(BOOL____00021);
constraint int_eq_reif(INT____00007, 2, BOOL____00031) :: defines_var(BOOL____00031);
constraint int_eq_reif(INT____00010, 0, BOOL____00011) :: defines_var(BOOL____00011);
constraint int_eq_reif(INT____00010, 1, BOOL____00023) :: defines_var(BOOL____00023);
constraint int_eq_reif(INT____00010, 2, BOOL____00033) :: defines_var(BOOL____00033);
constraint int_eq_reif(INT____00013, 0, BOOL____00014) :: defines_var(BOOL____00014);
constraint int_eq_reif(INT____00013, 1, BOOL____00025) :: defines_var(BOOL____00025);
constraint int_eq_reif(INT____00013, 2, BOOL____00035) :: defines_var(BOOL____00035);
constraint int_eq_reif(INT____00016, 0, BOOL____00017) :: defines_var(BOOL____00017);
constraint int_eq_reif(INT____00016, 1, BOOL____00027) :: defines_var(BOOL____00027);
constraint int_eq_reif(INT____00016, 2, BOOL____00037) :: defines_var(BOOL____00037);
constraint int_eq_reif(c_min____00003, counts____00001[1], BOOL____00042) :: defines_var(BOOL____00042);
constraint int_eq_reif(c_min____00003, counts____00001[2], BOOL____00049) :: defines_var(BOOL____00049);
constraint int_eq_reif(c_min____00003, counts____00001[3], BOOL____00055) :: defines_var(BOOL____00055);
constraint int_eq_reif(counts____00001[1], 0, BOOL____00051) :: defines_var(BOOL____00051);
constraint int_eq_reif(counts____00001[2], 0, BOOL____00044) :: defines_var(BOOL____00044);
constraint int_eq_reif(counts____00001[3], 0, BOOL____00046) :: defines_var(BOOL____00046);
constraint int_le_reif(counts____00001[1], counts____00001[2], BOOL____00043) :: defines_var(BOOL____00043);
constraint int_le_reif(counts____00001[1], counts____00001[3], BOOL____00045) :: defines_var(BOOL____00045);
constraint int_le_reif(counts____00001[2], counts____00001[1], BOOL____00050) :: defines_var(BOOL____00050);
constraint int_le_reif(counts____00001[2], counts____00001[3], BOOL____00052) :: defines_var(BOOL____00052);
constraint int_le_reif(counts____00001[3], counts____00001[1], BOOL____00056) :: defines_var(BOOL____00056);
constraint int_le_reif(counts____00001[3], counts____00001[2], BOOL____00057) :: defines_var(BOOL____00057);
constraint int_lin_eq([-1, -1, -1, -1, -1, 1], [INT____00006, INT____00009, INT____00012, INT____00015, INT____00018, counts____00001[1]], 0);
constraint int_lin_eq([-1, -1, -1, -1, -1, 1], [INT____00020, INT____00022, INT____00024, INT____00026, INT____00028, counts____00001[2]], 0);
constraint int_lin_eq([-1, -1, -1, -1, -1, 1], [INT____00030, INT____00032, INT____00034, INT____00036, INT____00038, counts____00001[3]], 0);
constraint int_max(counts____00001[1], counts____00001[1], INT____00039) :: defines_var(INT____00039);
constraint int_max(counts____00001[2], INT____00039, INT____00040) :: defines_var(INT____00040);
constraint int_max(counts____00001[3], INT____00040, c_max____00002);
constraint int_plus(INT____00064, c_min____00003, c_max____00002) :: defines_var(INT____00064);
constraint int_mod(x[1], 3, INT____00004) :: defines_var(INT____00004);
constraint int_mod(x[2], 3, INT____00007) :: defines_var(INT____00007);
constraint int_mod(x[3], 3, INT____00010) :: defines_var(INT____00010);
constraint int_mod(x[4], 3, INT____00013) :: defines_var(INT____00013);
constraint int_mod(x[5], 3, INT____00016) :: defines_var(INT____00016);
solve satisfy;
