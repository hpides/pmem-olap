predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..5] of var 3..10: Age :: output_array([1..5]);
var bool: BOOL____00011 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00012 :: is_defined_var :: var_is_introduced;
var 1..5: BurningBush;
var 2..2: Captivity = 2;
var 1..5: Ethiopia;
var 5..10: INT____00002 :: is_defined_var :: var_is_introduced;
var 3..9: INT____00003 :: is_defined_var :: var_is_introduced;
var 4..10: INT____00004 :: is_defined_var :: var_is_introduced;
var 6..10: INT____00006 :: is_defined_var :: var_is_introduced;
var 3..10: INT____00007 :: is_defined_var :: var_is_introduced;
var 3..10: INT____00009 :: is_defined_var :: var_is_introduced;
var 3..10: INT____00010 :: is_defined_var :: var_is_introduced;
var 1..5: Kazakhstan;
var 3..3: Lithuania = 3;
var 1..5: Morocco;
var 1..5: MosessYouth;
var 1..5: Passover;
var 1..5: TenCommandments;
array [1..5] of var 1..5: Story :: output_array([1..5]) = [BurningBush, 2, MosessYouth, Passover, TenCommandments];
var 1..5: Yemen;
array [1..5] of var 1..5: Country :: output_array([1..5]) = [Ethiopia, Kazakhstan, 3, Morocco, Yemen];
constraint all_different_int(Age);
constraint all_different_int(Country);
constraint all_different_int(Story);
constraint array_bool_or([BOOL____00011, BOOL____00012], true);
constraint array_var_int_element(BurningBush, Age, INT____00009) :: defines_var(INT____00009);
constraint array_var_int_element(Ethiopia, Age, INT____00004) :: defines_var(INT____00004);
constraint array_var_int_element(Kazakhstan, Age, INT____00010) :: defines_var(INT____00010);
constraint array_var_int_element(Morocco, Age, INT____00006);
constraint array_var_int_element(MosessYouth, Age, INT____00007) :: defines_var(INT____00007);
constraint array_var_int_element(Passover, Age, INT____00002);
constraint array_var_int_element(TenCommandments, Age, 5);
constraint array_var_int_element(Yemen, Age, INT____00003) :: defines_var(INT____00003);
constraint int_lin_eq([-1, 1], [INT____00002, Age[1]], -2) :: defines_var(INT____00002);
constraint int_lin_eq([-1, 1], [INT____00006, Age[5]], -3) :: defines_var(INT____00006);
constraint int_lin_eq([-1, 1], [INT____00007, Age[4]], 3);
constraint int_lin_eq_reif([1, -1], [INT____00009, INT____00010], 2, BOOL____00011) :: defines_var(BOOL____00011);
constraint int_lin_eq_reif([1, -1], [INT____00009, INT____00010], 3, BOOL____00012) :: defines_var(BOOL____00012);
constraint int_lt(INT____00003, INT____00004);
constraint set_in(Age[1], {3, 5, 7, 8, 10});
constraint set_in(Age[2], {3, 5, 7, 8, 10});
constraint set_in(Age[3], {3, 5, 7, 8, 10});
constraint set_in(Age[4], {3, 5, 7, 8, 10});
constraint set_in(Age[5], {3, 5, 7, 8, 10});
solve satisfy;
