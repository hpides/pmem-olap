predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var 1..6: s____00001;
var 1..6: s____00004;
var 1..6: s____00007;
var 1..6: s____00010;
var 1..4: s____00013;
var 1..4: s____00016;
var 1..4: s____00019;
var 1..4: s____00022;
var 1..4: s____00025;
var 1..4: s____00028;
var 18..18: ticks :: output_var = 18;
array [1..24] of var 0..1: x :: output_array([1..4, 1..6]);
constraint int_lin_eq([-1, 1, 1, 1, 1], [s____00013, x[1], x[7], x[13], x[19]], 0);
constraint int_lin_eq([-1, 1, 1, 1, 1], [s____00016, x[2], x[8], x[14], x[20]], 0);
constraint int_lin_eq([-1, 1, 1, 1, 1], [s____00019, x[3], x[9], x[15], x[21]], 0);
constraint int_lin_eq([-1, 1, 1, 1, 1], [s____00022, x[4], x[10], x[16], x[22]], 0);
constraint int_lin_eq([-1, 1, 1, 1, 1], [s____00025, x[5], x[11], x[17], x[23]], 0);
constraint int_lin_eq([-1, 1, 1, 1, 1], [s____00028, x[6], x[12], x[18], x[24]], 0);
constraint int_lin_eq([-1, 1, 1, 1, 1, 1, 1], [s____00001, x[1], x[2], x[3], x[4], x[5], x[6]], 0);
constraint int_lin_eq([-1, 1, 1, 1, 1, 1, 1], [s____00004, x[7], x[8], x[9], x[10], x[11], x[12]], 0);
constraint int_lin_eq([-1, 1, 1, 1, 1, 1, 1], [s____00007, x[13], x[14], x[15], x[16], x[17], x[18]], 0);
constraint int_lin_eq([-1, 1, 1, 1, 1, 1, 1], [s____00010, x[19], x[20], x[21], x[22], x[23], x[24]], 0);
constraint int_lin_eq([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10], x[11], x[12], x[13], x[14], x[15], x[16], x[17], x[18], x[19], x[20], x[21], x[22], x[23], x[24]], 18);
constraint int_mod(s____00001, 2, 0);
constraint int_mod(s____00004, 2, 0);
constraint int_mod(s____00007, 2, 0);
constraint int_mod(s____00010, 2, 0);
constraint int_mod(s____00013, 2, 0);
constraint int_mod(s____00016, 2, 0);
constraint int_mod(s____00019, 2, 0);
constraint int_mod(s____00022, 2, 0);
constraint int_mod(s____00025, 2, 0);
constraint int_mod(s____00028, 2, 0);
solve  :: int_search([x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10], x[11], x[12], x[13], x[14], x[15], x[16], x[17], x[18], x[19], x[20], x[21], x[22], x[23], x[24]], first_fail, indomain_min, complete) satisfy;
