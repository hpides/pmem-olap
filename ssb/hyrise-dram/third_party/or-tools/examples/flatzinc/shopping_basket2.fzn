array [1..9] of int: costs = [100, 111, 9999999, 90, 85, 2, 10, 10, 10];
array [1..3] of int: delivery_costs = [10, 5, 3];
array [1..3] of int: delivery_costs_limits = [150, 50, 100];
var bool: BOOL____00006 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00008 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00010 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00012 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00013 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00014 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00016 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00018 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00020 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00022 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00023 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00024 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00026 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00028 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00030 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00032 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00033 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00034 :: is_defined_var :: var_is_introduced;
var 2..9999999: INT____00001 :: is_defined_var :: var_is_introduced;
var 4..6: INT____00002 :: is_defined_var :: var_is_introduced;
var 2..9999999: INT____00003 :: is_defined_var :: var_is_introduced;
var 7..9: INT____00004 :: is_defined_var :: var_is_introduced;
var 2..9999999: INT____00005 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00007 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00009 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00011 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00015 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00017 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00019 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00021 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00025 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00027 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00029 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00031 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00035 :: is_defined_var :: var_is_introduced;
var 6..30000015: INT____00036 :: is_defined_var :: var_is_introduced;
var 6..30000015: total :: output_var = INT____00036;
array [1..3] of var 1..3: x :: output_array([1..3]);
constraint array_bool_and([BOOL____00012, BOOL____00013], BOOL____00014) :: defines_var(BOOL____00014);
constraint array_bool_and([BOOL____00022, BOOL____00023], BOOL____00024) :: defines_var(BOOL____00024);
constraint array_bool_and([BOOL____00032, BOOL____00033], BOOL____00034) :: defines_var(BOOL____00034);
constraint array_int_element(INT____00002, costs, INT____00003) :: defines_var(INT____00003);
constraint array_int_element(INT____00004, costs, INT____00005) :: defines_var(INT____00005);
constraint array_int_element(x[1], costs, INT____00001) :: defines_var(INT____00001);
constraint bool2int(BOOL____00006, INT____00007) :: defines_var(INT____00007);
constraint bool2int(BOOL____00008, INT____00009) :: defines_var(INT____00009);
constraint bool2int(BOOL____00010, INT____00011) :: defines_var(INT____00011);
constraint bool2int(BOOL____00014, INT____00015) :: defines_var(INT____00015);
constraint bool2int(BOOL____00016, INT____00017) :: defines_var(INT____00017);
constraint bool2int(BOOL____00018, INT____00019) :: defines_var(INT____00019);
constraint bool2int(BOOL____00020, INT____00021) :: defines_var(INT____00021);
constraint bool2int(BOOL____00024, INT____00025) :: defines_var(INT____00025);
constraint bool2int(BOOL____00026, INT____00027) :: defines_var(INT____00027);
constraint bool2int(BOOL____00028, INT____00029) :: defines_var(INT____00029);
constraint bool2int(BOOL____00030, INT____00031) :: defines_var(INT____00031);
constraint bool2int(BOOL____00034, INT____00035) :: defines_var(INT____00035);
constraint int_eq_reif(1, x[1], BOOL____00006) :: defines_var(BOOL____00006);
constraint int_eq_reif(1, x[2], BOOL____00008) :: defines_var(BOOL____00008);
constraint int_eq_reif(1, x[3], BOOL____00010) :: defines_var(BOOL____00010);
constraint int_eq_reif(2, x[1], BOOL____00016) :: defines_var(BOOL____00016);
constraint int_eq_reif(2, x[2], BOOL____00018) :: defines_var(BOOL____00018);
constraint int_eq_reif(2, x[3], BOOL____00020) :: defines_var(BOOL____00020);
constraint int_eq_reif(3, x[1], BOOL____00026) :: defines_var(BOOL____00026);
constraint int_eq_reif(3, x[2], BOOL____00028) :: defines_var(BOOL____00028);
constraint int_eq_reif(3, x[3], BOOL____00030) :: defines_var(BOOL____00030);
constraint int_lin_eq([-1, 1], [INT____00002, x[2]], -3) :: defines_var(INT____00002) :: domain;
constraint int_lin_eq([-1, 1], [INT____00004, x[3]], -6) :: defines_var(INT____00004) :: domain;
constraint int_lin_eq([-1, 1, 1, 1, 10, 5, 3], [INT____00036, INT____00001, INT____00003, INT____00005, INT____00015, INT____00025, INT____00035], 0) :: defines_var(INT____00036);
constraint int_lin_le_reif([-9999999, -2, -10], [INT____00027, INT____00029, INT____00031], -1, BOOL____00032) :: defines_var(BOOL____00032);
constraint int_lin_le_reif([-111, -85, -10], [INT____00017, INT____00019, INT____00021], -1, BOOL____00022) :: defines_var(BOOL____00022);
constraint int_lin_le_reif([-100, -90, -10], [INT____00007, INT____00009, INT____00011], -1, BOOL____00012) :: defines_var(BOOL____00012);
constraint int_lin_le_reif([100, 90, 10], [INT____00007, INT____00009, INT____00011], 149, BOOL____00013) :: defines_var(BOOL____00013);
constraint int_lin_le_reif([111, 85, 10], [INT____00017, INT____00019, INT____00021], 49, BOOL____00023) :: defines_var(BOOL____00023);
constraint int_lin_le_reif([9999999, 2, 10], [INT____00027, INT____00029, INT____00031], 99, BOOL____00033) :: defines_var(BOOL____00033);
solve  :: int_search(x, largest, indomain_max, complete) satisfy;
