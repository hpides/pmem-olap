predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..3] of var 0..6: gcc____00003;
array [1..6] of var 0..2: m1____00001;
array [1..6] of var 0..2: m2____00002;
array [1..6] of var 1..9: v1 :: output_array([1..6]);
array [1..6] of var 1..9: v2 :: output_array([1..6]);
constraint global_cardinality(m1____00001, [0, 1, 2], gcc____00003);
constraint global_cardinality(m2____00002, [0, 1, 2], gcc____00003);
constraint int_eq(v1[1], 1);
constraint int_eq(v1[2], 9);
constraint int_eq(v1[3], 1);
constraint int_eq(v1[4], 5);
constraint int_eq(v1[5], 2);
constraint int_eq(v1[6], 1);
constraint int_eq(v2[1], 6);
constraint int_eq(v2[2], 4);
constraint int_eq(v2[3], 1);
constraint int_eq(v2[4], 1);
constraint int_eq(v2[5], 5);
constraint int_eq(v2[6], 5);
constraint int_mod(v1[1], 3, m1____00001[1]);
constraint int_mod(v1[2], 3, m1____00001[2]);
constraint int_mod(v1[3], 3, m1____00001[3]);
constraint int_mod(v1[4], 3, m1____00001[4]);
constraint int_mod(v1[5], 3, m1____00001[5]);
constraint int_mod(v1[6], 3, m1____00001[6]);
constraint int_mod(v2[1], 3, m2____00002[1]);
constraint int_mod(v2[2], 3, m2____00002[2]);
constraint int_mod(v2[3], 3, m2____00002[3]);
constraint int_mod(v2[4], 3, m2____00002[4]);
constraint int_mod(v2[5], 3, m2____00002[5]);
constraint int_mod(v2[6], 3, m2____00002[6]);
solve satisfy;
