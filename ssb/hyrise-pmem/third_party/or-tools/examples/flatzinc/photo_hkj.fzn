predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..49] of int: preferences = [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0];
var bool: BOOL____00003 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00007 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00011 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00015 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00019 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00023 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00027 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00031 :: is_defined_var :: var_is_introduced;
var -6..6: INT____00001 :: is_defined_var :: var_is_introduced;
var 0..6: INT____00002 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00004 :: is_defined_var :: var_is_introduced;
var -6..6: INT____00005 :: is_defined_var :: var_is_introduced;
var 0..6: INT____00006 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00008 :: is_defined_var :: var_is_introduced;
var -6..6: INT____00009 :: is_defined_var :: var_is_introduced;
var 0..6: INT____00010 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00012 :: is_defined_var :: var_is_introduced;
var -6..6: INT____00013 :: is_defined_var :: var_is_introduced;
var 0..6: INT____00014 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00016 :: is_defined_var :: var_is_introduced;
var -6..6: INT____00017 :: is_defined_var :: var_is_introduced;
var 0..6: INT____00018 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00020 :: is_defined_var :: var_is_introduced;
var -6..6: INT____00021 :: is_defined_var :: var_is_introduced;
var 0..6: INT____00022 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00024 :: is_defined_var :: var_is_introduced;
var -6..6: INT____00025 :: is_defined_var :: var_is_introduced;
var 0..6: INT____00026 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00028 :: is_defined_var :: var_is_introduced;
var -6..6: INT____00029 :: is_defined_var :: var_is_introduced;
var 0..6: INT____00030 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00032 :: is_defined_var :: var_is_introduced;
var 0..8: INT____00033 :: is_defined_var :: var_is_introduced;
array [1..7] of var 1..7: positions :: output_array([1..7]);
var 0..8: z :: output_var = INT____00033;
constraint all_different_int(positions);
constraint bool2int(BOOL____00003, INT____00004) :: defines_var(INT____00004);
constraint bool2int(BOOL____00007, INT____00008) :: defines_var(INT____00008);
constraint bool2int(BOOL____00011, INT____00012) :: defines_var(INT____00012);
constraint bool2int(BOOL____00015, INT____00016) :: defines_var(INT____00016);
constraint bool2int(BOOL____00019, INT____00020) :: defines_var(INT____00020);
constraint bool2int(BOOL____00023, INT____00024) :: defines_var(INT____00024);
constraint bool2int(BOOL____00027, INT____00028) :: defines_var(INT____00028);
constraint bool2int(BOOL____00031, INT____00032) :: defines_var(INT____00032);
constraint int_abs(INT____00001, INT____00002) :: defines_var(INT____00002);
constraint int_abs(INT____00005, INT____00006) :: defines_var(INT____00006);
constraint int_abs(INT____00009, INT____00010) :: defines_var(INT____00010);
constraint int_abs(INT____00013, INT____00014) :: defines_var(INT____00014);
constraint int_abs(INT____00017, INT____00018) :: defines_var(INT____00018);
constraint int_abs(INT____00021, INT____00022) :: defines_var(INT____00022);
constraint int_abs(INT____00025, INT____00026) :: defines_var(INT____00026);
constraint int_abs(INT____00029, INT____00030) :: defines_var(INT____00030);
constraint int_eq_reif(INT____00002, 1, BOOL____00003) :: defines_var(BOOL____00003);
constraint int_eq_reif(INT____00006, 1, BOOL____00007) :: defines_var(BOOL____00007);
constraint int_eq_reif(INT____00010, 1, BOOL____00011) :: defines_var(BOOL____00011);
constraint int_eq_reif(INT____00014, 1, BOOL____00015) :: defines_var(BOOL____00015);
constraint int_eq_reif(INT____00018, 1, BOOL____00019) :: defines_var(BOOL____00019);
constraint int_eq_reif(INT____00022, 1, BOOL____00023) :: defines_var(BOOL____00023);
constraint int_eq_reif(INT____00026, 1, BOOL____00027) :: defines_var(BOOL____00027);
constraint int_eq_reif(INT____00030, 1, BOOL____00031) :: defines_var(BOOL____00031);
constraint int_lin_eq([-1, -1, 1], [INT____00009, positions[1], positions[2]], 0) :: defines_var(INT____00009);
constraint int_lin_eq([-1, -1, 1], [INT____00017, positions[3], positions[4]], 0) :: defines_var(INT____00017);
constraint int_lin_eq([-1, -1, 1], [INT____00025, positions[3], positions[7]], 0) :: defines_var(INT____00025);
constraint int_lin_eq([-1, -1, 1], [INT____00029, positions[4], positions[7]], 0) :: defines_var(INT____00029);
constraint int_lin_eq([-1, 1, 1, 1, 1, 1, 1, 1, 1], [INT____00033, INT____00004, INT____00008, INT____00012, INT____00016, INT____00020, INT____00024, INT____00028, INT____00032], 0) :: defines_var(INT____00033);
constraint int_plus(INT____00001, positions[5], positions[1]) :: defines_var(INT____00001);
constraint int_plus(INT____00005, positions[6], positions[1]) :: defines_var(INT____00005);
constraint int_plus(INT____00013, positions[5], positions[2]) :: defines_var(INT____00013);
constraint int_plus(INT____00021, positions[6], positions[4]) :: defines_var(INT____00021);
solve  :: int_search(positions, first_fail, indomain, complete) maximize INT____00033;
