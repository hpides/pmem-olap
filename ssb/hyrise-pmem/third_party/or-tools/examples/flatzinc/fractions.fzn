predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var 1..9: A;
var 1..9: B;
var 1..9: C;
var 1..9: D;
var 1..27: D1;
var 3..81: D2;
var 1..81: D3;
var 1..9: E;
var 1..9: F;
var 1..9: G;
var 1..9: H;
var 1..9: I;
var 1..729: INT____00004 :: is_defined_var :: var_is_introduced;
var 1..59049: INT____00005 :: is_defined_var :: var_is_introduced;
var 1..729: INT____00006 :: is_defined_var :: var_is_introduced;
var 1..59049: INT____00007 :: is_defined_var :: var_is_introduced;
var 1..729: INT____00008 :: is_defined_var :: var_is_introduced;
var 1..59049: INT____00009 :: is_defined_var :: var_is_introduced;
var 1..6561: INT____00010 :: is_defined_var :: var_is_introduced;
var 3..177147: INT____00012 :: is_defined_var :: var_is_introduced;
var 1..729: INT____00013 :: is_defined_var :: var_is_introduced;
var 1..729: INT____00014 :: is_defined_var :: var_is_introduced;
array [1..9] of var 1..9: Vars :: output_array([1..9]) = [A, B, C, D, E, F, G, H, I];
constraint all_different_int(Vars);
constraint int_le(INT____00006, INT____00004);
constraint int_le(INT____00014, INT____00013);
constraint int_lin_eq([-1, 1, 1, 1], [INT____00012, INT____00005, INT____00007, INT____00009], 0) :: defines_var(INT____00012);
constraint int_lin_le([-3, 1], [A, D1], 0);
constraint int_lin_le([3, -1], [G, D2], 0);
constraint int_times(A, D2, INT____00004) :: defines_var(INT____00004);
constraint int_times(B, C, D1);
constraint int_times(D, D1, INT____00006) :: defines_var(INT____00006);
constraint int_times(D, D3, INT____00013) :: defines_var(INT____00013);
constraint int_times(D1, D2, INT____00010) :: defines_var(INT____00010);
constraint int_times(E, F, D2);
constraint int_times(G, D1, INT____00008) :: defines_var(INT____00008);
constraint int_times(G, D2, INT____00014) :: defines_var(INT____00014);
constraint int_times(H, I, D3);
constraint int_times(INT____00004, D3, INT____00005) :: defines_var(INT____00005);
constraint int_times(INT____00006, D3, INT____00007) :: defines_var(INT____00007);
constraint int_times(INT____00008, D2, INT____00009) :: defines_var(INT____00009);
constraint int_times(INT____00010, D3, INT____00012);
solve  :: int_search([A, B, C, D, E, F, G, H, I, D1, D2, D3], first_fail, indomain, complete) satisfy;
