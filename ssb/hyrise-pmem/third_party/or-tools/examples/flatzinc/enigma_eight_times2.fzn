predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var 10000..99999: INT____00001 :: is_defined_var :: var_is_introduced;
var 80000..99999: INT____00003 :: is_defined_var :: var_is_introduced;
var 10000..99999: x :: output_var = INT____00001;
array [1..5] of var 0..9: x_a :: output_array([1..5]);
var 10000..99999: y :: output_var = INT____00003;
array [1..5] of var 0..9: y_a :: output_array([1..5]);
constraint all_different_int([x_a[1], x_a[2], x_a[3], x_a[4], x_a[5], y_a[1], y_a[2], y_a[3], y_a[4], y_a[5]]);
constraint int_lin_eq([-1, 8], [INT____00003, INT____00001], 0) :: defines_var(INT____00003);
constraint int_lin_eq([-1, 10000, 1000, 100, 10, 1], [INT____00001, x_a[1], x_a[2], x_a[3], x_a[4], x_a[5]], 0) :: defines_var(INT____00001);
constraint int_lin_eq([-1, 10000, 1000, 100, 10, 1], [INT____00003, y_a[1], y_a[2], y_a[3], y_a[4], y_a[5]], 0);
constraint int_lin_le([-1, -1, -1, -1, -1, 1, 1, 1, 1, 1], [x_a[1], x_a[2], x_a[3], x_a[4], x_a[5], y_a[1], y_a[2], y_a[3], y_a[4], y_a[5]], -1);
solve  :: int_search([x_a[1], x_a[2], x_a[3], x_a[4], x_a[5], y_a[1], y_a[2], y_a[3], y_a[4], y_a[5]], first_fail, indomain, complete) satisfy;
