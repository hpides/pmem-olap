predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var bool: BOOL____00002 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00004 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00006 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00008 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00009 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00010 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00011 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00012 :: is_defined_var :: var_is_introduced;
array [1..4] of var 0..1: c_pos :: output_array([1..4]);
var 0..4: num_changes :: output_var = 2;
array [1..5] of var int: x :: output_array([1..5]);
constraint bool2int(BOOL____00002, INT____00009) :: defines_var(INT____00009);
constraint bool2int(BOOL____00004, INT____00010) :: defines_var(INT____00010);
constraint bool2int(BOOL____00006, INT____00011) :: defines_var(INT____00011);
constraint bool2int(BOOL____00008, INT____00012) :: defines_var(INT____00012);
constraint int_eq_reif(c_pos[1], 1, BOOL____00002);
constraint int_eq_reif(c_pos[2], 1, BOOL____00004);
constraint int_eq_reif(c_pos[3], 1, BOOL____00006);
constraint int_eq_reif(c_pos[4], 1, BOOL____00008);
constraint int_le(1, x[1]);
constraint int_le(1, x[2]);
constraint int_le(1, x[3]);
constraint int_le(1, x[4]);
constraint int_le(1, x[5]);
constraint int_le(x[1], 5);
constraint int_le(x[2], 5);
constraint int_le(x[3], 5);
constraint int_le(x[4], 5);
constraint int_le(x[5], 5);
constraint int_lin_eq([-1, 1, 1, 1, 1], [2, INT____00009, INT____00010, INT____00011, INT____00012], 0);
constraint int_ne_reif(x[1], x[2], BOOL____00002) :: defines_var(BOOL____00002);
constraint int_ne_reif(x[2], x[3], BOOL____00004) :: defines_var(BOOL____00004);
constraint int_ne_reif(x[3], x[4], BOOL____00006) :: defines_var(BOOL____00006);
constraint int_ne_reif(x[4], x[5], BOOL____00008) :: defines_var(BOOL____00008);
solve satisfy;
