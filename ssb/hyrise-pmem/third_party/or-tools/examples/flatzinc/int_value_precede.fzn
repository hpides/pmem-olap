var bool: BOOL____00003 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00005 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00007 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00009 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00011 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00013 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00014 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00015 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00016 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00018 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00020 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00021 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00022 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00023 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00024 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00025 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00026 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00027 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00028 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00029 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00030 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00031 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00032 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00033 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00034 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00035 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00036 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00037 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00004 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00006 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00008 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00010 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00012 :: is_defined_var :: var_is_introduced;
var 0..6: INT____00017 :: is_defined_var :: var_is_introduced;
var 0..6: INT____00019 :: is_defined_var :: var_is_introduced;
var 1..5: s_pos____00001;
var 1..5: t_pos____00002;
array [1..5] of var 0..6: x :: output_array([1..5]);
constraint array_bool_and([BOOL____00013, BOOL____00014, BOOL____00015], BOOL____00036) :: defines_var(BOOL____00036);
constraint array_bool_and([BOOL____00020, BOOL____00016, BOOL____00018, BOOL____00035, BOOL____00032, BOOL____00029, BOOL____00026, BOOL____00023], BOOL____00037) :: defines_var(BOOL____00037);
constraint array_bool_or([BOOL____00036, BOOL____00037], true);
constraint array_var_int_element(s_pos____00001, x, INT____00017) :: defines_var(INT____00017);
constraint array_var_int_element(t_pos____00002, x, INT____00019) :: defines_var(INT____00019);
constraint bool2int(BOOL____00003, INT____00004) :: defines_var(INT____00004);
constraint bool2int(BOOL____00005, INT____00006) :: defines_var(INT____00006);
constraint bool2int(BOOL____00007, INT____00008) :: defines_var(INT____00008);
constraint bool2int(BOOL____00009, INT____00010) :: defines_var(INT____00010);
constraint bool2int(BOOL____00011, INT____00012) :: defines_var(INT____00012);
constraint bool_le_reif(BOOL____00021, BOOL____00022, BOOL____00023) :: defines_var(BOOL____00023);
constraint bool_le_reif(BOOL____00024, BOOL____00025, BOOL____00026) :: defines_var(BOOL____00026);
constraint bool_le_reif(BOOL____00027, BOOL____00028, BOOL____00029) :: defines_var(BOOL____00029);
constraint bool_le_reif(BOOL____00030, BOOL____00031, BOOL____00032) :: defines_var(BOOL____00032);
constraint bool_le_reif(BOOL____00033, BOOL____00034, BOOL____00035) :: defines_var(BOOL____00035);
constraint int_eq(x[1], 4);
constraint int_eq(x[2], 0);
constraint int_eq(x[3], 6);
constraint int_eq(x[4], 1);
constraint int_eq(x[5], 0);
constraint int_eq_reif(INT____00017, 0, BOOL____00018) :: defines_var(BOOL____00018);
constraint int_eq_reif(INT____00019, 1, BOOL____00020) :: defines_var(BOOL____00020);
constraint int_eq_reif(s_pos____00001, 1, BOOL____00014) :: defines_var(BOOL____00014);
constraint int_eq_reif(t_pos____00002, 1, BOOL____00015) :: defines_var(BOOL____00015);
constraint int_eq_reif(x[1], 1, BOOL____00003) :: defines_var(BOOL____00003);
constraint int_eq_reif(x[2], 1, BOOL____00005) :: defines_var(BOOL____00005);
constraint int_eq_reif(x[3], 1, BOOL____00007) :: defines_var(BOOL____00007);
constraint int_eq_reif(x[4], 1, BOOL____00009) :: defines_var(BOOL____00009);
constraint int_eq_reif(x[5], 1, BOOL____00011) :: defines_var(BOOL____00011);
constraint int_le_reif(1, INT____00017, BOOL____00021) :: defines_var(BOOL____00021);
constraint int_le_reif(2, INT____00017, BOOL____00024) :: defines_var(BOOL____00024);
constraint int_le_reif(3, INT____00017, BOOL____00027) :: defines_var(BOOL____00027);
constraint int_le_reif(4, INT____00017, BOOL____00030) :: defines_var(BOOL____00030);
constraint int_le_reif(5, INT____00017, BOOL____00033) :: defines_var(BOOL____00033);
constraint int_lin_eq_reif([1, 1, 1, 1, 1], [INT____00004, INT____00006, INT____00008, INT____00010, INT____00012], 0, BOOL____00013) :: defines_var(BOOL____00013);
constraint int_lt_reif(s_pos____00001, t_pos____00002, BOOL____00016) :: defines_var(BOOL____00016);
constraint int_ne_reif(x[1], 1, BOOL____00022) :: defines_var(BOOL____00022);
constraint int_ne_reif(x[2], 1, BOOL____00025) :: defines_var(BOOL____00025);
constraint int_ne_reif(x[3], 1, BOOL____00028) :: defines_var(BOOL____00028);
constraint int_ne_reif(x[4], 1, BOOL____00031) :: defines_var(BOOL____00031);
constraint int_ne_reif(x[5], 1, BOOL____00034) :: defines_var(BOOL____00034);
solve satisfy;
