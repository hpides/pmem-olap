predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var 2..3: INT____00001 :: is_defined_var :: var_is_introduced;
var 2..3: INT____00002 :: is_defined_var :: var_is_introduced;
var 1..3: america;
var 1..3: australia;
var 1..1: basketball = 1;
array [1..3] of var 1..3: country :: output_array([1..3]) = [america, 2, australia];
var 1..3: cricket;
var 2..2: israel = 2;
array [1..3] of var 1..3: place :: output_array([1..3]);
var 1..3: tennis;
array [1..3] of var 1..3: sport :: output_array([1..3]) = [1, tennis, cricket];
constraint all_different_int(country);
constraint all_different_int(place);
constraint all_different_int(sport);
constraint array_var_int_element(america, place, INT____00001) :: defines_var(INT____00001);
constraint array_var_int_element(cricket, place, 1);
constraint array_var_int_element(tennis, place, INT____00002) :: defines_var(INT____00002);
constraint int_lt(place[1], INT____00001);
constraint int_lt(place[2], INT____00002);
solve satisfy;
