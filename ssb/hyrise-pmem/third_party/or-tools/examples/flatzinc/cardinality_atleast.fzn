var bool: BOOL____00001 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00003 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00005 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00007 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00009 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00011 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00002 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00004 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00006 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00008 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00010 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00012 :: is_defined_var :: var_is_introduced;
var 1..1: nvar :: output_var = 1;
array [1..2] of var 1..8: values :: output_array([1..2]);
array [1..3] of var 1..8: variables :: output_array([1..3]);
constraint bool2int(BOOL____00001, INT____00002) :: defines_var(INT____00002);
constraint bool2int(BOOL____00003, INT____00004) :: defines_var(INT____00004);
constraint bool2int(BOOL____00005, INT____00006) :: defines_var(INT____00006);
constraint bool2int(BOOL____00007, INT____00008) :: defines_var(INT____00008);
constraint bool2int(BOOL____00009, INT____00010) :: defines_var(INT____00010);
constraint bool2int(BOOL____00011, INT____00012) :: defines_var(INT____00012);
constraint int_eq(3, values[1]);
constraint int_eq(3, variables[1]);
constraint int_eq(3, variables[2]);
constraint int_eq(8, values[2]);
constraint int_eq(8, variables[3]);
constraint int_eq_reif(values[1], variables[1], BOOL____00001) :: defines_var(BOOL____00001);
constraint int_eq_reif(values[1], variables[2], BOOL____00003) :: defines_var(BOOL____00003);
constraint int_eq_reif(values[1], variables[3], BOOL____00005) :: defines_var(BOOL____00005);
constraint int_eq_reif(values[2], variables[1], BOOL____00007) :: defines_var(BOOL____00007);
constraint int_eq_reif(values[2], variables[2], BOOL____00009) :: defines_var(BOOL____00009);
constraint int_eq_reif(values[2], variables[3], BOOL____00011) :: defines_var(BOOL____00011);
constraint int_lin_le([-1, -1, -1], [INT____00002, INT____00004, INT____00006], -1);
constraint int_lin_le([-1, -1, -1], [INT____00008, INT____00010, INT____00012], -1);
solve satisfy;
