var bool: BOOL____00001 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00003 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00005 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00007 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00009 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00011 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00013 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00015 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00017 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00019 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00021 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00023 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00002 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00004 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00006 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00008 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00010 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00012 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00014 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00016 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00018 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00020 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00022 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00024 :: is_defined_var :: var_is_introduced;
var 6..6: N = 6;
array [1..4] of var 1..5: x :: output_array([1..4]);
constraint bool2int(BOOL____00001, INT____00002) :: defines_var(INT____00002);
constraint bool2int(BOOL____00003, INT____00004) :: defines_var(INT____00004);
constraint bool2int(BOOL____00005, INT____00006) :: defines_var(INT____00006);
constraint bool2int(BOOL____00007, INT____00008) :: defines_var(INT____00008);
constraint bool2int(BOOL____00009, INT____00010) :: defines_var(INT____00010);
constraint bool2int(BOOL____00011, INT____00012) :: defines_var(INT____00012);
constraint bool2int(BOOL____00013, INT____00014) :: defines_var(INT____00014);
constraint bool2int(BOOL____00015, INT____00016) :: defines_var(INT____00016);
constraint bool2int(BOOL____00017, INT____00018) :: defines_var(INT____00018);
constraint bool2int(BOOL____00019, INT____00020) :: defines_var(INT____00020);
constraint bool2int(BOOL____00021, INT____00022) :: defines_var(INT____00022);
constraint bool2int(BOOL____00023, INT____00024) :: defines_var(INT____00024);
constraint int_eq(x[1], 5);
constraint int_eq(x[2], 1);
constraint int_eq(x[3], 5);
constraint int_eq(x[4], 5);
constraint int_eq_reif(x[1], x[2], BOOL____00001) :: defines_var(BOOL____00001);
constraint int_eq_reif(x[1], x[3], BOOL____00003) :: defines_var(BOOL____00003);
constraint int_eq_reif(x[1], x[4], BOOL____00005) :: defines_var(BOOL____00005);
constraint int_eq_reif(x[2], x[1], BOOL____00007) :: defines_var(BOOL____00007);
constraint int_eq_reif(x[2], x[3], BOOL____00009) :: defines_var(BOOL____00009);
constraint int_eq_reif(x[2], x[4], BOOL____00011) :: defines_var(BOOL____00011);
constraint int_eq_reif(x[3], x[1], BOOL____00013) :: defines_var(BOOL____00013);
constraint int_eq_reif(x[3], x[2], BOOL____00015) :: defines_var(BOOL____00015);
constraint int_eq_reif(x[3], x[4], BOOL____00017) :: defines_var(BOOL____00017);
constraint int_eq_reif(x[4], x[1], BOOL____00019) :: defines_var(BOOL____00019);
constraint int_eq_reif(x[4], x[2], BOOL____00021) :: defines_var(BOOL____00021);
constraint int_eq_reif(x[4], x[3], BOOL____00023) :: defines_var(BOOL____00023);
constraint int_lin_le([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [INT____00002, INT____00004, INT____00006, INT____00008, INT____00010, INT____00012, INT____00014, INT____00016, INT____00018, INT____00020, INT____00022, INT____00024], -6);
solve satisfy;
