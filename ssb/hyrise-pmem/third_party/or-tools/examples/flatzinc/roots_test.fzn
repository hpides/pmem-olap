predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var bool: BOOL____00004 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00005 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00006 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00007 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00008 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00009 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00010 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00012 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00013 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00014 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00015 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00016 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00017 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00018 :: is_defined_var :: var_is_introduced;
var set of 1..5: s :: output_var = {2, 4, 5};
var set of 1..8: t :: output_var = {2, 3, 8};
array [1..5] of var 1..3: x :: output_array([1..5]);
constraint array_bool_and([BOOL____00008, BOOL____00005], true);
constraint array_bool_and([BOOL____00016, BOOL____00013], true);
constraint bool_eq_reif(BOOL____00004, false, BOOL____00005) :: defines_var(BOOL____00005);
constraint bool_eq_reif(BOOL____00007, false, BOOL____00008) :: defines_var(BOOL____00008);
constraint bool_eq_reif(BOOL____00012, false, BOOL____00013) :: defines_var(BOOL____00013);
constraint bool_eq_reif(BOOL____00015, false, BOOL____00016) :: defines_var(BOOL____00016);
constraint int_eq(x[1], 1);
constraint int_eq(x[2], 3);
constraint int_eq(x[3], 1);
constraint int_eq(x[4], 2);
constraint int_eq(x[5], 3);
constraint int_eq_reif(x[1], 2, BOOL____00004) :: defines_var(BOOL____00004);
constraint int_eq_reif(x[1], 3, BOOL____00012) :: defines_var(BOOL____00012);
constraint int_eq_reif(x[2], 2, BOOL____00006) :: defines_var(BOOL____00006);
constraint int_eq_reif(x[2], 3, BOOL____00014) :: defines_var(BOOL____00014);
constraint int_eq_reif(x[3], 2, BOOL____00007) :: defines_var(BOOL____00007);
constraint int_eq_reif(x[3], 3, BOOL____00015) :: defines_var(BOOL____00015);
constraint int_eq_reif(x[4], 2, BOOL____00009) :: defines_var(BOOL____00009);
constraint int_eq_reif(x[4], 3, BOOL____00017) :: defines_var(BOOL____00017);
constraint int_eq_reif(x[5], 2, BOOL____00010) :: defines_var(BOOL____00010);
constraint int_eq_reif(x[5], 3, BOOL____00018) :: defines_var(BOOL____00018);
constraint set_in_reif(x[2], {2, 3, 8}, true);
constraint set_in_reif(x[4], {2, 3, 8}, true);
constraint set_in_reif(x[5], {2, 3, 8}, true);
solve satisfy;
