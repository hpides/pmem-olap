predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var bool: BOOL____00002 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00003 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00004 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00005 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00006 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00007 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00009 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00010 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00011 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00012 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00013 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00014 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00016 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00017 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00018 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00019 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00020 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00021 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00008 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00015 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00022 :: is_defined_var :: var_is_introduced;
var 2..3: nval____00001;
array [1..5] of var 1..3: variables :: output_array([1..5]);
constraint array_bool_or([BOOL____00006, BOOL____00005, BOOL____00004, BOOL____00003, BOOL____00002], BOOL____00007) :: defines_var(BOOL____00007);
constraint array_bool_or([BOOL____00013, BOOL____00012, BOOL____00011, BOOL____00010, BOOL____00009], BOOL____00014) :: defines_var(BOOL____00014);
constraint array_bool_or([BOOL____00020, BOOL____00019, BOOL____00018, BOOL____00017, BOOL____00016], BOOL____00021) :: defines_var(BOOL____00021);
constraint bool2int(BOOL____00007, INT____00008) :: defines_var(INT____00008);
constraint bool2int(BOOL____00014, INT____00015) :: defines_var(INT____00015);
constraint bool2int(BOOL____00021, INT____00022) :: defines_var(INT____00022);
constraint int_eq(variables[1], 3);
constraint int_eq(variables[2], 1);
constraint int_eq(variables[3], 3);
constraint int_eq(variables[4], 3);
constraint int_eq(variables[5], 3);
constraint int_eq_reif(variables[1], 1, BOOL____00002) :: defines_var(BOOL____00002);
constraint int_eq_reif(variables[1], 2, BOOL____00009) :: defines_var(BOOL____00009);
constraint int_eq_reif(variables[1], 3, BOOL____00016) :: defines_var(BOOL____00016);
constraint int_eq_reif(variables[2], 1, BOOL____00003) :: defines_var(BOOL____00003);
constraint int_eq_reif(variables[2], 2, BOOL____00010) :: defines_var(BOOL____00010);
constraint int_eq_reif(variables[2], 3, BOOL____00017) :: defines_var(BOOL____00017);
constraint int_eq_reif(variables[3], 1, BOOL____00004) :: defines_var(BOOL____00004);
constraint int_eq_reif(variables[3], 2, BOOL____00011) :: defines_var(BOOL____00011);
constraint int_eq_reif(variables[3], 3, BOOL____00018) :: defines_var(BOOL____00018);
constraint int_eq_reif(variables[4], 1, BOOL____00005) :: defines_var(BOOL____00005);
constraint int_eq_reif(variables[4], 2, BOOL____00012) :: defines_var(BOOL____00012);
constraint int_eq_reif(variables[4], 3, BOOL____00019) :: defines_var(BOOL____00019);
constraint int_eq_reif(variables[5], 1, BOOL____00006) :: defines_var(BOOL____00006);
constraint int_eq_reif(variables[5], 2, BOOL____00013) :: defines_var(BOOL____00013);
constraint int_eq_reif(variables[5], 3, BOOL____00020) :: defines_var(BOOL____00020);
constraint int_lin_eq([-1, 1, 1, 1], [nval____00001, INT____00008, INT____00015, INT____00022], 0);
solve satisfy;
