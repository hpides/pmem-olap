predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..20] of int: data = [4, 5, 1, 4, 4, 4, 1, 5, 5, 2, 2, 4, 2, 2, 4, 2, 3, 4, 5, 2];
array [1..4] of int: testcase = [5, 3, 1, 2];
var bool: BOOL____00005 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00006 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00007 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00008 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00009 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00010 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00011 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00012 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00013 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00014 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00015 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00016 :: is_defined_var :: var_is_introduced;
var int: INT____00001 :: is_defined_var :: var_is_introduced;
var int: INT____00002 :: is_defined_var :: var_is_introduced;
var int: INT____00003 :: is_defined_var :: var_is_introduced;
var 5..20: INT____00018 :: is_defined_var :: var_is_introduced;
array [1..4] of var int: dists :: output_array([1..4]);
var int: min_dist;
var 1..4: min_ix :: output_var;
array [1..5] of var 1..5: x :: output_array([1..5]);
constraint array_bool_and([BOOL____00005, BOOL____00006], BOOL____00013) :: defines_var(BOOL____00013);
constraint array_bool_and([BOOL____00007, BOOL____00008], BOOL____00014) :: defines_var(BOOL____00014);
constraint array_bool_and([BOOL____00009, BOOL____00010], BOOL____00015) :: defines_var(BOOL____00015);
constraint array_bool_and([BOOL____00011, BOOL____00012], BOOL____00016) :: defines_var(BOOL____00016);
constraint array_bool_or([BOOL____00016, BOOL____00015, BOOL____00013, BOOL____00014], true);
constraint array_int_element(INT____00018, data, x[5]);
constraint int_eq(dists[1], 9);
constraint int_eq(dists[2], 30);
constraint int_eq(dists[3], 11);
constraint int_eq(dists[4], 27);
constraint int_eq(x[1], 5);
constraint int_eq(x[2], 3);
constraint int_eq(x[3], 1);
constraint int_eq(x[4], 2);
constraint int_eq_reif(min_ix, 1, BOOL____00006) :: defines_var(BOOL____00006);
constraint int_eq_reif(min_ix, 2, BOOL____00008) :: defines_var(BOOL____00008);
constraint int_eq_reif(min_ix, 3, BOOL____00010) :: defines_var(BOOL____00010);
constraint int_eq_reif(min_ix, 4, BOOL____00012) :: defines_var(BOOL____00012);
constraint int_eq_reif(dists[1], min_dist, BOOL____00005) :: defines_var(BOOL____00005);
constraint int_eq_reif(dists[2], min_dist, BOOL____00007) :: defines_var(BOOL____00007);
constraint int_eq_reif(dists[3], min_dist, BOOL____00009) :: defines_var(BOOL____00009);
constraint int_eq_reif(dists[4], min_dist, BOOL____00011) :: defines_var(BOOL____00011);
constraint int_le(0, dists[1]);
constraint int_le(0, dists[2]);
constraint int_le(0, dists[3]);
constraint int_le(0, dists[4]);
constraint int_lin_eq([-1, 5], [INT____00018, min_ix], 0) :: defines_var(INT____00018) :: domain;
constraint int_min(dists[1], dists[1], INT____00001) :: defines_var(INT____00001);
constraint int_min(dists[2], INT____00001, INT____00002) :: defines_var(INT____00002);
constraint int_min(dists[3], INT____00002, INT____00003) :: defines_var(INT____00003);
constraint int_min(dists[4], INT____00003, min_dist);
solve minimize min_dist;
