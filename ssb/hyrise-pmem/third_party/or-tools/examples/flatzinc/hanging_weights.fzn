predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var 4..13: INT____00002 :: is_defined_var :: var_is_introduced;
var 5..13: INT____00003 :: is_defined_var :: var_is_introduced;
var 1..13: a :: output_var;
var 4..13: b :: output_var = INT____00002;
var 1..13: c :: output_var;
var 5..13: d :: output_var = INT____00003;
var 1..13: e :: output_var;
var 1..13: f :: output_var;
var 1..13: g :: output_var;
var 1..13: h :: output_var;
var 1..13: i :: output_var;
var 1..13: j :: output_var;
var 1..13: k :: output_var;
var 1..13: l :: output_var;
var 1..13: m :: output_var;
var 13..169: total;
constraint all_different_int([a, b, c, d, e, f, g, h, i, j, k, l, m]);
constraint int_lin_eq([-1, 4], [INT____00002, a], 0) :: defines_var(INT____00002);
constraint int_lin_eq([-1, 5], [INT____00003, c], 0) :: defines_var(INT____00003);
constraint int_lin_eq([3, -2], [e, f], 0);
constraint int_lin_eq([-2, -2, 3], [INT____00003, c, g], 0);
constraint int_lin_eq([-2, -2, 3, -3], [e, f, h, i], 0);
constraint int_lin_eq([1, 1, 1, 1, -1, -4], [e, f, h, i, l, m], 0);
constraint int_lin_eq([3, -2, 3, -2, -2, 2, -1], [INT____00002, INT____00003, a, c, g, j, k], 0);
constraint int_lin_eq([-3, -3, -3, -3, 4, 4, -3, 4, 4, -3, -3, 4, 4], [INT____00002, INT____00003, a, c, e, f, g, h, i, j, k, l, m], 0);
constraint int_lin_eq([-1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [total, a, b, c, d, e, f, g, h, i, j, k, l, m], 0);
solve satisfy;
