predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var -9..9: INT____00001 :: is_defined_var :: var_is_introduced;
var -9..9: INT____00003 :: is_defined_var :: var_is_introduced;
var -9..9: INT____00005 :: is_defined_var :: var_is_introduced;
var -9..9: INT____00007 :: is_defined_var :: var_is_introduced;
var -9..9: INT____00009 :: is_defined_var :: var_is_introduced;
var -9..9: INT____00011 :: is_defined_var :: var_is_introduced;
var 3..3: X1 = 3;
var 1..10: X10;
var 1..9: X2;
var 1..9: X3;
var 1..9: X4;
var 1..9: X5;
var 1..9: X6;
var 1..10: X7;
var 1..10: X8;
var 1..10: X9;
array [1..10] of var 1..10: Vars :: output_array([1..10]) = [3, X2, X3, X4, X5, X6, X7, X8, X9, X10];
constraint all_different_int(Vars);
constraint int_abs(INT____00001, 3);
constraint int_abs(INT____00003, X2);
constraint int_abs(INT____00005, X3);
constraint int_abs(INT____00007, X4);
constraint int_abs(INT____00009, X5);
constraint int_abs(INT____00011, X6);
constraint int_lin_eq([-1, -1, 1], [INT____00011, X10, X9], 0) :: defines_var(INT____00011);
constraint int_plus(INT____00001, X3, X2) :: defines_var(INT____00001);
constraint int_plus(INT____00003, X5, X4) :: defines_var(INT____00003);
constraint int_plus(INT____00005, X6, X5) :: defines_var(INT____00005);
constraint int_plus(INT____00007, X8, X7) :: defines_var(INT____00007);
constraint int_plus(INT____00009, X9, X8) :: defines_var(INT____00009);
solve  :: int_search(Vars, first_fail, indomain, complete) satisfy;
