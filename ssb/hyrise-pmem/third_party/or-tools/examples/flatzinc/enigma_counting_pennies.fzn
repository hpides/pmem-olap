predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..96] of int: perms = [1, 2, 3, 4, 1, 2, 4, 3, 1, 3, 2, 4, 1, 3, 4, 2, 1, 4, 3, 2, 1, 4, 2, 3, 2, 1, 3, 4, 2, 1, 4, 3, 2, 3, 1, 4, 2, 3, 4, 1, 2, 4, 3, 1, 2, 4, 1, 3, 3, 2, 1, 4, 3, 2, 4, 1, 3, 1, 2, 4, 3, 1, 4, 2, 3, 4, 1, 2, 3, 4, 2, 1, 4, 2, 3, 1, 4, 2, 1, 3, 4, 3, 2, 1, 4, 3, 1, 2, 4, 1, 3, 2, 4, 1, 2, 3];
var bool: BOOL____00001 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00002 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00003 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00004 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00005 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00006 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00007 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00008 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00009 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00010 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00011 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00012 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00013 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00014 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00015 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00016 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00017 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00018 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00019 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00020 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00021 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00022 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00023 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00024 :: is_defined_var :: var_is_introduced;
var 100000..999999: INT____00026 :: is_defined_var :: var_is_introduced;
array [1..4] of var 0..9: digits :: output_array([1..4]);
var 100000..999999: digits_sum :: output_var = INT____00026;
array [1..6] of var 0..9: digits_sum_a :: output_array([1..6]);
var 0..9: X____00028 = digits_sum_a[5];
var 0..9: X____00027 = digits_sum_a[4];
array [1..24] of var 1000..9999: x :: output_array([1..24]);
constraint all_different_int(digits);
constraint array_bool_or([BOOL____00024, BOOL____00023, BOOL____00022, BOOL____00021, BOOL____00020, BOOL____00019, BOOL____00018, BOOL____00017, BOOL____00016, BOOL____00015, BOOL____00014, BOOL____00013, BOOL____00012, BOOL____00011, BOOL____00010, BOOL____00009, BOOL____00008, BOOL____00007, BOOL____00006, BOOL____00005, BOOL____00004, BOOL____00003, BOOL____00002, BOOL____00001], true);
constraint int_eq(digits_sum_a[1], 1);
constraint int_eq(digits_sum_a[2], 2);
constraint int_eq(digits_sum_a[3], 2);
constraint int_eq(digits_sum_a[6], 0);
constraint int_le(digits[1], digits[2]);
constraint int_le(digits[2], digits[3]);
constraint int_le(digits[3], digits[4]);
constraint int_lin_eq([-1000, -100, -10, -1, 1], [digits[1], digits[2], digits[3], digits[4], x[1]], 0);
constraint int_lin_eq([-1000, -100, -1, -10, 1], [digits[1], digits[2], digits[3], digits[4], x[2]], 0);
constraint int_lin_eq([-1000, -10, -100, -1, 1], [digits[1], digits[2], digits[3], digits[4], x[3]], 0);
constraint int_lin_eq([-1000, -10, -1, -100, 1], [digits[1], digits[2], digits[3], digits[4], x[6]], 0);
constraint int_lin_eq([-1000, -1, -100, -10, 1], [digits[1], digits[2], digits[3], digits[4], x[4]], 0);
constraint int_lin_eq([-1000, -1, -10, -100, 1], [digits[1], digits[2], digits[3], digits[4], x[5]], 0);
constraint int_lin_eq([-100, -1000, -10, -1, 1], [digits[1], digits[2], digits[3], digits[4], x[7]], 0);
constraint int_lin_eq([-100, -1000, -1, -10, 1], [digits[1], digits[2], digits[3], digits[4], x[8]], 0);
constraint int_lin_eq([-100, -10, -1000, -1, 1], [digits[1], digits[2], digits[3], digits[4], x[15]], 0);
constraint int_lin_eq([-100, -10, -1, -1000, 1], [digits[1], digits[2], digits[3], digits[4], x[24]], 0);
constraint int_lin_eq([-100, -1, -1000, -10, 1], [digits[1], digits[2], digits[3], digits[4], x[16]], 0);
constraint int_lin_eq([-100, -1, -10, -1000, 1], [digits[1], digits[2], digits[3], digits[4], x[23]], 0);
constraint int_lin_eq([-10, -1000, -100, -1, 1], [digits[1], digits[2], digits[3], digits[4], x[9]], 0);
constraint int_lin_eq([-10, -1000, -1, -100, 1], [digits[1], digits[2], digits[3], digits[4], x[12]], 0);
constraint int_lin_eq([-10, -100, -1000, -1, 1], [digits[1], digits[2], digits[3], digits[4], x[13]], 0);
constraint int_lin_eq([-10, -100, -1, -1000, 1], [digits[1], digits[2], digits[3], digits[4], x[20]], 0);
constraint int_lin_eq([-10, -1, -1000, -100, 1], [digits[1], digits[2], digits[3], digits[4], x[17]], 0);
constraint int_lin_eq([-10, -1, -100, -1000, 1], [digits[1], digits[2], digits[3], digits[4], x[22]], 0);
constraint int_lin_eq([-1, -1000, -100, -10, 1], [digits[1], digits[2], digits[3], digits[4], x[10]], 0);
constraint int_lin_eq([-1, -1000, -10, -100, 1], [digits[1], digits[2], digits[3], digits[4], x[11]], 0);
constraint int_lin_eq([-1, -100, -1000, -10, 1], [digits[1], digits[2], digits[3], digits[4], x[14]], 0);
constraint int_lin_eq([-1, -100, -10, -1000, 1], [digits[1], digits[2], digits[3], digits[4], x[19]], 0);
constraint int_lin_eq([-1, -10, -1000, -100, 1], [digits[1], digits[2], digits[3], digits[4], x[18]], 0);
constraint int_lin_eq([-1, -10, -100, -1000, 1], [digits[1], digits[2], digits[3], digits[4], x[21]], 0);
constraint int_lin_eq([-1, 100000, 10000, 1000, 100, 10, 1], [INT____00026, digits_sum_a[1], digits_sum_a[2], digits_sum_a[3], digits_sum_a[4], digits_sum_a[5], digits_sum_a[6]], 0) :: defines_var(INT____00026);
constraint int_lin_eq_reif([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [digits_sum, x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10], x[11], x[12], x[13], x[14], x[15], x[16], x[17], x[18], x[19], x[20], x[21], x[22], x[23]], 0, BOOL____00024) :: defines_var(BOOL____00024);
constraint int_lin_eq_reif([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [digits_sum, x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10], x[11], x[12], x[13], x[14], x[15], x[16], x[17], x[18], x[19], x[20], x[21], x[22], x[24]], 0, BOOL____00023) :: defines_var(BOOL____00023);
constraint int_lin_eq_reif([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [digits_sum, x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10], x[11], x[12], x[13], x[14], x[15], x[16], x[17], x[18], x[19], x[20], x[21], x[23], x[24]], 0, BOOL____00022) :: defines_var(BOOL____00022);
constraint int_lin_eq_reif([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [digits_sum, x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10], x[11], x[12], x[13], x[14], x[15], x[16], x[17], x[18], x[19], x[20], x[22], x[23], x[24]], 0, BOOL____00021) :: defines_var(BOOL____00021);
constraint int_lin_eq_reif([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [digits_sum, x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10], x[11], x[12], x[13], x[14], x[15], x[16], x[17], x[18], x[19], x[21], x[22], x[23], x[24]], 0, BOOL____00020) :: defines_var(BOOL____00020);
constraint int_lin_eq_reif([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [digits_sum, x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10], x[11], x[12], x[13], x[14], x[15], x[16], x[17], x[18], x[20], x[21], x[22], x[23], x[24]], 0, BOOL____00019) :: defines_var(BOOL____00019);
constraint int_lin_eq_reif([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [digits_sum, x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10], x[11], x[12], x[13], x[14], x[15], x[16], x[17], x[19], x[20], x[21], x[22], x[23], x[24]], 0, BOOL____00018) :: defines_var(BOOL____00018);
constraint int_lin_eq_reif([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [digits_sum, x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10], x[11], x[12], x[13], x[14], x[15], x[16], x[18], x[19], x[20], x[21], x[22], x[23], x[24]], 0, BOOL____00017) :: defines_var(BOOL____00017);
constraint int_lin_eq_reif([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [digits_sum, x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10], x[11], x[12], x[13], x[14], x[15], x[17], x[18], x[19], x[20], x[21], x[22], x[23], x[24]], 0, BOOL____00016) :: defines_var(BOOL____00016);
constraint int_lin_eq_reif([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [digits_sum, x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10], x[11], x[12], x[13], x[14], x[16], x[17], x[18], x[19], x[20], x[21], x[22], x[23], x[24]], 0, BOOL____00015) :: defines_var(BOOL____00015);
constraint int_lin_eq_reif([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [digits_sum, x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10], x[11], x[12], x[13], x[15], x[16], x[17], x[18], x[19], x[20], x[21], x[22], x[23], x[24]], 0, BOOL____00014) :: defines_var(BOOL____00014);
constraint int_lin_eq_reif([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [digits_sum, x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10], x[11], x[12], x[14], x[15], x[16], x[17], x[18], x[19], x[20], x[21], x[22], x[23], x[24]], 0, BOOL____00013) :: defines_var(BOOL____00013);
constraint int_lin_eq_reif([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [digits_sum, x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10], x[11], x[13], x[14], x[15], x[16], x[17], x[18], x[19], x[20], x[21], x[22], x[23], x[24]], 0, BOOL____00012) :: defines_var(BOOL____00012);
constraint int_lin_eq_reif([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [digits_sum, x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10], x[12], x[13], x[14], x[15], x[16], x[17], x[18], x[19], x[20], x[21], x[22], x[23], x[24]], 0, BOOL____00011) :: defines_var(BOOL____00011);
constraint int_lin_eq_reif([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [digits_sum, x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[11], x[12], x[13], x[14], x[15], x[16], x[17], x[18], x[19], x[20], x[21], x[22], x[23], x[24]], 0, BOOL____00010) :: defines_var(BOOL____00010);
constraint int_lin_eq_reif([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [digits_sum, x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[10], x[11], x[12], x[13], x[14], x[15], x[16], x[17], x[18], x[19], x[20], x[21], x[22], x[23], x[24]], 0, BOOL____00009) :: defines_var(BOOL____00009);
constraint int_lin_eq_reif([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [digits_sum, x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[9], x[10], x[11], x[12], x[13], x[14], x[15], x[16], x[17], x[18], x[19], x[20], x[21], x[22], x[23], x[24]], 0, BOOL____00008) :: defines_var(BOOL____00008);
constraint int_lin_eq_reif([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [digits_sum, x[1], x[2], x[3], x[4], x[5], x[6], x[8], x[9], x[10], x[11], x[12], x[13], x[14], x[15], x[16], x[17], x[18], x[19], x[20], x[21], x[22], x[23], x[24]], 0, BOOL____00007) :: defines_var(BOOL____00007);
constraint int_lin_eq_reif([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [digits_sum, x[1], x[2], x[3], x[4], x[5], x[7], x[8], x[9], x[10], x[11], x[12], x[13], x[14], x[15], x[16], x[17], x[18], x[19], x[20], x[21], x[22], x[23], x[24]], 0, BOOL____00006) :: defines_var(BOOL____00006);
constraint int_lin_eq_reif([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [digits_sum, x[1], x[2], x[3], x[4], x[6], x[7], x[8], x[9], x[10], x[11], x[12], x[13], x[14], x[15], x[16], x[17], x[18], x[19], x[20], x[21], x[22], x[23], x[24]], 0, BOOL____00005) :: defines_var(BOOL____00005);
constraint int_lin_eq_reif([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [digits_sum, x[1], x[2], x[3], x[5], x[6], x[7], x[8], x[9], x[10], x[11], x[12], x[13], x[14], x[15], x[16], x[17], x[18], x[19], x[20], x[21], x[22], x[23], x[24]], 0, BOOL____00004) :: defines_var(BOOL____00004);
constraint int_lin_eq_reif([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [digits_sum, x[1], x[2], x[4], x[5], x[6], x[7], x[8], x[9], x[10], x[11], x[12], x[13], x[14], x[15], x[16], x[17], x[18], x[19], x[20], x[21], x[22], x[23], x[24]], 0, BOOL____00003) :: defines_var(BOOL____00003);
constraint int_lin_eq_reif([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [digits_sum, x[1], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10], x[11], x[12], x[13], x[14], x[15], x[16], x[17], x[18], x[19], x[20], x[21], x[22], x[23], x[24]], 0, BOOL____00002) :: defines_var(BOOL____00002);
constraint int_lin_eq_reif([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [digits_sum, x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10], x[11], x[12], x[13], x[14], x[15], x[16], x[17], x[18], x[19], x[20], x[21], x[22], x[23], x[24]], 0, BOOL____00001) :: defines_var(BOOL____00001);
constraint int_lt(0, digits[1]);
solve  :: int_search([x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10], x[11], x[12], x[13], x[14], x[15], x[16], x[17], x[18], x[19], x[20], x[21], x[22], x[23], x[24], digits[1], digits[2], digits[3], digits[4], digits_sum_a[1], digits_sum_a[2], digits_sum_a[3], digits_sum_a[4], digits_sum_a[5], digits_sum_a[6], INT____00026], first_fail, indomain_min, complete) satisfy;
