predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var 0..9: A :: output_var;
var 0..9: B :: output_var;
var 0..9: C :: output_var;
var 0..9: D :: output_var;
var 0..9: E :: output_var;
var 0..9: F :: output_var;
var 0..9: G :: output_var;
var 0..9: H :: output_var;
var 0..9: I :: output_var;
var 1..99999: INT____00003 :: is_defined_var :: var_is_introduced;
var 0..9: J :: output_var;
array [1..10] of var 0..9: FD :: output_array([1..10]) = [A, B, C, D, E, F, G, H, I, J];
var 0..99999: X;
var 0..99999: Y;
var -99999..99999: difference :: output_var = INT____00003;
constraint all_different_int(FD);
constraint int_lin_eq([-1, 10000, 1000, 100, 10, 1], [X, A, B, C, D, E], 0);
constraint int_lin_eq([-1, 10000, 1000, 100, 10, 1], [Y, F, G, H, I, J], 0);
constraint int_plus(INT____00003, Y, X) :: defines_var(INT____00003);
solve  :: int_search(FD, first_fail, indomain, complete) minimize INT____00003;
