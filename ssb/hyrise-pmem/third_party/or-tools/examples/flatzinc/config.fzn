array [1..8] of int: car = [20, 10, 40, 4, 50, 2, 75, 1];
array [1..3] of int: connData = [0, 8, 16];
array [1..9] of int: model = [0, 0, 0, 150, 8, 150, 200, 16, 200];
array [1..3] of int: powerData = [0, 150, 200];
array [1..3] of int: priceData = [0, 150, 200];
var 1..3: INT____00001 :: is_defined_var :: var_is_introduced;
var 0..200: INT____00002 :: is_defined_var :: var_is_introduced;
var 1..3: INT____00003 :: is_defined_var :: var_is_introduced;
var 0..200: INT____00004 :: is_defined_var :: var_is_introduced;
var 1..3: INT____00005 :: is_defined_var :: var_is_introduced;
var 0..200: INT____00006 :: is_defined_var :: var_is_introduced;
var 1..3: INT____00007 :: is_defined_var :: var_is_introduced;
var 0..200: INT____00008 :: is_defined_var :: var_is_introduced;
var 1..3: INT____00009 :: is_defined_var :: var_is_introduced;
var 0..200: INT____00010 :: is_defined_var :: var_is_introduced;
var 0..16: INT____00011 :: is_defined_var :: var_is_introduced;
var 0..16: INT____00012 :: is_defined_var :: var_is_introduced;
var 0..16: INT____00013 :: is_defined_var :: var_is_introduced;
var 0..16: INT____00014 :: is_defined_var :: var_is_introduced;
var 0..16: INT____00015 :: is_defined_var :: var_is_introduced;
var 0..200: INT____00016 :: is_defined_var :: var_is_introduced;
var 0..200: INT____00017 :: is_defined_var :: var_is_introduced;
var 0..200: INT____00018 :: is_defined_var :: var_is_introduced;
var 0..200: INT____00019 :: is_defined_var :: var_is_introduced;
var 0..200: INT____00020 :: is_defined_var :: var_is_introduced;
var 0..800: INT____00021 :: is_defined_var :: var_is_introduced;
var 0..800: cost :: output_var = INT____00021;
array [1..20] of var 0..4: counters;
array [1..5] of var 0..2: rack :: output_array([0..4]);
constraint array_int_element(INT____00001, connData, INT____00011) :: defines_var(INT____00011);
constraint array_int_element(INT____00001, powerData, INT____00002) :: defines_var(INT____00002);
constraint array_int_element(INT____00001, priceData, INT____00016) :: defines_var(INT____00016);
constraint array_int_element(INT____00003, connData, INT____00012) :: defines_var(INT____00012);
constraint array_int_element(INT____00003, powerData, INT____00004) :: defines_var(INT____00004);
constraint array_int_element(INT____00003, priceData, INT____00017) :: defines_var(INT____00017);
constraint array_int_element(INT____00005, connData, INT____00013) :: defines_var(INT____00013);
constraint array_int_element(INT____00005, powerData, INT____00006) :: defines_var(INT____00006);
constraint array_int_element(INT____00005, priceData, INT____00018) :: defines_var(INT____00018);
constraint array_int_element(INT____00007, connData, INT____00014) :: defines_var(INT____00014);
constraint array_int_element(INT____00007, powerData, INT____00008) :: defines_var(INT____00008);
constraint array_int_element(INT____00007, priceData, INT____00019) :: defines_var(INT____00019);
constraint array_int_element(INT____00009, connData, INT____00015) :: defines_var(INT____00015);
constraint array_int_element(INT____00009, powerData, INT____00010) :: defines_var(INT____00010);
constraint array_int_element(INT____00009, priceData, INT____00020) :: defines_var(INT____00020);
constraint int_lin_eq([-1, 1], [INT____00001, rack[1]], -1) :: defines_var(INT____00001) :: domain;
constraint int_lin_eq([-1, 1], [INT____00003, rack[2]], -1) :: defines_var(INT____00003) :: domain;
constraint int_lin_eq([-1, 1], [INT____00005, rack[3]], -1) :: defines_var(INT____00005) :: domain;
constraint int_lin_eq([-1, 1], [INT____00007, rack[4]], -1) :: defines_var(INT____00007) :: domain;
constraint int_lin_eq([-1, 1], [INT____00009, rack[5]], -1) :: defines_var(INT____00009) :: domain;
constraint int_lin_eq([-1, -1, -1, -1, -1], [counters[1], counters[5], counters[9], counters[13], counters[17]], -10);
constraint int_lin_eq([-1, -1, -1, -1, -1], [counters[2], counters[6], counters[10], counters[14], counters[18]], -4);
constraint int_lin_eq([-1, -1, -1, -1, -1], [counters[3], counters[7], counters[11], counters[15], counters[19]], -2);
constraint int_lin_eq([-1, -1, -1, -1, -1], [counters[4], counters[8], counters[12], counters[16], counters[20]], -1);
constraint int_lin_eq([-1, 1, 1, 1, 1, 1], [INT____00021, INT____00016, INT____00017, INT____00018, INT____00019, INT____00020], 0) :: defines_var(INT____00021);
constraint int_lin_le([-1, 1, 1, 1, 1], [INT____00011, counters[1], counters[2], counters[3], counters[4]], 0);
constraint int_lin_le([-1, 1, 1, 1, 1], [INT____00012, counters[5], counters[6], counters[7], counters[8]], 0);
constraint int_lin_le([-1, 1, 1, 1, 1], [INT____00013, counters[9], counters[10], counters[11], counters[12]], 0);
constraint int_lin_le([-1, 1, 1, 1, 1], [INT____00014, counters[13], counters[14], counters[15], counters[16]], 0);
constraint int_lin_le([-1, 1, 1, 1, 1], [INT____00015, counters[17], counters[18], counters[19], counters[20]], 0);
constraint int_lin_le([-1, 20, 40, 50, 75], [INT____00002, counters[1], counters[2], counters[3], counters[4]], 0);
constraint int_lin_le([-1, 20, 40, 50, 75], [INT____00004, counters[5], counters[6], counters[7], counters[8]], 0);
constraint int_lin_le([-1, 20, 40, 50, 75], [INT____00006, counters[9], counters[10], counters[11], counters[12]], 0);
constraint int_lin_le([-1, 20, 40, 50, 75], [INT____00008, counters[13], counters[14], counters[15], counters[16]], 0);
constraint int_lin_le([-1, 20, 40, 50, 75], [INT____00010, counters[17], counters[18], counters[19], counters[20]], 0);
solve minimize INT____00021;
