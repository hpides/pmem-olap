predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..4] of int: t = [1, 3, 6, 10];
var bool: BOOL____00002 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00003 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00006 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00007 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00009 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00012 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00018 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00020 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00026 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00028 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00034 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00036 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00042 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00044 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00050 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00052 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00058 :: is_defined_var :: var_is_introduced;
var 1..10: INT____00011 :: is_defined_var :: var_is_introduced;
var 2..11: INT____00013 :: is_defined_var :: var_is_introduced;
var 1..10: INT____00014 :: is_defined_var :: var_is_introduced;
var 1..10: INT____00015 :: is_defined_var :: var_is_introduced;
var -9..9: INT____00016 :: is_defined_var :: var_is_introduced;
var 0..9: INT____00017 :: is_defined_var :: var_is_introduced;
var 1..10: INT____00019 :: is_defined_var :: var_is_introduced;
var 2..11: INT____00021 :: is_defined_var :: var_is_introduced;
var 1..10: INT____00022 :: is_defined_var :: var_is_introduced;
var 1..10: INT____00023 :: is_defined_var :: var_is_introduced;
var -9..9: INT____00024 :: is_defined_var :: var_is_introduced;
var 0..9: INT____00025 :: is_defined_var :: var_is_introduced;
var 1..10: INT____00027 :: is_defined_var :: var_is_introduced;
var 2..11: INT____00029 :: is_defined_var :: var_is_introduced;
var 1..10: INT____00030 :: is_defined_var :: var_is_introduced;
var 1..10: INT____00031 :: is_defined_var :: var_is_introduced;
var -9..9: INT____00032 :: is_defined_var :: var_is_introduced;
var 0..9: INT____00033 :: is_defined_var :: var_is_introduced;
var 1..10: INT____00035 :: is_defined_var :: var_is_introduced;
var 2..11: INT____00037 :: is_defined_var :: var_is_introduced;
var 1..10: INT____00038 :: is_defined_var :: var_is_introduced;
var 1..10: INT____00039 :: is_defined_var :: var_is_introduced;
var -9..9: INT____00040 :: is_defined_var :: var_is_introduced;
var 0..9: INT____00041 :: is_defined_var :: var_is_introduced;
var 1..10: INT____00043 :: is_defined_var :: var_is_introduced;
var 2..11: INT____00045 :: is_defined_var :: var_is_introduced;
var 1..10: INT____00046 :: is_defined_var :: var_is_introduced;
var 1..10: INT____00047 :: is_defined_var :: var_is_introduced;
var -9..9: INT____00048 :: is_defined_var :: var_is_introduced;
var 0..9: INT____00049 :: is_defined_var :: var_is_introduced;
var 1..10: INT____00051 :: is_defined_var :: var_is_introduced;
var 2..11: INT____00053 :: is_defined_var :: var_is_introduced;
var 1..10: INT____00054 :: is_defined_var :: var_is_introduced;
var 1..10: INT____00055 :: is_defined_var :: var_is_introduced;
var -9..9: INT____00056 :: is_defined_var :: var_is_introduced;
var 0..9: INT____00057 :: is_defined_var :: var_is_introduced;
array [1..6] of var 1..10: subs;
array [1..10] of var 1..10: x :: output_array([1..10]);
constraint all_different_int(x);
constraint array_bool_and([BOOL____00018, BOOL____00012, BOOL____00012], true);
constraint array_bool_and([BOOL____00026, BOOL____00020, BOOL____00020], true);
constraint array_bool_and([BOOL____00034, BOOL____00028, BOOL____00028], true);
constraint array_bool_and([BOOL____00042, BOOL____00036, BOOL____00036], true);
constraint array_bool_and([BOOL____00050, BOOL____00044, BOOL____00044], true);
constraint array_bool_and([BOOL____00058, BOOL____00052, BOOL____00052], true);
constraint array_var_int_element(INT____00014, x, INT____00015) :: defines_var(INT____00015);
constraint array_var_int_element(INT____00022, x, INT____00023) :: defines_var(INT____00023);
constraint array_var_int_element(INT____00030, x, INT____00031) :: defines_var(INT____00031);
constraint array_var_int_element(INT____00038, x, INT____00039) :: defines_var(INT____00039);
constraint array_var_int_element(INT____00046, x, INT____00047) :: defines_var(INT____00047);
constraint array_var_int_element(INT____00054, x, INT____00055) :: defines_var(INT____00055);
constraint array_var_int_element(subs[1], x, INT____00011) :: defines_var(INT____00011);
constraint array_var_int_element(subs[2], x, INT____00019) :: defines_var(INT____00019);
constraint array_var_int_element(subs[3], x, INT____00027) :: defines_var(INT____00027);
constraint array_var_int_element(subs[4], x, INT____00035) :: defines_var(INT____00035);
constraint array_var_int_element(subs[5], x, INT____00043) :: defines_var(INT____00043);
constraint array_var_int_element(subs[6], x, INT____00051) :: defines_var(INT____00051);
constraint int_abs(INT____00016, INT____00017) :: defines_var(INT____00017);
constraint int_abs(INT____00024, INT____00025) :: defines_var(INT____00025);
constraint int_abs(INT____00032, INT____00033) :: defines_var(INT____00033);
constraint int_abs(INT____00040, INT____00041) :: defines_var(INT____00041);
constraint int_abs(INT____00048, INT____00049) :: defines_var(INT____00049);
constraint int_abs(INT____00056, INT____00057) :: defines_var(INT____00057);
constraint int_eq(subs[1], 2);
constraint int_eq_reif(INT____00013, INT____00014, BOOL____00012);
constraint int_eq_reif(INT____00021, INT____00022, BOOL____00020);
constraint int_eq_reif(INT____00029, INT____00030, BOOL____00028);
constraint int_eq_reif(INT____00037, INT____00038, BOOL____00036);
constraint int_eq_reif(INT____00045, INT____00046, BOOL____00044);
constraint int_eq_reif(INT____00053, INT____00054, BOOL____00052);
constraint int_eq_reif(x[1], INT____00017, BOOL____00018) :: defines_var(BOOL____00018);
constraint int_eq_reif(x[2], INT____00025, BOOL____00026) :: defines_var(BOOL____00026);
constraint int_eq_reif(x[3], INT____00033, BOOL____00034) :: defines_var(BOOL____00034);
constraint int_eq_reif(x[4], INT____00041, BOOL____00042) :: defines_var(BOOL____00042);
constraint int_eq_reif(x[5], INT____00049, BOOL____00050) :: defines_var(BOOL____00050);
constraint int_eq_reif(x[6], INT____00057, BOOL____00058) :: defines_var(BOOL____00058);
constraint int_lin_eq([-1, 1], [INT____00013, subs[1]], -1) :: defines_var(INT____00013) :: domain;
constraint int_lin_eq([-1, 1], [INT____00021, subs[2]], -1) :: defines_var(INT____00021) :: domain;
constraint int_lin_eq([-1, 1], [INT____00029, subs[3]], -1) :: defines_var(INT____00029) :: domain;
constraint int_lin_eq([-1, 1], [INT____00037, subs[4]], -1) :: defines_var(INT____00037) :: domain;
constraint int_lin_eq([-1, 1], [INT____00045, subs[5]], -1) :: defines_var(INT____00045) :: domain;
constraint int_lin_eq([-1, 1], [INT____00053, subs[6]], -1) :: defines_var(INT____00053) :: domain;
constraint int_lin_eq_reif([-1, 1], [subs[1], subs[2]], 1, BOOL____00002) :: defines_var(BOOL____00002);
constraint int_lin_eq_reif([-1, 1], [subs[1], subs[2]], 2, true);
constraint int_lin_eq_reif([-1, 1], [subs[2], subs[3]], 1, true);
constraint int_lin_eq_reif([-1, 1], [subs[2], subs[3]], 2, BOOL____00003) :: defines_var(BOOL____00003);
constraint int_lin_eq_reif([-1, 1], [subs[3], subs[4]], 1, BOOL____00006) :: defines_var(BOOL____00006);
constraint int_lin_eq_reif([-1, 1], [subs[3], subs[4]], 2, true);
constraint int_lin_eq_reif([-1, 1], [subs[4], subs[5]], 1, true);
constraint int_lin_eq_reif([-1, 1], [subs[4], subs[5]], 2, BOOL____00007) :: defines_var(BOOL____00007);
constraint int_lin_eq_reif([-1, 1], [subs[5], subs[6]], 1, true);
constraint int_lin_eq_reif([-1, 1], [subs[5], subs[6]], 2, BOOL____00009) :: defines_var(BOOL____00009);
constraint int_lin_le_reif([1], [subs[1]], 9, BOOL____00012) :: defines_var(BOOL____00012);
constraint int_lin_le_reif([1], [subs[2]], 9, BOOL____00020) :: defines_var(BOOL____00020);
constraint int_lin_le_reif([1], [subs[3]], 9, BOOL____00028) :: defines_var(BOOL____00028);
constraint int_lin_le_reif([1], [subs[4]], 9, BOOL____00036) :: defines_var(BOOL____00036);
constraint int_lin_le_reif([1], [subs[5]], 9, BOOL____00044) :: defines_var(BOOL____00044);
constraint int_lin_le_reif([1], [subs[6]], 9, BOOL____00052) :: defines_var(BOOL____00052);
constraint int_plus(INT____00016, INT____00015, INT____00011) :: defines_var(INT____00016);
constraint int_plus(INT____00024, INT____00023, INT____00019) :: defines_var(INT____00024);
constraint int_plus(INT____00032, INT____00031, INT____00027) :: defines_var(INT____00032);
constraint int_plus(INT____00040, INT____00039, INT____00035) :: defines_var(INT____00040);
constraint int_plus(INT____00048, INT____00047, INT____00043) :: defines_var(INT____00048);
constraint int_plus(INT____00056, INT____00055, INT____00051) :: defines_var(INT____00056);
solve  :: int_search([x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10], subs[1], subs[2], subs[3], subs[4], subs[5], subs[6]], first_fail, indomain_split, complete) satisfy;
