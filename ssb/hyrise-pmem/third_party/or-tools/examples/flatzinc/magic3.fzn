predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var 1..9: X1;
var 1..9: X2;
var 1..9: X3;
var 1..9: X4;
var 1..9: X5;
var 1..9: X6;
var 1..9: X7;
var 1..9: X8;
var 1..9: X9;
array [1..9] of var 1..9: Vars :: output_array([1..9]) = [X1, X2, X3, X4, X5, X6, X7, X8, X9];
constraint all_different_int(Vars);
constraint int_lin_eq([1, 1, 1], [X1, X2, X3], 15);
constraint int_lin_eq([1, 1, 1], [X1, X4, X7], 15);
constraint int_lin_eq([1, 1, 1], [X1, X5, X9], 15);
constraint int_lin_eq([1, 1, 1], [X2, X5, X8], 15);
constraint int_lin_eq([1, 1, 1], [X3, X5, X7], 15);
constraint int_lin_eq([1, 1, 1], [X3, X6, X9], 15);
constraint int_lin_eq([1, 1, 1], [X4, X5, X6], 15);
constraint int_lin_eq([1, 1, 1], [X7, X8, X9], 15);
solve  :: int_search(Vars, first_fail, indomain, complete) satisfy;
