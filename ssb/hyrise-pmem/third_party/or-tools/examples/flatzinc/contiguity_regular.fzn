predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..6] of int: transition_fn = [1, 2, 3, 2, 3, 0];
var 1..6: INT____00002 :: is_defined_var :: var_is_introduced;
var 1..6: INT____00004 :: is_defined_var :: var_is_introduced;
var 1..6: INT____00006 :: is_defined_var :: var_is_introduced;
var 1..6: INT____00008 :: is_defined_var :: var_is_introduced;
var 1..6: INT____00010 :: is_defined_var :: var_is_introduced;
var 1..6: INT____00012 :: is_defined_var :: var_is_introduced;
var 1..6: INT____00014 :: is_defined_var :: var_is_introduced;
array [1..8] of var 1..3: a____00001;
array [1..7] of var 1..2: reg_input :: output_array([1..7]);
array [1..7] of var 0..1: x :: output_array([1..7]);
constraint array_int_element(INT____00002, transition_fn, a____00001[2]);
constraint array_int_element(INT____00004, transition_fn, a____00001[3]);
constraint array_int_element(INT____00006, transition_fn, a____00001[4]);
constraint array_int_element(INT____00008, transition_fn, a____00001[5]);
constraint array_int_element(INT____00010, transition_fn, a____00001[6]);
constraint array_int_element(INT____00012, transition_fn, a____00001[7]);
constraint array_int_element(INT____00014, transition_fn, a____00001[8]);
constraint int_eq(a____00001[1], 1);
constraint int_lin_eq([-1, 1], [reg_input[1], x[1]], -1);
constraint int_lin_eq([-1, 1], [reg_input[2], x[2]], -1);
constraint int_lin_eq([-1, 1], [reg_input[3], x[3]], -1);
constraint int_lin_eq([-1, 1], [reg_input[4], x[4]], -1);
constraint int_lin_eq([-1, 1], [reg_input[5], x[5]], -1);
constraint int_lin_eq([-1, 1], [reg_input[6], x[6]], -1);
constraint int_lin_eq([-1, 1], [reg_input[7], x[7]], -1);
constraint int_lin_eq([-1, 2, 1], [INT____00002, a____00001[1], reg_input[1]], 2) :: defines_var(INT____00002) :: domain;
constraint int_lin_eq([-1, 2, 1], [INT____00004, a____00001[2], reg_input[2]], 2) :: defines_var(INT____00004) :: domain;
constraint int_lin_eq([-1, 2, 1], [INT____00006, a____00001[3], reg_input[3]], 2) :: defines_var(INT____00006) :: domain;
constraint int_lin_eq([-1, 2, 1], [INT____00008, a____00001[4], reg_input[4]], 2) :: defines_var(INT____00008) :: domain;
constraint int_lin_eq([-1, 2, 1], [INT____00010, a____00001[5], reg_input[5]], 2) :: defines_var(INT____00010) :: domain;
constraint int_lin_eq([-1, 2, 1], [INT____00012, a____00001[6], reg_input[6]], 2) :: defines_var(INT____00012) :: domain;
constraint int_lin_eq([-1, 2, 1], [INT____00014, a____00001[7], reg_input[7]], 2) :: defines_var(INT____00014) :: domain;
solve satisfy;
