predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..5] of var 7..11: talkn :: output_array([1..5]);
array [1..5] of var 7..11: talkp :: output_array([1..5]);
constraint all_different_int(talkn);
constraint all_different_int(talkp);
constraint int_eq(talkn[3], 8);
constraint int_eq(talkp[1], 9);
constraint int_eq(talkp[2], talkn[2]);
constraint int_le(9, talkp[4]);
constraint int_le(talkp[2], 9);
constraint int_lin_le([-1, 1], [talkn[4], talkp[3]], -1);
constraint int_lin_le([1, -1], [talkn[5], talkp[3]], -1);
constraint int_ne(talkp[3], talkn[3]);
constraint int_ne(talkp[4], talkn[1]);
solve satisfy;
