predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..7] of int: Ds = [16, 6, 13, 7, 5, 18, 4];
array [1..7] of int: Rs = [2, 9, 3, 7, 10, 1, 11];
var 13..13: Capacity :: output_var = 13;
var 19..50: End :: output_var;
array [1..7] of var 1..30: Ss :: output_array([1..7]);
constraint int_lin_le([-1, 1], [End, Ss[1]], -16);
constraint int_lin_le([-1, 1], [End, Ss[2]], -6);
constraint int_lin_le([-1, 1], [End, Ss[3]], -13);
constraint int_lin_le([-1, 1], [End, Ss[4]], -7);
constraint int_lin_le([-1, 1], [End, Ss[5]], -5);
constraint int_lin_le([-1, 1], [End, Ss[6]], -18);
constraint int_lin_le([-1, 1], [End, Ss[7]], -4);
constraint var_cumulative(Ss, Ds, Rs, 13);
solve  :: int_search([Ss[1], Ss[2], Ss[3], Ss[4], Ss[5], Ss[6], Ss[7], 16, 6, 13, 7, 5, 18, 4], first_fail, indomain, complete) minimize End;
