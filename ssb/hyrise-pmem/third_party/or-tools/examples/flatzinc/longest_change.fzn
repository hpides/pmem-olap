predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var bool: BOOL____00005 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00007 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00009 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00011 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00013 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00015 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00017 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00019 :: is_defined_var :: var_is_introduced;
var 0..9: INT____00020 :: is_defined_var :: var_is_introduced;
var 0..9: INT____00021 :: is_defined_var :: var_is_introduced;
var 0..9: INT____00022 :: is_defined_var :: var_is_introduced;
var 0..9: INT____00023 :: is_defined_var :: var_is_introduced;
var 0..9: INT____00024 :: is_defined_var :: var_is_introduced;
var 0..9: INT____00025 :: is_defined_var :: var_is_introduced;
var 0..9: INT____00026 :: is_defined_var :: var_is_introduced;
var int: INT____00027 :: is_defined_var :: var_is_introduced;
var int: c :: output_var = INT____00027;
var int: cc____00003;
array [1..8] of var 0..9: cum_sum____00002;
array [1..8] of var 0..1: t____00001;
array [1..9] of var 1..8: x :: output_array([1..9]);
constraint int_eq(cum_sum____00002[1], 0);
constraint int_eq(x[1], 8);
constraint int_eq(x[2], 8);
constraint int_eq(x[3], 3);
constraint int_eq(x[4], 4);
constraint int_eq(x[5], 1);
constraint int_eq(x[6], 1);
constraint int_eq(x[7], 5);
constraint int_eq(x[8], 5);
constraint int_eq(x[9], 2);
constraint int_eq_reif(t____00001[1], 1, BOOL____00005);
constraint int_eq_reif(t____00001[2], 1, BOOL____00007);
constraint int_eq_reif(t____00001[3], 1, BOOL____00009);
constraint int_eq_reif(t____00001[4], 1, BOOL____00011);
constraint int_eq_reif(t____00001[5], 1, BOOL____00013);
constraint int_eq_reif(t____00001[6], 1, BOOL____00015);
constraint int_eq_reif(t____00001[7], 1, BOOL____00017);
constraint int_eq_reif(t____00001[8], 1, BOOL____00019);
constraint int_lin_eq([-1, 1], [INT____00027, cc____00003], -1) :: defines_var(INT____00027);
constraint int_lin_eq([-1, 1, -1], [INT____00020, cum_sum____00002[2], t____00001[2]], 0);
constraint int_lin_eq([-1, 1, -1], [INT____00021, cum_sum____00002[3], t____00001[3]], 0);
constraint int_lin_eq([-1, 1, -1], [INT____00022, cum_sum____00002[4], t____00001[4]], 0);
constraint int_lin_eq([-1, 1, -1], [INT____00023, cum_sum____00002[5], t____00001[5]], 0);
constraint int_lin_eq([-1, 1, -1], [INT____00024, cum_sum____00002[6], t____00001[6]], 0);
constraint int_lin_eq([-1, 1, -1], [INT____00025, cum_sum____00002[7], t____00001[7]], 0);
constraint int_lin_eq([-1, 1, -1], [INT____00026, cum_sum____00002[8], t____00001[8]], 0);
constraint int_ne_reif(x[1], x[2], BOOL____00005) :: defines_var(BOOL____00005);
constraint int_ne_reif(x[2], x[3], BOOL____00007) :: defines_var(BOOL____00007);
constraint int_ne_reif(x[3], x[4], BOOL____00009) :: defines_var(BOOL____00009);
constraint int_ne_reif(x[4], x[5], BOOL____00011) :: defines_var(BOOL____00011);
constraint int_ne_reif(x[5], x[6], BOOL____00013) :: defines_var(BOOL____00013);
constraint int_ne_reif(x[6], x[7], BOOL____00015) :: defines_var(BOOL____00015);
constraint int_ne_reif(x[7], x[8], BOOL____00017) :: defines_var(BOOL____00017);
constraint int_ne_reif(x[8], x[9], BOOL____00019) :: defines_var(BOOL____00019);
constraint int_times(t____00001[1], cum_sum____00002[1], INT____00020) :: defines_var(INT____00020);
constraint int_times(t____00001[2], cum_sum____00002[2], INT____00021) :: defines_var(INT____00021);
constraint int_times(t____00001[3], cum_sum____00002[3], INT____00022) :: defines_var(INT____00022);
constraint int_times(t____00001[4], cum_sum____00002[4], INT____00023) :: defines_var(INT____00023);
constraint int_times(t____00001[5], cum_sum____00002[5], INT____00024) :: defines_var(INT____00024);
constraint int_times(t____00001[6], cum_sum____00002[6], INT____00025) :: defines_var(INT____00025);
constraint int_times(t____00001[7], cum_sum____00002[7], INT____00026) :: defines_var(INT____00026);
constraint maximum_int(cc____00003, cum_sum____00002);
solve satisfy;
