predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var -4..4: INT____00001 :: is_defined_var :: var_is_introduced;
var -4..4: INT____00003 :: is_defined_var :: var_is_introduced;
var -4..4: INT____00005 :: is_defined_var :: var_is_introduced;
var -4..4: INT____00007 :: is_defined_var :: var_is_introduced;
array [1..5] of var 1..5: a :: output_array([1..5]);
array [1..5] of var 1..5: c :: output_array([1..5]);
array [1..5] of var 1..5: d :: output_array([1..5]);
array [1..5] of var 1..5: k :: output_array([1..5]);
array [1..5] of var 1..5: s :: output_array([1..5]);
constraint all_different_int(a);
constraint all_different_int(c);
constraint all_different_int(d);
constraint all_different_int(k);
constraint all_different_int(s);
constraint int_abs(INT____00001, 1);
constraint int_abs(INT____00003, 1);
constraint int_abs(INT____00005, 1);
constraint int_abs(INT____00007, 1);
constraint int_eq(c[2], d[2]);
constraint int_eq(c[4], k[2]);
constraint int_eq(d[3], 3);
constraint int_eq(k[1], a[3]);
constraint int_eq(k[4], d[4]);
constraint int_eq(s[1], c[1]);
constraint int_eq(s[2], a[1]);
constraint int_eq(s[3], d[1]);
constraint int_eq(s[4], 1);
constraint int_eq(s[5], k[5]);
constraint int_lin_eq([1, -1], [c[2], c[3]], -1);
constraint int_lin_eq([-1, -1, 1], [INT____00001, a[4], k[3]], 0) :: defines_var(INT____00001);
constraint int_lin_eq([-1, -1, 1], [INT____00005, c[5], s[4]], 0) :: defines_var(INT____00005);
constraint int_lin_eq([-1, -1, 1], [INT____00007, d[5], k[3]], 0) :: defines_var(INT____00007);
constraint int_plus(INT____00003, k[2], a[5]) :: defines_var(INT____00003);
solve satisfy;
