predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var 0..9: A;
var 0..9: B;
var 1..9: D;
var 0..9: E;
var 1..9: G;
var 0..9: L;
var 0..9: N;
var 0..9: O;
var 1..9: R;
var 0..9: T;
array [1..10] of var 0..9: FD :: output_array([1..10]) = [D, O, N, A, L, G, E, R, B, T];
constraint all_different_int(FD);
constraint int_lin_eq([200, -1000, 100002, 9900, 100000, 20, 1000, -99010, -1], [A, B, D, E, G, L, N, R, T], 0);
solve satisfy;
