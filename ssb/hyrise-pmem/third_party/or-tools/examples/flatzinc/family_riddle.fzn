predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var 0..81: INT____00001 :: is_defined_var :: var_is_introduced;
var 0..81: INT____00002 :: is_defined_var :: var_is_introduced;
var 0..81: INT____00003 :: is_defined_var :: var_is_introduced;
var 0..81: INT____00004 :: is_defined_var :: var_is_introduced;
var 0..81: INT____00005 :: is_defined_var :: var_is_introduced;
var 0..81: INT____00006 :: is_defined_var :: var_is_introduced;
var 0..81: INT____00007 :: is_defined_var :: var_is_introduced;
var 0..81: INT____00008 :: is_defined_var :: var_is_introduced;
var 0..81: INT____00009 :: is_defined_var :: var_is_introduced;
var 0..81: INT____00010 :: is_defined_var :: var_is_introduced;
var 0..81: INT____00011 :: is_defined_var :: var_is_introduced;
var 0..81: INT____00012 :: is_defined_var :: var_is_introduced;
array [1..3] of var 0..9: leo_boys :: output_array([1..3]);
array [1..3] of var 0..9: leo_girls :: output_array([1..3]);
array [1..3] of var 0..9: rene_boys :: output_array([1..3]);
array [1..3] of var 0..9: rene_girls :: output_array([1..3]);
constraint all_different_int([leo_boys[1], leo_boys[2], leo_boys[3], leo_girls[1], leo_girls[2], leo_girls[3]]);
constraint all_different_int([rene_boys[1], rene_boys[2], rene_boys[3], rene_girls[1], rene_girls[2], rene_girls[3]]);
constraint int_eq(rene_girls[1], 0);
constraint int_le(leo_boys[1], leo_boys[2]);
constraint int_le(leo_boys[2], leo_boys[3]);
constraint int_le(leo_girls[1], leo_girls[2]);
constraint int_le(leo_girls[2], leo_girls[3]);
constraint int_le(rene_boys[1], rene_boys[2]);
constraint int_le(rene_boys[2], rene_boys[3]);
constraint int_le(rene_girls[1], rene_girls[2]);
constraint int_le(rene_girls[2], rene_girls[3]);
constraint int_lin_eq([1, 1, 1, -1, -1, -1], [INT____00001, INT____00002, INT____00003, INT____00004, INT____00005, INT____00006], 0);
constraint int_lin_eq([1, 1, 1, -1, -1, -1], [INT____00007, INT____00008, INT____00009, INT____00010, INT____00011, INT____00012], 0);
constraint int_lin_eq([1, 1, 1, -1, -1, -1], [leo_boys[1], leo_boys[2], leo_boys[3], leo_girls[1], leo_girls[2], leo_girls[3]], 0);
constraint int_lin_eq([1, 1, 1, -1, -1, -1], [rene_boys[1], rene_boys[2], rene_boys[3], rene_girls[1], rene_girls[2], rene_girls[3]], 0);
constraint int_lin_eq([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [leo_boys[1], leo_boys[2], leo_boys[3], leo_girls[1], leo_girls[2], leo_girls[3], rene_boys[1], rene_boys[2], rene_boys[3], rene_girls[1], rene_girls[2], rene_girls[3]], 60);
constraint int_times(leo_boys[1], leo_boys[1], INT____00007) :: defines_var(INT____00007);
constraint int_times(leo_boys[2], leo_boys[2], INT____00008) :: defines_var(INT____00008);
constraint int_times(leo_boys[3], leo_boys[3], INT____00009) :: defines_var(INT____00009);
constraint int_times(leo_girls[1], leo_girls[1], INT____00010) :: defines_var(INT____00010);
constraint int_times(leo_girls[2], leo_girls[2], INT____00011) :: defines_var(INT____00011);
constraint int_times(leo_girls[3], leo_girls[3], INT____00012) :: defines_var(INT____00012);
constraint int_times(rene_boys[1], rene_boys[1], INT____00001) :: defines_var(INT____00001);
constraint int_times(rene_boys[2], rene_boys[2], INT____00002) :: defines_var(INT____00002);
constraint int_times(rene_boys[3], rene_boys[3], INT____00003) :: defines_var(INT____00003);
constraint int_times(rene_girls[1], rene_girls[1], INT____00004) :: defines_var(INT____00004);
constraint int_times(rene_girls[2], rene_girls[2], INT____00005) :: defines_var(INT____00005);
constraint int_times(rene_girls[3], rene_girls[3], INT____00006) :: defines_var(INT____00006);
constraint minimum_int(leo_girls[1], [leo_boys[1], leo_boys[2], leo_boys[3], leo_girls[1], leo_girls[2], leo_girls[3]]);
constraint minimum_int(rene_girls[1], [rene_boys[1], rene_boys[2], rene_boys[3], rene_girls[1], rene_girls[2], rene_girls[3]]);
solve  :: int_search([leo_boys[1], leo_boys[2], leo_boys[3], leo_girls[1], leo_girls[2], leo_girls[3], rene_boys[1], rene_boys[2], rene_boys[3], rene_girls[1], rene_girls[2], rene_girls[3]], first_fail, indomain, complete) satisfy;
