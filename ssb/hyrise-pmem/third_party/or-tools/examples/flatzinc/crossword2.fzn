predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..75] of int: A = [8, 15, 19, 5, 19, 12, 1, 19, 5, 18, 19, 1, 9, 12, 19, 19, 8, 5, 5, 20, 19, 20, 5, 5, 18, 8, 5, 5, 12, 0, 8, 9, 11, 5, 0, 11, 5, 5, 12, 0, 11, 14, 15, 20, 0, 12, 9, 14, 5, 0, 1, 6, 20, 0, 0, 1, 12, 5, 0, 0, 5, 5, 12, 0, 0, 12, 5, 5, 0, 0, 20, 9, 5, 0, 0];
array [1..48] of int: overlapping = [1, 3, 2, 1, 1, 5, 3, 1, 4, 2, 2, 3, 4, 3, 5, 1, 4, 4, 3, 3, 7, 1, 2, 4, 7, 2, 5, 2, 7, 3, 3, 4, 8, 1, 6, 2, 8, 3, 2, 5, 8, 4, 5, 3, 8, 5, 3, 5];
array [1..8] of var 1..15: E :: output_array([1..8]);
var 3..73: INT____00001 :: is_defined_var :: var_is_introduced;
var 1..71: INT____00003 :: is_defined_var :: var_is_introduced;
var 0..20: INT____00004 :: is_defined_var :: var_is_introduced;
var 5..75: INT____00005 :: is_defined_var :: var_is_introduced;
var 1..71: INT____00007 :: is_defined_var :: var_is_introduced;
var 0..20: INT____00008 :: is_defined_var :: var_is_introduced;
var 2..72: INT____00009 :: is_defined_var :: var_is_introduced;
var 3..73: INT____00011 :: is_defined_var :: var_is_introduced;
var 0..20: INT____00012 :: is_defined_var :: var_is_introduced;
var 3..73: INT____00013 :: is_defined_var :: var_is_introduced;
var 1..71: INT____00015 :: is_defined_var :: var_is_introduced;
var 0..20: INT____00016 :: is_defined_var :: var_is_introduced;
var 4..74: INT____00017 :: is_defined_var :: var_is_introduced;
var 3..73: INT____00019 :: is_defined_var :: var_is_introduced;
var 0..20: INT____00020 :: is_defined_var :: var_is_introduced;
var 1..71: INT____00021 :: is_defined_var :: var_is_introduced;
var 4..74: INT____00023 :: is_defined_var :: var_is_introduced;
var 0..20: INT____00024 :: is_defined_var :: var_is_introduced;
var 2..72: INT____00025 :: is_defined_var :: var_is_introduced;
var 2..72: INT____00027 :: is_defined_var :: var_is_introduced;
var 0..20: INT____00028 :: is_defined_var :: var_is_introduced;
var 3..73: INT____00029 :: is_defined_var :: var_is_introduced;
var 4..74: INT____00031 :: is_defined_var :: var_is_introduced;
var 0..20: INT____00032 :: is_defined_var :: var_is_introduced;
var 1..71: INT____00033 :: is_defined_var :: var_is_introduced;
var 2..72: INT____00035 :: is_defined_var :: var_is_introduced;
var 0..20: INT____00036 :: is_defined_var :: var_is_introduced;
var 3..73: INT____00037 :: is_defined_var :: var_is_introduced;
var 5..75: INT____00039 :: is_defined_var :: var_is_introduced;
var 0..20: INT____00040 :: is_defined_var :: var_is_introduced;
var 4..74: INT____00041 :: is_defined_var :: var_is_introduced;
var 3..73: INT____00043 :: is_defined_var :: var_is_introduced;
var 0..20: INT____00044 :: is_defined_var :: var_is_introduced;
var 5..75: INT____00045 :: is_defined_var :: var_is_introduced;
var 5..75: INT____00047 :: is_defined_var :: var_is_introduced;
var 0..20: INT____00048 :: is_defined_var :: var_is_introduced;
constraint all_different_int(E);
constraint array_int_element(INT____00001, A, INT____00004);
constraint array_int_element(INT____00003, A, INT____00004) :: defines_var(INT____00004);
constraint array_int_element(INT____00005, A, INT____00008);
constraint array_int_element(INT____00007, A, INT____00008) :: defines_var(INT____00008);
constraint array_int_element(INT____00009, A, INT____00012);
constraint array_int_element(INT____00011, A, INT____00012) :: defines_var(INT____00012);
constraint array_int_element(INT____00013, A, INT____00016);
constraint array_int_element(INT____00015, A, INT____00016) :: defines_var(INT____00016);
constraint array_int_element(INT____00017, A, INT____00020);
constraint array_int_element(INT____00019, A, INT____00020) :: defines_var(INT____00020);
constraint array_int_element(INT____00021, A, INT____00024);
constraint array_int_element(INT____00023, A, INT____00024) :: defines_var(INT____00024);
constraint array_int_element(INT____00025, A, INT____00028);
constraint array_int_element(INT____00027, A, INT____00028) :: defines_var(INT____00028);
constraint array_int_element(INT____00029, A, INT____00032);
constraint array_int_element(INT____00031, A, INT____00032) :: defines_var(INT____00032);
constraint array_int_element(INT____00033, A, INT____00036);
constraint array_int_element(INT____00035, A, INT____00036) :: defines_var(INT____00036);
constraint array_int_element(INT____00037, A, INT____00040);
constraint array_int_element(INT____00039, A, INT____00040) :: defines_var(INT____00040);
constraint array_int_element(INT____00041, A, INT____00044);
constraint array_int_element(INT____00043, A, INT____00044) :: defines_var(INT____00044);
constraint array_int_element(INT____00045, A, INT____00048);
constraint array_int_element(INT____00047, A, INT____00048) :: defines_var(INT____00048);
constraint int_lin_eq([-1, 5], [INT____00001, E[1]], 2) :: defines_var(INT____00001) :: domain;
constraint int_lin_eq([-1, 5], [INT____00003, E[2]], 4) :: defines_var(INT____00003) :: domain;
constraint int_lin_eq([-1, 5], [INT____00005, E[1]], 0) :: defines_var(INT____00005) :: domain;
constraint int_lin_eq([-1, 5], [INT____00007, E[3]], 4) :: defines_var(INT____00007) :: domain;
constraint int_lin_eq([-1, 5], [INT____00009, E[4]], 3) :: defines_var(INT____00009) :: domain;
constraint int_lin_eq([-1, 5], [INT____00011, E[2]], 2) :: defines_var(INT____00011) :: domain;
constraint int_lin_eq([-1, 5], [INT____00013, E[4]], 2) :: defines_var(INT____00013) :: domain;
constraint int_lin_eq([-1, 5], [INT____00015, E[5]], 4) :: defines_var(INT____00015) :: domain;
constraint int_lin_eq([-1, 5], [INT____00017, E[4]], 1) :: defines_var(INT____00017) :: domain;
constraint int_lin_eq([-1, 5], [INT____00019, E[3]], 2) :: defines_var(INT____00019) :: domain;
constraint int_lin_eq([-1, 5], [INT____00021, E[7]], 4) :: defines_var(INT____00021) :: domain;
constraint int_lin_eq([-1, 5], [INT____00023, E[2]], 1) :: defines_var(INT____00023) :: domain;
constraint int_lin_eq([-1, 5], [INT____00025, E[7]], 3) :: defines_var(INT____00025) :: domain;
constraint int_lin_eq([-1, 5], [INT____00027, E[5]], 3) :: defines_var(INT____00027) :: domain;
constraint int_lin_eq([-1, 5], [INT____00029, E[7]], 2) :: defines_var(INT____00029) :: domain;
constraint int_lin_eq([-1, 5], [INT____00031, E[3]], 1) :: defines_var(INT____00031) :: domain;
constraint int_lin_eq([-1, 5], [INT____00033, E[8]], 4) :: defines_var(INT____00033) :: domain;
constraint int_lin_eq([-1, 5], [INT____00035, E[6]], 3) :: defines_var(INT____00035) :: domain;
constraint int_lin_eq([-1, 5], [INT____00037, E[8]], 2) :: defines_var(INT____00037) :: domain;
constraint int_lin_eq([-1, 5], [INT____00039, E[2]], 0) :: defines_var(INT____00039) :: domain;
constraint int_lin_eq([-1, 5], [INT____00041, E[8]], 1) :: defines_var(INT____00041) :: domain;
constraint int_lin_eq([-1, 5], [INT____00043, E[5]], 2) :: defines_var(INT____00043) :: domain;
constraint int_lin_eq([-1, 5], [INT____00045, E[8]], 0) :: defines_var(INT____00045) :: domain;
constraint int_lin_eq([-1, 5], [INT____00047, E[3]], 0) :: defines_var(INT____00047) :: domain;
solve  :: int_search(E, first_fail, indomain_median, complete) satisfy;
