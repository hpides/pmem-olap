predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
array [1..9] of var 1..9: a :: output_array([1..3, 1..3]);
constraint all_different_int([a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9]]);
constraint int_lin_eq([1, 1, 1], [a[1], a[2], a[3]], 15);
constraint int_lin_eq([1, 1, 1], [a[1], a[4], a[7]], 15);
constraint int_lin_eq([1, 1, 1], [a[1], a[5], a[9]], 15);
constraint int_lin_eq([1, 1, 1], [a[2], a[5], a[8]], 15);
constraint int_lin_eq([1, 1, 1], [a[3], a[5], a[7]], 15);
constraint int_lin_eq([1, 1, 1], [a[3], a[6], a[9]], 15);
constraint int_lin_eq([1, 1, 1], [a[4], a[5], a[6]], 15);
constraint int_lin_eq([1, 1, 1], [a[7], a[8], a[9]], 15);
solve satisfy;
