predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var 0..9: A;
var 1..9: D;
var 0..9: E;
var 10000..12987: INT____00003 :: is_defined_var :: var_is_introduced;
var 10000..99999: DALEY :: output_var = INT____00003;
var 0..9: L;
var 0..9: M;
var 0..9: O;
var 1..9: T;
var 100..999: TOM;
var 0..9: Y;
array [1..8] of var 0..9: x :: output_array([1..8]) = [T, O, M, D, A, L, E, Y];
constraint all_different_int(x);
constraint int_lin_eq([-1, 13], [INT____00003, TOM], 0) :: defines_var(INT____00003);
constraint int_lin_eq([-1, 1, 10, 100], [TOM, M, O, T], 0);
constraint int_lin_eq([-1, 1000, 10000, 10, 100, 1], [INT____00003, A, D, E, L, Y], 0);
solve  :: int_search(x, first_fail, indomain_min, complete) satisfy;
