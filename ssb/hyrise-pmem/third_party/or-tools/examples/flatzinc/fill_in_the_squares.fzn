predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..25] of var 1..25: ALL;
var 5..125: INT____00006 :: is_defined_var :: var_is_introduced;
var 5..125: INT____00008 :: is_defined_var :: var_is_introduced;
var 5..125: INT____00010 :: is_defined_var :: var_is_introduced;
var 5..125: INT____00012 :: is_defined_var :: var_is_introduced;
var 5..125: INT____00014 :: is_defined_var :: var_is_introduced;
var 2..23: INT____00021 :: is_defined_var :: var_is_introduced;
var 1..625: INT____00022 :: is_defined_var :: var_is_introduced;
var 1..625: INT____00023 :: is_defined_var :: var_is_introduced;
var 2..625: INT____00025 :: is_defined_var :: var_is_introduced;
array [1..5] of var 1..25: a :: output_array([0..4]);
var 5..115: a_sum;
array [1..5] of var 1..25: b :: output_array([0..4]);
var 5..115: b_sum;
array [1..5] of var 1..25: c :: output_array([0..4]);
var 5..115: c_sum;
array [1..5] of var 1..25: d :: output_array([0..4]);
var 5..115: d_sum;
array [1..5] of var 1..25: e :: output_array([0..4]);
var 5..115: e_sum;
constraint all_different_int(ALL);
constraint int_eq(a[1], ALL[1]);
constraint int_eq(a[2], ALL[2]);
constraint int_eq(a[3], ALL[3]);
constraint int_eq(a[4], ALL[4]);
constraint int_eq(a[5], ALL[5]);
constraint int_eq(b[1], ALL[6]);
constraint int_eq(b[2], ALL[7]);
constraint int_eq(b[3], ALL[8]);
constraint int_eq(b[4], ALL[9]);
constraint int_eq(b[5], ALL[10]);
constraint int_eq(c[1], ALL[11]);
constraint int_eq(c[2], ALL[12]);
constraint int_eq(c[3], ALL[13]);
constraint int_eq(c[4], ALL[14]);
constraint int_eq(c[5], ALL[15]);
constraint int_eq(d[1], ALL[16]);
constraint int_eq(d[2], ALL[17]);
constraint int_eq(d[3], ALL[18]);
constraint int_eq(d[4], ALL[19]);
constraint int_eq(d[5], ALL[20]);
constraint int_eq(e[1], ALL[21]);
constraint int_eq(e[2], ALL[22]);
constraint int_eq(e[3], ALL[23]);
constraint int_eq(e[4], ALL[24]);
constraint int_eq(e[5], ALL[25]);
constraint int_le(a_sum, b_sum);
constraint int_le(a_sum, c_sum);
constraint int_le(a_sum, d_sum);
constraint int_le(a_sum, e_sum);
constraint int_lin_eq([-1, 1], [b[2], c[2]], 1);
constraint int_lin_eq([-1, 1], [b[3], c[3]], 1);
constraint int_lin_eq([-1, 1], [c[2], d[2]], 1);
constraint int_lin_eq([-1, 1], [c[3], d[3]], 1);
constraint int_lin_eq([-1, -1, 1, 1], [a[1], b[1], d[1], e[1]], 0);
constraint int_lin_eq([1, -1, 1, -1], [a[5], b[5], c[5], d[5]], 0);
constraint int_lin_eq([-1, 1, -1, 1, 1], [e[1], e[2], e[3], e[4], e[5]], 0);
constraint int_lin_eq([-1, 1, 1, 1, 1, 1], [INT____00006, a[1], b[1], c[1], d[1], e[1]], 0) :: defines_var(INT____00006);
constraint int_lin_eq([-1, 1, 1, 1, 1, 1], [INT____00008, a[2], b[2], c[2], d[2], e[2]], 0) :: defines_var(INT____00008);
constraint int_lin_eq([-1, 1, 1, 1, 1, 1], [INT____00010, a[3], b[3], c[3], d[3], e[3]], 0) :: defines_var(INT____00010);
constraint int_lin_eq([-1, 1, 1, 1, 1, 1], [INT____00012, a[4], b[4], c[4], d[4], e[4]], 0) :: defines_var(INT____00012);
constraint int_lin_eq([-1, 1, 1, 1, 1, 1], [INT____00014, a[5], b[5], c[5], d[5], e[5]], 0) :: defines_var(INT____00014);
constraint int_lin_eq([-1, 1, 1, 1, 1, 1], [a_sum, a[1], a[2], a[3], a[4], a[5]], 0);
constraint int_lin_eq([-1, 1, 1, 1, 1, 1], [b_sum, b[1], b[2], b[3], b[4], b[5]], 0);
constraint int_lin_eq([-1, 1, 1, 1, 1, 1], [c_sum, c[1], c[2], c[3], c[4], c[5]], 0);
constraint int_lin_eq([-1, 1, 1, 1, 1, 1], [d_sum, d[1], d[2], d[3], d[4], d[5]], 0);
constraint int_lin_eq([-1, 1, 1, 1, 1, 1], [e_sum, e[1], e[2], e[3], e[4], e[5]], 0);
constraint int_lin_le([-1, -1, 1, 1, 1], [a[4], b[4], c[4], d[4], e[4]], -1);
constraint int_lin_le([-1, 1, -1, 1, 1, -1, 1, -1], [a[1], a[5], b[2], b[4], d[2], d[4], e[1], e[5]], -1);
constraint int_lt(9, c[5]);
constraint int_lt(e[1], a[1]);
constraint int_mod(INT____00006, 2, 1);
constraint int_mod(INT____00008, 2, 1);
constraint int_mod(INT____00010, 2, 1);
constraint int_mod(INT____00012, 2, 1);
constraint int_mod(INT____00014, 2, 1);
constraint int_mod(a_sum, 2, 0);
constraint int_mod(b_sum, 2, 0);
constraint int_mod(c_sum, 2, 1);
constraint int_mod(d_sum, 2, 0);
constraint int_mod(e_sum, 2, 0);
constraint int_mod(d[5], e[5], 0);
constraint int_plus(INT____00022, INT____00023, INT____00025) :: defines_var(INT____00025);
constraint int_plus(a[3], e[3], INT____00021) :: defines_var(INT____00021);
constraint int_times(c[1], c[1], INT____00022) :: defines_var(INT____00022);
constraint int_times(c[5], c[5], INT____00023) :: defines_var(INT____00023);
constraint int_times(e[3], e[3], INT____00025);
constraint set_in(INT____00021, {1, 2, 3, 5, 7, 11, 13, 17, 19, 23});
constraint set_in(a[1], {1, 2, 3, 5, 7, 11, 13, 17, 19, 23});
constraint set_in(a[3], {1, 2, 3, 5, 7, 11, 13, 17, 19, 23});
constraint set_in(a[5], {1, 4, 9, 16, 25});
constraint set_in(b[1], {1, 2, 3, 5, 7, 11, 13, 17, 19, 23});
constraint set_in(d[1], {1, 4, 9, 16, 25});
constraint set_in(d[3], {1, 4, 9, 16, 25});
constraint set_in(e[1], {1, 4, 9, 16, 25});
solve satisfy;
