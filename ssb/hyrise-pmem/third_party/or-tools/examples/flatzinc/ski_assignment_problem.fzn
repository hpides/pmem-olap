predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..6] of int: ski_heights = [1, 2, 5, 7, 13, 21];
array [1..5] of int: skier_heights = [3, 4, 7, 11, 18];
var 1..21: INT____00001 :: is_defined_var :: var_is_introduced;
var -2..18: INT____00002 :: is_defined_var :: var_is_introduced;
var 0..18: INT____00003 :: is_defined_var :: var_is_introduced;
var 1..21: INT____00004 :: is_defined_var :: var_is_introduced;
var -3..17: INT____00005 :: is_defined_var :: var_is_introduced;
var 0..17: INT____00006 :: is_defined_var :: var_is_introduced;
var 1..21: INT____00007 :: is_defined_var :: var_is_introduced;
var -6..14: INT____00008 :: is_defined_var :: var_is_introduced;
var 0..14: INT____00009 :: is_defined_var :: var_is_introduced;
var 1..21: INT____00010 :: is_defined_var :: var_is_introduced;
var -10..10: INT____00011 :: is_defined_var :: var_is_introduced;
var 0..10: INT____00012 :: is_defined_var :: var_is_introduced;
var 1..21: INT____00013 :: is_defined_var :: var_is_introduced;
var -17..3: INT____00014 :: is_defined_var :: var_is_introduced;
var 0..17: INT____00015 :: is_defined_var :: var_is_introduced;
var 0..76: INT____00016 :: is_defined_var :: var_is_introduced;
array [1..5] of var 1..6: x :: output_array([1..5]);
var 0..76: z :: output_var = INT____00016;
constraint all_different_int(x);
constraint array_int_element(x[1], ski_heights, INT____00001) :: defines_var(INT____00001);
constraint array_int_element(x[2], ski_heights, INT____00004) :: defines_var(INT____00004);
constraint array_int_element(x[3], ski_heights, INT____00007) :: defines_var(INT____00007);
constraint array_int_element(x[4], ski_heights, INT____00010) :: defines_var(INT____00010);
constraint array_int_element(x[5], ski_heights, INT____00013) :: defines_var(INT____00013);
constraint int_abs(INT____00002, INT____00003) :: defines_var(INT____00003);
constraint int_abs(INT____00005, INT____00006) :: defines_var(INT____00006);
constraint int_abs(INT____00008, INT____00009) :: defines_var(INT____00009);
constraint int_abs(INT____00011, INT____00012) :: defines_var(INT____00012);
constraint int_abs(INT____00014, INT____00015) :: defines_var(INT____00015);
constraint int_lin_eq([-1, 1], [INT____00002, INT____00001], 3) :: defines_var(INT____00002);
constraint int_lin_eq([-1, 1], [INT____00005, INT____00004], 4) :: defines_var(INT____00005);
constraint int_lin_eq([-1, 1], [INT____00008, INT____00007], 7) :: defines_var(INT____00008);
constraint int_lin_eq([-1, 1], [INT____00011, INT____00010], 11) :: defines_var(INT____00011);
constraint int_lin_eq([-1, 1], [INT____00014, INT____00013], 18) :: defines_var(INT____00014);
constraint int_lin_eq([-1, 1, 1, 1, 1, 1], [INT____00016, INT____00003, INT____00006, INT____00009, INT____00012, INT____00015], 0) :: defines_var(INT____00016);
solve  :: int_search(x, smallest, indomain_min, complete) minimize INT____00016;
