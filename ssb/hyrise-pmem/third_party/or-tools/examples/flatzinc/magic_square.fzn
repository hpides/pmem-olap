predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..9] of var 1..9: magic :: output_array([1..3, 1..3]);
constraint all_different_int([magic[1], magic[2], magic[3], magic[4], magic[5], magic[6], magic[7], magic[8], magic[9]]) :: domain;
constraint int_lin_eq([1, 1, 1], [magic[1], magic[2], magic[3]], 15);
constraint int_lin_eq([1, 1, 1], [magic[1], magic[4], magic[7]], 15);
constraint int_lin_eq([1, 1, 1], [magic[1], magic[5], magic[9]], 15);
constraint int_lin_eq([1, 1, 1], [magic[2], magic[5], magic[8]], 15);
constraint int_lin_eq([1, 1, 1], [magic[3], magic[5], magic[7]], 15);
constraint int_lin_eq([1, 1, 1], [magic[3], magic[6], magic[9]], 15);
constraint int_lin_eq([1, 1, 1], [magic[4], magic[5], magic[6]], 15);
constraint int_lin_eq([1, 1, 1], [magic[7], magic[8], magic[9]], 15);
solve  :: int_search([magic[1], magic[2], magic[3], magic[4], magic[5], magic[6], magic[7], magic[8], magic[9]], first_fail, indomain_min, complete) satisfy;
