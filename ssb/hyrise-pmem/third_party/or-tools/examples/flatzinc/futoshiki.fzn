predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..44] of int: lt = [1, 2, 1, 1, 1, 4, 1, 5, 2, 3, 1, 3, 3, 3, 2, 3, 3, 4, 2, 4, 2, 5, 3, 5, 3, 2, 4, 2, 4, 4, 4, 3, 5, 2, 5, 1, 5, 4, 5, 3, 5, 5, 4, 5];
array [1..25] of int: values = [0, 0, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
array [1..25] of var 1..5: field :: output_array([1..5, 1..5]);
constraint all_different_int([field[1], field[2], field[3], field[4], field[5]]);
constraint all_different_int([field[1], field[6], field[11], field[16], field[21]]);
constraint all_different_int([field[2], field[7], field[12], field[17], field[22]]);
constraint all_different_int([field[3], field[8], field[13], field[18], field[23]]);
constraint all_different_int([field[4], field[9], field[14], field[19], field[24]]);
constraint all_different_int([field[5], field[10], field[15], field[20], field[25]]);
constraint all_different_int([field[6], field[7], field[8], field[9], field[10]]);
constraint all_different_int([field[11], field[12], field[13], field[14], field[15]]);
constraint all_different_int([field[16], field[17], field[18], field[19], field[20]]);
constraint all_different_int([field[21], field[22], field[23], field[24], field[25]]);
constraint int_eq_reif(field[3], 3, true);
constraint int_eq_reif(field[4], 2, true);
constraint int_lt(field[2], field[1]);
constraint int_lt(field[4], field[5]);
constraint int_lt(field[8], field[3]);
constraint int_lt(field[10], field[15]);
constraint int_lt(field[12], field[17]);
constraint int_lt(field[13], field[8]);
constraint int_lt(field[14], field[9]);
constraint int_lt(field[19], field[18]);
constraint int_lt(field[22], field[21]);
constraint int_lt(field[24], field[23]);
constraint int_lt(field[25], field[20]);
solve satisfy;
