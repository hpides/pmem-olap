predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..6] of int: s = [4, 2, 4, 4, 6, 8];
var bool: BOOL____00002 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00004 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00006 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00008 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00010 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00012 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00014 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00016 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00018 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00020 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00022 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00024 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00026 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00028 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00030 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00032 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00034 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00036 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00038 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00040 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00042 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00044 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00046 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00048 :: is_defined_var :: var_is_introduced;
var 1..56: INT____00001 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00003 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00005 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00007 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00009 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00011 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00013 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00015 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00017 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00019 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00021 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00023 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00025 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00027 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00029 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00031 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00033 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00035 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00037 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00039 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00041 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00043 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00045 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00047 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00049 :: is_defined_var :: var_is_introduced;
var 1..56: area :: output_var = INT____00001;
array [1..4] of var 1..6: num_sides :: output_array([1..4]);
array [1..4] of var 1..28: sum_sides :: output_array([1..4]);
array [1..6] of var 1..4: x :: output_array([1..6]);
constraint bool2int(BOOL____00002, INT____00003) :: defines_var(INT____00003);
constraint bool2int(BOOL____00004, INT____00005) :: defines_var(INT____00005);
constraint bool2int(BOOL____00006, INT____00007) :: defines_var(INT____00007);
constraint bool2int(BOOL____00008, INT____00009) :: defines_var(INT____00009);
constraint bool2int(BOOL____00010, INT____00011) :: defines_var(INT____00011);
constraint bool2int(BOOL____00012, INT____00013) :: defines_var(INT____00013);
constraint bool2int(BOOL____00014, INT____00015) :: defines_var(INT____00015);
constraint bool2int(BOOL____00016, INT____00017) :: defines_var(INT____00017);
constraint bool2int(BOOL____00018, INT____00019) :: defines_var(INT____00019);
constraint bool2int(BOOL____00020, INT____00021) :: defines_var(INT____00021);
constraint bool2int(BOOL____00022, INT____00023) :: defines_var(INT____00023);
constraint bool2int(BOOL____00024, INT____00025) :: defines_var(INT____00025);
constraint bool2int(BOOL____00026, INT____00027) :: defines_var(INT____00027);
constraint bool2int(BOOL____00028, INT____00029) :: defines_var(INT____00029);
constraint bool2int(BOOL____00030, INT____00031) :: defines_var(INT____00031);
constraint bool2int(BOOL____00032, INT____00033) :: defines_var(INT____00033);
constraint bool2int(BOOL____00034, INT____00035) :: defines_var(INT____00035);
constraint bool2int(BOOL____00036, INT____00037) :: defines_var(INT____00037);
constraint bool2int(BOOL____00038, INT____00039) :: defines_var(INT____00039);
constraint bool2int(BOOL____00040, INT____00041) :: defines_var(INT____00041);
constraint bool2int(BOOL____00042, INT____00043) :: defines_var(INT____00043);
constraint bool2int(BOOL____00044, INT____00045) :: defines_var(INT____00045);
constraint bool2int(BOOL____00046, INT____00047) :: defines_var(INT____00047);
constraint bool2int(BOOL____00048, INT____00049) :: defines_var(INT____00049);
constraint int_eq(sum_sides[1], sum_sides[3]);
constraint int_eq(sum_sides[2], sum_sides[4]);
constraint int_eq_reif(x[1], 1, BOOL____00002) :: defines_var(BOOL____00002);
constraint int_eq_reif(x[1], 2, BOOL____00014) :: defines_var(BOOL____00014);
constraint int_eq_reif(x[1], 3, BOOL____00026) :: defines_var(BOOL____00026);
constraint int_eq_reif(x[1], 4, BOOL____00038) :: defines_var(BOOL____00038);
constraint int_eq_reif(x[2], 1, BOOL____00004) :: defines_var(BOOL____00004);
constraint int_eq_reif(x[2], 2, BOOL____00016) :: defines_var(BOOL____00016);
constraint int_eq_reif(x[2], 3, BOOL____00028) :: defines_var(BOOL____00028);
constraint int_eq_reif(x[2], 4, BOOL____00040) :: defines_var(BOOL____00040);
constraint int_eq_reif(x[3], 1, BOOL____00006) :: defines_var(BOOL____00006);
constraint int_eq_reif(x[3], 2, BOOL____00018) :: defines_var(BOOL____00018);
constraint int_eq_reif(x[3], 3, BOOL____00030) :: defines_var(BOOL____00030);
constraint int_eq_reif(x[3], 4, BOOL____00042) :: defines_var(BOOL____00042);
constraint int_eq_reif(x[4], 1, BOOL____00008) :: defines_var(BOOL____00008);
constraint int_eq_reif(x[4], 2, BOOL____00020) :: defines_var(BOOL____00020);
constraint int_eq_reif(x[4], 3, BOOL____00032) :: defines_var(BOOL____00032);
constraint int_eq_reif(x[4], 4, BOOL____00044) :: defines_var(BOOL____00044);
constraint int_eq_reif(x[5], 1, BOOL____00010) :: defines_var(BOOL____00010);
constraint int_eq_reif(x[5], 2, BOOL____00022) :: defines_var(BOOL____00022);
constraint int_eq_reif(x[5], 3, BOOL____00034) :: defines_var(BOOL____00034);
constraint int_eq_reif(x[5], 4, BOOL____00046) :: defines_var(BOOL____00046);
constraint int_eq_reif(x[6], 1, BOOL____00012) :: defines_var(BOOL____00012);
constraint int_eq_reif(x[6], 2, BOOL____00024) :: defines_var(BOOL____00024);
constraint int_eq_reif(x[6], 3, BOOL____00036) :: defines_var(BOOL____00036);
constraint int_eq_reif(x[6], 4, BOOL____00048) :: defines_var(BOOL____00048);
constraint int_le(num_sides[1], num_sides[3]);
constraint int_le(num_sides[2], num_sides[4]);
constraint int_lin_eq([-4, -2, -4, -4, -6, -8, 1], [INT____00003, INT____00005, INT____00007, INT____00009, INT____00011, INT____00013, sum_sides[1]], 0);
constraint int_lin_eq([-4, -2, -4, -4, -6, -8, 1], [INT____00015, INT____00017, INT____00019, INT____00021, INT____00023, INT____00025, sum_sides[2]], 0);
constraint int_lin_eq([-4, -2, -4, -4, -6, -8, 1], [INT____00027, INT____00029, INT____00031, INT____00033, INT____00035, INT____00037, sum_sides[3]], 0);
constraint int_lin_eq([-4, -2, -4, -4, -6, -8, 1], [INT____00039, INT____00041, INT____00043, INT____00045, INT____00047, INT____00049, sum_sides[4]], 0);
constraint int_lin_eq([-1, -1, -1, -1, -1, -1, 1], [INT____00003, INT____00005, INT____00007, INT____00009, INT____00011, INT____00013, num_sides[1]], 0);
constraint int_lin_eq([-1, -1, -1, -1, -1, -1, 1], [INT____00015, INT____00017, INT____00019, INT____00021, INT____00023, INT____00025, num_sides[2]], 0);
constraint int_lin_eq([-1, -1, -1, -1, -1, -1, 1], [INT____00027, INT____00029, INT____00031, INT____00033, INT____00035, INT____00037, num_sides[3]], 0);
constraint int_lin_eq([-1, -1, -1, -1, -1, -1, 1], [INT____00039, INT____00041, INT____00043, INT____00045, INT____00047, INT____00049, num_sides[4]], 0);
constraint int_times(sum_sides[1], sum_sides[2], INT____00001) :: defines_var(INT____00001);
solve  :: int_search(x, anti_first_fail, indomain_split, complete) maximize INT____00001;
