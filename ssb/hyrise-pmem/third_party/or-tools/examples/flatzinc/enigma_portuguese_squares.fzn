predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var 1..9: C;
var 0..9: E;
var 1..9999: INT____00002 :: is_defined_var :: var_is_introduced;
var 1..99: INT____00004 :: is_defined_var :: var_is_introduced;
var 1..9999: INT____00006 :: is_defined_var :: var_is_introduced;
var 1..999: INT____00008 :: is_defined_var :: var_is_introduced;
var 1..10000: INT____00009 :: is_defined_var :: var_is_introduced;
var 1..10000000: INT____00010 :: is_defined_var :: var_is_introduced;
var 1..1000000000: INT____00011 :: is_defined_var :: var_is_introduced;
var 0..9: M;
var 1..9: N;
var 0..9: O;
var 0..9: R;
var 1..9: U;
var 0..9: V;
var 1..9: Z;
var 1..1000000000: square_root :: output_var = INT____00011;
array [1..9] of var 0..9: x :: output_array([1..9]) = [Z, E, R, O, U, M, N, V, C];
var 1..1000: x1;
var 1..10: x2;
var 1..1000: x3;
var 1..100: x4;
constraint all_different_int(x);
constraint int_lin_eq([-1, 1, 10], [INT____00004, M, U], 0) :: defines_var(INT____00004);
constraint int_lin_eq([-1, 100, 10, 1], [INT____00008, C, E, M], 0) :: defines_var(INT____00008);
constraint int_lin_eq([-1, 1, 1000, 100, 10], [INT____00006, E, N, O, V], 0) :: defines_var(INT____00006);
constraint int_lin_eq([-1, 100, 1, 10, 1000], [INT____00002, E, O, R, Z], 0) :: defines_var(INT____00002);
constraint int_times(INT____00009, x3, INT____00010) :: defines_var(INT____00010);
constraint int_times(INT____00010, x4, INT____00011) :: defines_var(INT____00011);
constraint int_times(x1, x1, INT____00002);
constraint int_times(x1, x2, INT____00009) :: defines_var(INT____00009);
constraint int_times(x2, x2, INT____00004);
constraint int_times(x3, x3, INT____00006);
constraint int_times(x4, x4, INT____00008);
solve satisfy;
