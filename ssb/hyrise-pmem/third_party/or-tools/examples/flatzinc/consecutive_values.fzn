predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var bool: BOOL____00002 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00003 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00004 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00005 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00006 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00008 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00009 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00010 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00011 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00012 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00014 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00015 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00016 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00017 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00018 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00020 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00021 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00022 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00023 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00024 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00026 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00027 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00028 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00029 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00030 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00032 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00033 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00034 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00035 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00036 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00038 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00039 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00040 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00041 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00042 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00044 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00045 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00046 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00047 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00048 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00050 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00051 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00052 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00053 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00054 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00056 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00057 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00058 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00059 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00060 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00007 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00013 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00019 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00025 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00031 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00037 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00043 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00049 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00055 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00061 :: is_defined_var :: var_is_introduced;
var 1..10: INT____00063 :: is_defined_var :: var_is_introduced;
var 1..10: INT____00064 :: is_defined_var :: var_is_introduced;
var 1..10: INT____00065 :: is_defined_var :: var_is_introduced;
var 1..10: INT____00066 :: is_defined_var :: var_is_introduced;
var 1..10: INT____00067 :: is_defined_var :: var_is_introduced;
var 1..10: INT____00068 :: is_defined_var :: var_is_introduced;
var 1..10: INT____00069 :: is_defined_var :: var_is_introduced;
var 1..10: INT____00070 :: is_defined_var :: var_is_introduced;
var 1..4: nv____00001;
array [1..4] of var 1..10: x :: output_array([1..4]);
constraint array_bool_or([BOOL____00005, BOOL____00004, BOOL____00003, BOOL____00002], BOOL____00006) :: defines_var(BOOL____00006);
constraint array_bool_or([BOOL____00011, BOOL____00010, BOOL____00009, BOOL____00008], BOOL____00012) :: defines_var(BOOL____00012);
constraint array_bool_or([BOOL____00017, BOOL____00016, BOOL____00015, BOOL____00014], BOOL____00018) :: defines_var(BOOL____00018);
constraint array_bool_or([BOOL____00023, BOOL____00022, BOOL____00021, BOOL____00020], BOOL____00024) :: defines_var(BOOL____00024);
constraint array_bool_or([BOOL____00029, BOOL____00028, BOOL____00027, BOOL____00026], BOOL____00030) :: defines_var(BOOL____00030);
constraint array_bool_or([BOOL____00035, BOOL____00034, BOOL____00033, BOOL____00032], BOOL____00036) :: defines_var(BOOL____00036);
constraint array_bool_or([BOOL____00041, BOOL____00040, BOOL____00039, BOOL____00038], BOOL____00042) :: defines_var(BOOL____00042);
constraint array_bool_or([BOOL____00047, BOOL____00046, BOOL____00045, BOOL____00044], BOOL____00048) :: defines_var(BOOL____00048);
constraint array_bool_or([BOOL____00053, BOOL____00052, BOOL____00051, BOOL____00050], BOOL____00054) :: defines_var(BOOL____00054);
constraint array_bool_or([BOOL____00059, BOOL____00058, BOOL____00057, BOOL____00056], BOOL____00060) :: defines_var(BOOL____00060);
constraint bool2int(BOOL____00006, INT____00007) :: defines_var(INT____00007);
constraint bool2int(BOOL____00012, INT____00013) :: defines_var(INT____00013);
constraint bool2int(BOOL____00018, INT____00019) :: defines_var(INT____00019);
constraint bool2int(BOOL____00024, INT____00025) :: defines_var(INT____00025);
constraint bool2int(BOOL____00030, INT____00031) :: defines_var(INT____00031);
constraint bool2int(BOOL____00036, INT____00037) :: defines_var(INT____00037);
constraint bool2int(BOOL____00042, INT____00043) :: defines_var(INT____00043);
constraint bool2int(BOOL____00048, INT____00049) :: defines_var(INT____00049);
constraint bool2int(BOOL____00054, INT____00055) :: defines_var(INT____00055);
constraint bool2int(BOOL____00060, INT____00061) :: defines_var(INT____00061);
constraint int_eq_reif(x[1], 1, BOOL____00002) :: defines_var(BOOL____00002);
constraint int_eq_reif(x[1], 2, BOOL____00008) :: defines_var(BOOL____00008);
constraint int_eq_reif(x[1], 3, BOOL____00014) :: defines_var(BOOL____00014);
constraint int_eq_reif(x[1], 4, BOOL____00020) :: defines_var(BOOL____00020);
constraint int_eq_reif(x[1], 5, BOOL____00026) :: defines_var(BOOL____00026);
constraint int_eq_reif(x[1], 6, BOOL____00032) :: defines_var(BOOL____00032);
constraint int_eq_reif(x[1], 7, BOOL____00038) :: defines_var(BOOL____00038);
constraint int_eq_reif(x[1], 8, BOOL____00044) :: defines_var(BOOL____00044);
constraint int_eq_reif(x[1], 9, BOOL____00050) :: defines_var(BOOL____00050);
constraint int_eq_reif(x[1], 10, BOOL____00056) :: defines_var(BOOL____00056);
constraint int_eq_reif(x[2], 1, BOOL____00003) :: defines_var(BOOL____00003);
constraint int_eq_reif(x[2], 2, BOOL____00009) :: defines_var(BOOL____00009);
constraint int_eq_reif(x[2], 3, BOOL____00015) :: defines_var(BOOL____00015);
constraint int_eq_reif(x[2], 4, BOOL____00021) :: defines_var(BOOL____00021);
constraint int_eq_reif(x[2], 5, BOOL____00027) :: defines_var(BOOL____00027);
constraint int_eq_reif(x[2], 6, BOOL____00033) :: defines_var(BOOL____00033);
constraint int_eq_reif(x[2], 7, BOOL____00039) :: defines_var(BOOL____00039);
constraint int_eq_reif(x[2], 8, BOOL____00045) :: defines_var(BOOL____00045);
constraint int_eq_reif(x[2], 9, BOOL____00051) :: defines_var(BOOL____00051);
constraint int_eq_reif(x[2], 10, BOOL____00057) :: defines_var(BOOL____00057);
constraint int_eq_reif(x[3], 1, BOOL____00004) :: defines_var(BOOL____00004);
constraint int_eq_reif(x[3], 2, BOOL____00010) :: defines_var(BOOL____00010);
constraint int_eq_reif(x[3], 3, BOOL____00016) :: defines_var(BOOL____00016);
constraint int_eq_reif(x[3], 4, BOOL____00022) :: defines_var(BOOL____00022);
constraint int_eq_reif(x[3], 5, BOOL____00028) :: defines_var(BOOL____00028);
constraint int_eq_reif(x[3], 6, BOOL____00034) :: defines_var(BOOL____00034);
constraint int_eq_reif(x[3], 7, BOOL____00040) :: defines_var(BOOL____00040);
constraint int_eq_reif(x[3], 8, BOOL____00046) :: defines_var(BOOL____00046);
constraint int_eq_reif(x[3], 9, BOOL____00052) :: defines_var(BOOL____00052);
constraint int_eq_reif(x[3], 10, BOOL____00058) :: defines_var(BOOL____00058);
constraint int_eq_reif(x[4], 1, BOOL____00005) :: defines_var(BOOL____00005);
constraint int_eq_reif(x[4], 2, BOOL____00011) :: defines_var(BOOL____00011);
constraint int_eq_reif(x[4], 3, BOOL____00017) :: defines_var(BOOL____00017);
constraint int_eq_reif(x[4], 4, BOOL____00023) :: defines_var(BOOL____00023);
constraint int_eq_reif(x[4], 5, BOOL____00029) :: defines_var(BOOL____00029);
constraint int_eq_reif(x[4], 6, BOOL____00035) :: defines_var(BOOL____00035);
constraint int_eq_reif(x[4], 7, BOOL____00041) :: defines_var(BOOL____00041);
constraint int_eq_reif(x[4], 8, BOOL____00047) :: defines_var(BOOL____00047);
constraint int_eq_reif(x[4], 9, BOOL____00053) :: defines_var(BOOL____00053);
constraint int_eq_reif(x[4], 10, BOOL____00059) :: defines_var(BOOL____00059);
constraint int_lin_eq([1, -1, -1], [INT____00066, INT____00070, nv____00001], -1);
constraint int_lin_eq([-1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [nv____00001, INT____00007, INT____00013, INT____00019, INT____00025, INT____00031, INT____00037, INT____00043, INT____00049, INT____00055, INT____00061], 0);
constraint int_max(x[1], x[1], INT____00063) :: defines_var(INT____00063);
constraint int_max(x[2], INT____00063, INT____00064) :: defines_var(INT____00064);
constraint int_max(x[3], INT____00064, INT____00065) :: defines_var(INT____00065);
constraint int_max(x[4], INT____00065, INT____00066) :: defines_var(INT____00066);
constraint int_min(x[1], x[1], INT____00067) :: defines_var(INT____00067);
constraint int_min(x[2], INT____00067, INT____00068) :: defines_var(INT____00068);
constraint int_min(x[3], INT____00068, INT____00069) :: defines_var(INT____00069);
constraint int_min(x[4], INT____00069, INT____00070) :: defines_var(INT____00070);
solve satisfy;
