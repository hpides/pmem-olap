predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..24] of int: problem = [1, 2, 3, 4, 5, 0, 6, 0, 7, 0, 8, 0, 9, 10, 11, 12, 13, 14, 15, 0, 0, 0, 16, 0];
array [1..30] of int: segments = [1, 2, 3, 4, 5, 0, 9, 10, 11, 12, 13, 14, 1, 6, 9, 15, 0, 0, 3, 7, 11, 0, 0, 0, 5, 8, 13, 16, 0, 0];
array [1..9] of int: words3 = [4, 15, 7, 18, 21, 14, 20, 15, 16];
array [1..20] of int: words4 = [6, 9, 22, 5, 6, 15, 21, 18, 12, 15, 19, 20, 13, 5, 19, 19, 21, 14, 9, 20];
array [1..20] of int: words5 = [2, 1, 11, 5, 18, 6, 15, 18, 21, 13, 7, 18, 5, 5, 14, 19, 21, 16, 5, 18];
array [1..24] of int: words6 = [16, 18, 15, 12, 15, 7, 22, 1, 14, 9, 19, 8, 23, 15, 14, 4, 5, 18, 25, 5, 12, 12, 15, 23];
var bool: BOOL____00001 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00002 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00003 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00004 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00005 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00006 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00008 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00009 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00010 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00011 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00013 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00014 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00015 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00017 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00018 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00019 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00020 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00022 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00023 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00024 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00025 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00026 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00027 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00029 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00030 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00031 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00033 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00034 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00035 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00036 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00038 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00039 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00040 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00042 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00043 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00044 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00046 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00047 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00048 :: is_defined_var :: var_is_introduced;
array [1..17] of var 1..26: L :: output_array([0..16]);
constraint array_bool_and([BOOL____00011, BOOL____00010, BOOL____00009, BOOL____00008], false);
constraint array_bool_and([BOOL____00040, BOOL____00039, BOOL____00038, BOOL____00013], false);
constraint array_bool_and([BOOL____00044, BOOL____00043, BOOL____00042, BOOL____00017], false);
constraint array_bool_and([BOOL____00048, BOOL____00035, BOOL____00047, BOOL____00046], false);
constraint array_bool_and([BOOL____00011, BOOL____00015, BOOL____00003, BOOL____00014, BOOL____00013], false);
constraint array_bool_and([BOOL____00011, BOOL____00020, BOOL____00019, BOOL____00018, BOOL____00017], false);
constraint array_bool_and([BOOL____00027, BOOL____00026, BOOL____00031, BOOL____00030, BOOL____00029], false);
constraint array_bool_and([BOOL____00006, BOOL____00005, BOOL____00004, BOOL____00003, BOOL____00002, BOOL____00001], false);
constraint array_bool_and([BOOL____00027, BOOL____00026, BOOL____00025, BOOL____00024, BOOL____00023, BOOL____00022], false);
constraint array_bool_and([BOOL____00027, BOOL____00026, BOOL____00036, BOOL____00035, BOOL____00034, BOOL____00033], false);
constraint int_eq(L[1], 1);
constraint int_eq_reif(L[1], L[15], BOOL____00006) :: defines_var(BOOL____00006);
constraint int_eq_reif(L[1], L[17], BOOL____00048) :: defines_var(BOOL____00048);
constraint int_eq_reif(L[2], L[4], BOOL____00013) :: defines_var(BOOL____00013);
constraint int_eq_reif(L[2], L[6], BOOL____00017) :: defines_var(BOOL____00017);
constraint int_eq_reif(L[2], L[10], BOOL____00001) :: defines_var(BOOL____00001);
constraint int_eq_reif(L[3], L[7], BOOL____00008) :: defines_var(BOOL____00008);
constraint int_eq_reif(L[3], L[8], BOOL____00014) :: defines_var(BOOL____00014);
constraint int_eq_reif(L[3], L[9], BOOL____00018) :: defines_var(BOOL____00018);
constraint int_eq_reif(L[3], L[11], BOOL____00002) :: defines_var(BOOL____00002);
constraint int_eq_reif(L[4], L[6], BOOL____00046) :: defines_var(BOOL____00046);
constraint int_eq_reif(L[4], L[10], BOOL____00009) :: defines_var(BOOL____00009);
constraint int_eq_reif(L[4], L[12], BOOL____00003) :: defines_var(BOOL____00003);
constraint int_eq_reif(L[4], L[14], BOOL____00019) :: defines_var(BOOL____00019);
constraint int_eq_reif(L[5], L[1], BOOL____00015) :: defines_var(BOOL____00015);
constraint int_eq_reif(L[5], L[13], BOOL____00004) :: defines_var(BOOL____00004);
constraint int_eq_reif(L[5], L[16], BOOL____00010) :: defines_var(BOOL____00010);
constraint int_eq_reif(L[5], L[17], BOOL____00020) :: defines_var(BOOL____00020);
constraint int_eq_reif(L[6], L[1], BOOL____00011) :: defines_var(BOOL____00011);
constraint int_eq_reif(L[6], L[14], BOOL____00005) :: defines_var(BOOL____00005);
constraint int_eq_reif(L[7], L[8], BOOL____00038) :: defines_var(BOOL____00038);
constraint int_eq_reif(L[7], L[9], BOOL____00042) :: defines_var(BOOL____00042);
constraint int_eq_reif(L[8], L[9], BOOL____00047) :: defines_var(BOOL____00047);
constraint int_eq_reif(L[10], L[2], BOOL____00022) :: defines_var(BOOL____00022);
constraint int_eq_reif(L[10], L[4], BOOL____00029) :: defines_var(BOOL____00029);
constraint int_eq_reif(L[10], L[6], BOOL____00033) :: defines_var(BOOL____00033);
constraint int_eq_reif(L[10], L[12], BOOL____00039) :: defines_var(BOOL____00039);
constraint int_eq_reif(L[10], L[14], BOOL____00043) :: defines_var(BOOL____00043);
constraint int_eq_reif(L[11], L[7], BOOL____00023) :: defines_var(BOOL____00023);
constraint int_eq_reif(L[11], L[8], BOOL____00030) :: defines_var(BOOL____00030);
constraint int_eq_reif(L[11], L[9], BOOL____00034) :: defines_var(BOOL____00034);
constraint int_eq_reif(L[12], L[10], BOOL____00024) :: defines_var(BOOL____00024);
constraint int_eq_reif(L[12], L[14], BOOL____00035) :: defines_var(BOOL____00035);
constraint int_eq_reif(L[13], L[1], BOOL____00031) :: defines_var(BOOL____00031);
constraint int_eq_reif(L[13], L[16], BOOL____00025) :: defines_var(BOOL____00025);
constraint int_eq_reif(L[13], L[17], BOOL____00036) :: defines_var(BOOL____00036);
constraint int_eq_reif(L[14], L[1], BOOL____00026) :: defines_var(BOOL____00026);
constraint int_eq_reif(L[15], L[1], BOOL____00027) :: defines_var(BOOL____00027);
constraint int_eq_reif(L[16], L[1], BOOL____00040) :: defines_var(BOOL____00040);
constraint int_eq_reif(L[16], L[17], BOOL____00044) :: defines_var(BOOL____00044);
constraint table_int([L[4], L[8], L[12]], words3);
constraint table_int([L[2], L[7], L[10], L[16]], words4);
constraint table_int([L[6], L[9], L[14], L[17]], words4);
constraint table_int([L[2], L[3], L[4], L[5], L[6]], words5);
constraint table_int([L[10], L[11], L[12], L[13], L[14], L[15]], words6);
solve  :: int_search(L, first_fail, indomain_min, complete) satisfy;
