predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var 2..4: adams;
var 2..3: amanda;
var 1..3: brookes;
var 1..3: cooper;
var 2..5: darling;
var 2..4: hillary;
var 1..5: jane;
var 2..5: kate;
var 3..4: miller;
array [1..5] of var 1..5: last_names :: output_array([1..5]) = [brookes, adams, darling, cooper, miller];
var 2..4: sylvia;
array [1..5] of var 1..5: first_names :: output_array([1..5]) = [jane, sylvia, hillary, kate, amanda];
constraint all_different_int(first_names);
constraint all_different_int(last_names);
constraint int_lt(adams, miller);
constraint int_lt(amanda, hillary);
constraint int_lt(amanda, kate);
constraint int_lt(brookes, hillary);
constraint int_lt(cooper, adams);
constraint int_lt(hillary, darling);
constraint int_lt(sylvia, adams);
constraint int_ne(jane, brookes);
solve satisfy;
