predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..225] of int: triangle = [75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 95, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 47, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 35, 87, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 4, 82, 47, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 1, 23, 75, 3, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88, 2, 77, 73, 7, 63, 67, 0, 0, 0, 0, 0, 0, 0, 0, 99, 65, 4, 28, 6, 16, 70, 92, 0, 0, 0, 0, 0, 0, 0, 41, 41, 26, 56, 83, 40, 80, 70, 33, 0, 0, 0, 0, 0, 0, 41, 48, 72, 33, 47, 32, 37, 16, 94, 29, 0, 0, 0, 0, 0, 53, 71, 44, 65, 25, 43, 91, 52, 97, 51, 14, 0, 0, 0, 0, 70, 11, 33, 28, 77, 73, 17, 78, 39, 68, 17, 57, 0, 0, 0, 91, 71, 52, 38, 17, 14, 91, 43, 58, 50, 27, 29, 48, 0, 0, 63, 66, 4, 68, 89, 53, 67, 30, 73, 16, 69, 87, 40, 31, 0, 4, 62, 98, 27, 23, 9, 70, 98, 73, 93, 38, 53, 60, 4, 23];
var 16..30: INT____00001 :: is_defined_var :: var_is_introduced;
var 1..99: INT____00002 :: is_defined_var :: var_is_introduced;
var 1..99: INT____00003 :: is_defined_var :: var_is_introduced;
var 31..45: INT____00004 :: is_defined_var :: var_is_introduced;
var 1..99: INT____00005 :: is_defined_var :: var_is_introduced;
var 46..60: INT____00006 :: is_defined_var :: var_is_introduced;
var 1..99: INT____00007 :: is_defined_var :: var_is_introduced;
var 61..75: INT____00008 :: is_defined_var :: var_is_introduced;
var 1..99: INT____00009 :: is_defined_var :: var_is_introduced;
var 76..90: INT____00010 :: is_defined_var :: var_is_introduced;
var 1..99: INT____00011 :: is_defined_var :: var_is_introduced;
var 91..105: INT____00012 :: is_defined_var :: var_is_introduced;
var 1..99: INT____00013 :: is_defined_var :: var_is_introduced;
var 106..120: INT____00014 :: is_defined_var :: var_is_introduced;
var 1..99: INT____00015 :: is_defined_var :: var_is_introduced;
var 121..135: INT____00016 :: is_defined_var :: var_is_introduced;
var 1..99: INT____00017 :: is_defined_var :: var_is_introduced;
var 136..150: INT____00018 :: is_defined_var :: var_is_introduced;
var 1..99: INT____00019 :: is_defined_var :: var_is_introduced;
var 151..165: INT____00020 :: is_defined_var :: var_is_introduced;
var 1..99: INT____00021 :: is_defined_var :: var_is_introduced;
var 166..180: INT____00022 :: is_defined_var :: var_is_introduced;
var 1..99: INT____00023 :: is_defined_var :: var_is_introduced;
var 181..195: INT____00024 :: is_defined_var :: var_is_introduced;
var 1..99: INT____00025 :: is_defined_var :: var_is_introduced;
var 196..210: INT____00026 :: is_defined_var :: var_is_introduced;
var 1..99: INT____00027 :: is_defined_var :: var_is_introduced;
var 211..225: INT____00028 :: is_defined_var :: var_is_introduced;
var 1..99: INT____00029 :: is_defined_var :: var_is_introduced;
var 15..1485: INT____00030 :: is_defined_var :: var_is_introduced;
var 15..1485: total :: output_var = INT____00030;
array [1..15] of var 1..15: x :: output_array([1..15]);
constraint array_int_element(INT____00001, triangle, INT____00002) :: defines_var(INT____00002);
constraint array_int_element(INT____00004, triangle, INT____00005) :: defines_var(INT____00005);
constraint array_int_element(INT____00006, triangle, INT____00007) :: defines_var(INT____00007);
constraint array_int_element(INT____00008, triangle, INT____00009) :: defines_var(INT____00009);
constraint array_int_element(INT____00010, triangle, INT____00011) :: defines_var(INT____00011);
constraint array_int_element(INT____00012, triangle, INT____00013) :: defines_var(INT____00013);
constraint array_int_element(INT____00014, triangle, INT____00015) :: defines_var(INT____00015);
constraint array_int_element(INT____00016, triangle, INT____00017) :: defines_var(INT____00017);
constraint array_int_element(INT____00018, triangle, INT____00019) :: defines_var(INT____00019);
constraint array_int_element(INT____00020, triangle, INT____00021) :: defines_var(INT____00021);
constraint array_int_element(INT____00022, triangle, INT____00023) :: defines_var(INT____00023);
constraint array_int_element(INT____00024, triangle, INT____00025) :: defines_var(INT____00025);
constraint array_int_element(INT____00026, triangle, INT____00027) :: defines_var(INT____00027);
constraint array_int_element(INT____00028, triangle, INT____00029) :: defines_var(INT____00029);
constraint array_int_element(x[1], triangle, INT____00003) :: defines_var(INT____00003);
constraint int_eq(x[1], 1);
constraint int_lin_eq([-1, 1], [INT____00001, x[2]], -15) :: defines_var(INT____00001) :: domain;
constraint int_lin_eq([-1, 1], [INT____00004, x[3]], -30) :: defines_var(INT____00004) :: domain;
constraint int_lin_eq([-1, 1], [INT____00006, x[4]], -45) :: defines_var(INT____00006) :: domain;
constraint int_lin_eq([-1, 1], [INT____00008, x[5]], -60) :: defines_var(INT____00008) :: domain;
constraint int_lin_eq([-1, 1], [INT____00010, x[6]], -75) :: defines_var(INT____00010) :: domain;
constraint int_lin_eq([-1, 1], [INT____00012, x[7]], -90) :: defines_var(INT____00012) :: domain;
constraint int_lin_eq([-1, 1], [INT____00014, x[8]], -105) :: defines_var(INT____00014) :: domain;
constraint int_lin_eq([-1, 1], [INT____00016, x[9]], -120) :: defines_var(INT____00016) :: domain;
constraint int_lin_eq([-1, 1], [INT____00018, x[10]], -135) :: defines_var(INT____00018) :: domain;
constraint int_lin_eq([-1, 1], [INT____00020, x[11]], -150) :: defines_var(INT____00020) :: domain;
constraint int_lin_eq([-1, 1], [INT____00022, x[12]], -165) :: defines_var(INT____00022) :: domain;
constraint int_lin_eq([-1, 1], [INT____00024, x[13]], -180) :: defines_var(INT____00024) :: domain;
constraint int_lin_eq([-1, 1], [INT____00026, x[14]], -195) :: defines_var(INT____00026) :: domain;
constraint int_lin_eq([-1, 1], [INT____00028, x[15]], -210) :: defines_var(INT____00028) :: domain;
constraint int_lin_eq([-1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [INT____00030, INT____00002, INT____00003, INT____00005, INT____00007, INT____00009, INT____00011, INT____00013, INT____00015, INT____00017, INT____00019, INT____00021, INT____00023, INT____00025, INT____00027, INT____00029], 0) :: defines_var(INT____00030);
constraint int_lin_le([-1, 1], [x[1], x[2]], 1);
constraint int_lin_le([-1, 1], [x[2], x[3]], 1);
constraint int_lin_le([-1, 1], [x[3], x[4]], 1);
constraint int_lin_le([-1, 1], [x[4], x[5]], 1);
constraint int_lin_le([-1, 1], [x[5], x[6]], 1);
constraint int_lin_le([-1, 1], [x[6], x[7]], 1);
constraint int_lin_le([-1, 1], [x[7], x[8]], 1);
constraint int_lin_le([-1, 1], [x[8], x[9]], 1);
constraint int_lin_le([-1, 1], [x[9], x[10]], 1);
constraint int_lin_le([-1, 1], [x[10], x[11]], 1);
constraint int_lin_le([-1, 1], [x[11], x[12]], 1);
constraint int_lin_le([-1, 1], [x[12], x[13]], 1);
constraint int_lin_le([-1, 1], [x[13], x[14]], 1);
constraint int_lin_le([-1, 1], [x[14], x[15]], 1);
constraint int_lin_le([1, -1], [x[1], x[2]], 0);
constraint int_lin_le([1, -1], [x[2], x[3]], 0);
constraint int_lin_le([1, -1], [x[3], x[4]], 0);
constraint int_lin_le([1, -1], [x[4], x[5]], 0);
constraint int_lin_le([1, -1], [x[5], x[6]], 0);
constraint int_lin_le([1, -1], [x[6], x[7]], 0);
constraint int_lin_le([1, -1], [x[7], x[8]], 0);
constraint int_lin_le([1, -1], [x[8], x[9]], 0);
constraint int_lin_le([1, -1], [x[9], x[10]], 0);
constraint int_lin_le([1, -1], [x[10], x[11]], 0);
constraint int_lin_le([1, -1], [x[11], x[12]], 0);
constraint int_lin_le([1, -1], [x[12], x[13]], 0);
constraint int_lin_le([1, -1], [x[13], x[14]], 0);
constraint int_lin_le([1, -1], [x[14], x[15]], 0);
solve  :: int_search(x, max_regret, indomain_split, complete) maximize INT____00030;
