predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var bool: BOOL____00001 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00002 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00003 :: is_defined_var :: var_is_introduced;
var 0..9999: INT____00008 :: is_defined_var :: var_is_introduced;
array [1..4] of var 0..9: x;
array [1..10] of var 0..4: x_gcc;
var 0..9999: x_num :: output_var = INT____00008;
array [1..4] of var 0..9: y :: output_array([1..4]);
array [1..10] of var 0..4: y_gcc;
var 999..9999: y_num;
array [1..4] of var 0..9: y_rev;
var 0..9998: y_rev_num;
constraint array_bool_and([BOOL____00003, BOOL____00002, BOOL____00001], false);
constraint global_cardinality(x, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], x_gcc);
constraint global_cardinality(y, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], y_gcc);
constraint int_eq(y_gcc[1], x_gcc[1]);
constraint int_eq(y_gcc[2], x_gcc[2]);
constraint int_eq(y_gcc[3], x_gcc[3]);
constraint int_eq(y_gcc[4], x_gcc[4]);
constraint int_eq(y_gcc[5], x_gcc[5]);
constraint int_eq(y_gcc[6], x_gcc[6]);
constraint int_eq(y_gcc[7], x_gcc[7]);
constraint int_eq(y_gcc[8], x_gcc[8]);
constraint int_eq(y_gcc[9], x_gcc[9]);
constraint int_eq(y_gcc[10], x_gcc[10]);
constraint int_eq(y_rev[1], y[4]);
constraint int_eq(y_rev[2], y[3]);
constraint int_eq(y_rev[3], y[2]);
constraint int_eq(y_rev[4], y[1]);
constraint int_eq_reif(y[2], y[1], BOOL____00001) :: defines_var(BOOL____00001);
constraint int_eq_reif(y[3], y[2], BOOL____00002) :: defines_var(BOOL____00002);
constraint int_eq_reif(y[4], y[3], BOOL____00003) :: defines_var(BOOL____00003);
constraint int_le(y[2], y[1]);
constraint int_le(y[3], y[2]);
constraint int_le(y[4], y[3]);
constraint int_lin_eq([-1, 1000, 100, 10, 1], [INT____00008, x[1], x[2], x[3], x[4]], 0);
constraint int_lin_eq([-1, 1000, 100, 10, 1], [y_num, y[1], y[2], y[3], y[4]], 0);
constraint int_lin_eq([-1, 1000, 100, 10, 1], [y_rev_num, y_rev[1], y_rev[2], y_rev[3], y_rev[4]], 0);
constraint int_lt(y_rev_num, y_num);
constraint int_plus(INT____00008, y_rev_num, y_num) :: defines_var(INT____00008);
solve  :: int_search([x[1], x[2], x[3], x[4], y[1], y[2], y[3], y[4]], first_fail, indomain_max, complete) satisfy;
