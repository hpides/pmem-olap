predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var bool: BOOL____00045 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00046 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00047 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00048 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00049 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00050 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00051 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00052 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00053 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00054 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00055 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00056 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00057 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00058 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00059 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00060 :: is_defined_var :: var_is_introduced;
var 1..16: INT____00001 :: is_defined_var :: var_is_introduced;
var 1..16: INT____00003 :: is_defined_var :: var_is_introduced;
var 1..16: INT____00005 :: is_defined_var :: var_is_introduced;
var 1..16: INT____00007 :: is_defined_var :: var_is_introduced;
var 1..16: INT____00009 :: is_defined_var :: var_is_introduced;
var 1..16: INT____00011 :: is_defined_var :: var_is_introduced;
var 1..16: INT____00013 :: is_defined_var :: var_is_introduced;
var 1..16: INT____00015 :: is_defined_var :: var_is_introduced;
var 1..16: INT____00017 :: is_defined_var :: var_is_introduced;
var 1..16: INT____00019 :: is_defined_var :: var_is_introduced;
var 1..16: INT____00021 :: is_defined_var :: var_is_introduced;
var 1..16: INT____00023 :: is_defined_var :: var_is_introduced;
var 1..16: INT____00025 :: is_defined_var :: var_is_introduced;
var 1..16: INT____00027 :: is_defined_var :: var_is_introduced;
var 1..16: INT____00029 :: is_defined_var :: var_is_introduced;
var 1..16: INT____00031 :: is_defined_var :: var_is_introduced;
array [1..4] of var 0..3: qgDiagonal :: output_array([0..3]);
array [1..16] of var 0..3: quasiGroup :: output_array([0..3, 0..3]);
constraint all_different_int([quasiGroup[1], quasiGroup[2], quasiGroup[3], quasiGroup[4]]);
constraint all_different_int([quasiGroup[1], quasiGroup[5], quasiGroup[9], quasiGroup[13]]);
constraint all_different_int([quasiGroup[2], quasiGroup[6], quasiGroup[10], quasiGroup[14]]);
constraint all_different_int([quasiGroup[3], quasiGroup[7], quasiGroup[11], quasiGroup[15]]);
constraint all_different_int([quasiGroup[4], quasiGroup[8], quasiGroup[12], quasiGroup[16]]);
constraint all_different_int([quasiGroup[5], quasiGroup[6], quasiGroup[7], quasiGroup[8]]);
constraint all_different_int([quasiGroup[9], quasiGroup[10], quasiGroup[11], quasiGroup[12]]);
constraint all_different_int([quasiGroup[13], quasiGroup[14], quasiGroup[15], quasiGroup[16]]);
constraint all_different_int(qgDiagonal);
constraint array_var_int_element(INT____00001, quasiGroup, 0);
constraint array_var_int_element(INT____00003, quasiGroup, 0);
constraint array_var_int_element(INT____00005, quasiGroup, 0);
constraint array_var_int_element(INT____00007, quasiGroup, 0);
constraint array_var_int_element(INT____00009, quasiGroup, 1);
constraint array_var_int_element(INT____00011, quasiGroup, 1);
constraint array_var_int_element(INT____00013, quasiGroup, 1);
constraint array_var_int_element(INT____00015, quasiGroup, 1);
constraint array_var_int_element(INT____00017, quasiGroup, 2);
constraint array_var_int_element(INT____00019, quasiGroup, 2);
constraint array_var_int_element(INT____00021, quasiGroup, 2);
constraint array_var_int_element(INT____00023, quasiGroup, 2);
constraint array_var_int_element(INT____00025, quasiGroup, 3);
constraint array_var_int_element(INT____00027, quasiGroup, 3);
constraint array_var_int_element(INT____00029, quasiGroup, 3);
constraint array_var_int_element(INT____00031, quasiGroup, 3);
constraint bool_le(BOOL____00045, BOOL____00045);
constraint bool_le(BOOL____00046, BOOL____00047);
constraint bool_le(BOOL____00047, BOOL____00046);
constraint bool_le(BOOL____00048, BOOL____00049);
constraint bool_le(BOOL____00049, BOOL____00048);
constraint bool_le(BOOL____00050, BOOL____00051);
constraint bool_le(BOOL____00051, BOOL____00050);
constraint bool_le(BOOL____00052, BOOL____00052);
constraint bool_le(BOOL____00053, BOOL____00054);
constraint bool_le(BOOL____00054, BOOL____00053);
constraint bool_le(BOOL____00055, BOOL____00056);
constraint bool_le(BOOL____00056, BOOL____00055);
constraint bool_le(BOOL____00057, BOOL____00057);
constraint bool_le(BOOL____00058, BOOL____00059);
constraint bool_le(BOOL____00059, BOOL____00058);
constraint bool_le(BOOL____00060, BOOL____00060);
constraint int_eq(qgDiagonal[1], quasiGroup[1]);
constraint int_eq(qgDiagonal[2], quasiGroup[6]);
constraint int_eq(qgDiagonal[3], quasiGroup[11]);
constraint int_eq(qgDiagonal[4], quasiGroup[16]);
constraint int_eq_reif(quasiGroup[1], 0, BOOL____00045) :: defines_var(BOOL____00045);
constraint int_eq_reif(quasiGroup[1], 1, BOOL____00046) :: defines_var(BOOL____00046);
constraint int_eq_reif(quasiGroup[1], 2, BOOL____00048) :: defines_var(BOOL____00048);
constraint int_eq_reif(quasiGroup[1], 3, BOOL____00050) :: defines_var(BOOL____00050);
constraint int_eq_reif(quasiGroup[6], 0, BOOL____00047) :: defines_var(BOOL____00047);
constraint int_eq_reif(quasiGroup[6], 1, BOOL____00052) :: defines_var(BOOL____00052);
constraint int_eq_reif(quasiGroup[6], 2, BOOL____00053) :: defines_var(BOOL____00053);
constraint int_eq_reif(quasiGroup[6], 3, BOOL____00055) :: defines_var(BOOL____00055);
constraint int_eq_reif(quasiGroup[11], 0, BOOL____00049) :: defines_var(BOOL____00049);
constraint int_eq_reif(quasiGroup[11], 1, BOOL____00054) :: defines_var(BOOL____00054);
constraint int_eq_reif(quasiGroup[11], 2, BOOL____00057) :: defines_var(BOOL____00057);
constraint int_eq_reif(quasiGroup[11], 3, BOOL____00058) :: defines_var(BOOL____00058);
constraint int_eq_reif(quasiGroup[16], 0, BOOL____00051) :: defines_var(BOOL____00051);
constraint int_eq_reif(quasiGroup[16], 1, BOOL____00056) :: defines_var(BOOL____00056);
constraint int_eq_reif(quasiGroup[16], 2, BOOL____00059) :: defines_var(BOOL____00059);
constraint int_eq_reif(quasiGroup[16], 3, BOOL____00060) :: defines_var(BOOL____00060);
constraint int_lin_eq([-1, 5], [INT____00001, quasiGroup[1]], -1) :: defines_var(INT____00001) :: domain;
constraint int_lin_eq([-1, 5], [INT____00011, quasiGroup[6]], -1) :: defines_var(INT____00011) :: domain;
constraint int_lin_eq([-1, 5], [INT____00021, quasiGroup[11]], -1) :: defines_var(INT____00021) :: domain;
constraint int_lin_eq([-1, 5], [INT____00031, quasiGroup[16]], -1) :: defines_var(INT____00031) :: domain;
constraint int_lin_eq([-1, 1, 4], [INT____00009, quasiGroup[2], quasiGroup[5]], -1) :: defines_var(INT____00009) :: domain;
constraint int_lin_eq([-1, 1, 4], [INT____00017, quasiGroup[3], quasiGroup[9]], -1) :: defines_var(INT____00017) :: domain;
constraint int_lin_eq([-1, 1, 4], [INT____00019, quasiGroup[7], quasiGroup[10]], -1) :: defines_var(INT____00019) :: domain;
constraint int_lin_eq([-1, 1, 4], [INT____00025, quasiGroup[4], quasiGroup[13]], -1) :: defines_var(INT____00025) :: domain;
constraint int_lin_eq([-1, 1, 4], [INT____00027, quasiGroup[8], quasiGroup[14]], -1) :: defines_var(INT____00027) :: domain;
constraint int_lin_eq([-1, 1, 4], [INT____00029, quasiGroup[12], quasiGroup[15]], -1) :: defines_var(INT____00029) :: domain;
constraint int_lin_eq([-1, 4, 1], [INT____00003, quasiGroup[2], quasiGroup[5]], -1) :: defines_var(INT____00003) :: domain;
constraint int_lin_eq([-1, 4, 1], [INT____00005, quasiGroup[3], quasiGroup[9]], -1) :: defines_var(INT____00005) :: domain;
constraint int_lin_eq([-1, 4, 1], [INT____00007, quasiGroup[4], quasiGroup[13]], -1) :: defines_var(INT____00007) :: domain;
constraint int_lin_eq([-1, 4, 1], [INT____00013, quasiGroup[7], quasiGroup[10]], -1) :: defines_var(INT____00013) :: domain;
constraint int_lin_eq([-1, 4, 1], [INT____00015, quasiGroup[8], quasiGroup[14]], -1) :: defines_var(INT____00015) :: domain;
constraint int_lin_eq([-1, 4, 1], [INT____00023, quasiGroup[12], quasiGroup[15]], -1) :: defines_var(INT____00023) :: domain;
constraint int_lin_le([-1], [quasiGroup[16]], -1);
constraint int_ne_reif(quasiGroup[2], quasiGroup[5], true);
constraint int_ne_reif(quasiGroup[3], quasiGroup[9], true);
constraint int_ne_reif(quasiGroup[4], quasiGroup[13], true);
constraint int_ne_reif(quasiGroup[5], quasiGroup[2], true);
constraint int_ne_reif(quasiGroup[7], quasiGroup[10], true);
constraint int_ne_reif(quasiGroup[8], quasiGroup[14], true);
constraint int_ne_reif(quasiGroup[9], quasiGroup[3], true);
constraint int_ne_reif(quasiGroup[10], quasiGroup[7], true);
constraint int_ne_reif(quasiGroup[12], quasiGroup[15], true);
constraint int_ne_reif(quasiGroup[13], quasiGroup[4], true);
constraint int_ne_reif(quasiGroup[14], quasiGroup[8], true);
constraint int_ne_reif(quasiGroup[15], quasiGroup[12], true);
solve  :: int_search([quasiGroup[1], quasiGroup[2], quasiGroup[3], quasiGroup[4], quasiGroup[5], quasiGroup[6], quasiGroup[7], quasiGroup[8], quasiGroup[9], quasiGroup[10], quasiGroup[11], quasiGroup[12], quasiGroup[13], quasiGroup[14], quasiGroup[15], quasiGroup[16]], first_fail, indomain, complete) satisfy;
