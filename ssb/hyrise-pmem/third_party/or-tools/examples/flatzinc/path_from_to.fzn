var bool: BOOL____00009 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00010 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00011 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00012 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00013 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00014 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00015 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00016 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00017 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00018 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00019 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00020 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00021 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00022 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00023 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00024 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00025 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00026 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00027 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00028 :: is_defined_var :: var_is_introduced;
var 1..25: INT____00001 :: is_defined_var :: var_is_introduced;
var 1..1: INT____00002 :: is_defined_var :: var_is_introduced;
var 1..25: INT____00003 :: is_defined_var :: var_is_introduced;
var 1..1: INT____00004 :: is_defined_var :: var_is_introduced;
var 1..25: INT____00005 :: is_defined_var :: var_is_introduced;
var 1..1: INT____00006 :: is_defined_var :: var_is_introduced;
var 1..25: INT____00007 :: is_defined_var :: var_is_introduced;
var 1..1: INT____00008 :: is_defined_var :: var_is_introduced;
array [1..25] of var 0..1: g :: output_array([1..5, 1..5]);
array [1..5] of var 1..5: paths :: output_array([1..5]);
var 1..5: from = paths[1];
var 3..3: to = 3;
constraint array_bool_and([BOOL____00009, BOOL____00015], BOOL____00024) :: defines_var(BOOL____00024);
constraint array_bool_and([BOOL____00010, BOOL____00017], BOOL____00025) :: defines_var(BOOL____00025);
constraint array_bool_and([BOOL____00011, BOOL____00019], BOOL____00026) :: defines_var(BOOL____00026);
constraint array_bool_and([BOOL____00012, BOOL____00021], BOOL____00027) :: defines_var(BOOL____00027);
constraint array_bool_and([BOOL____00013, BOOL____00023], BOOL____00028) :: defines_var(BOOL____00028);
constraint array_bool_or([BOOL____00012, BOOL____00011, BOOL____00010, BOOL____00009], BOOL____00022) :: defines_var(BOOL____00022);
constraint array_bool_or([BOOL____00013, BOOL____00011, BOOL____00010, BOOL____00009], BOOL____00020) :: defines_var(BOOL____00020);
constraint array_bool_or([BOOL____00013, BOOL____00012, BOOL____00010, BOOL____00009], BOOL____00018) :: defines_var(BOOL____00018);
constraint array_bool_or([BOOL____00013, BOOL____00012, BOOL____00011, BOOL____00009], BOOL____00016) :: defines_var(BOOL____00016);
constraint array_bool_or([BOOL____00013, BOOL____00012, BOOL____00011, BOOL____00010], BOOL____00014) :: defines_var(BOOL____00014);
constraint array_bool_or([BOOL____00028, BOOL____00027, BOOL____00026, BOOL____00024, BOOL____00025], true);
constraint array_var_int_element(INT____00001, g, INT____00002) :: defines_var(INT____00002);
constraint array_var_int_element(INT____00003, g, INT____00004) :: defines_var(INT____00004);
constraint array_var_int_element(INT____00005, g, INT____00006) :: defines_var(INT____00006);
constraint array_var_int_element(INT____00007, g, INT____00008) :: defines_var(INT____00008);
constraint bool_eq_reif(BOOL____00014, false, BOOL____00015) :: defines_var(BOOL____00015);
constraint bool_eq_reif(BOOL____00016, false, BOOL____00017) :: defines_var(BOOL____00017);
constraint bool_eq_reif(BOOL____00018, false, BOOL____00019) :: defines_var(BOOL____00019);
constraint bool_eq_reif(BOOL____00020, false, BOOL____00021) :: defines_var(BOOL____00021);
constraint bool_eq_reif(BOOL____00022, false, BOOL____00023) :: defines_var(BOOL____00023);
constraint int_eq(0, g[1]);
constraint int_eq(0, g[2]);
constraint int_eq(0, g[3]);
constraint int_eq(0, g[4]);
constraint int_eq(0, g[5]);
constraint int_eq(0, g[6]);
constraint int_eq(0, g[7]);
constraint int_eq(0, g[8]);
constraint int_eq(0, g[9]);
constraint int_eq(0, g[10]);
constraint int_eq(0, g[11]);
constraint int_eq(0, g[12]);
constraint int_eq(0, g[13]);
constraint int_eq(0, g[14]);
constraint int_eq(0, g[16]);
constraint int_eq(0, g[17]);
constraint int_eq(0, g[18]);
constraint int_eq(0, g[19]);
constraint int_eq(0, g[21]);
constraint int_eq(0, g[24]);
constraint int_eq(0, g[25]);
constraint int_eq(1, g[15]);
constraint int_eq(1, g[20]);
constraint int_eq(1, g[22]);
constraint int_eq(1, g[23]);
constraint int_eq(paths[1], 4);
constraint int_eq_reif(paths[1], 3, BOOL____00009) :: defines_var(BOOL____00009);
constraint int_eq_reif(paths[2], 3, BOOL____00010) :: defines_var(BOOL____00010);
constraint int_eq_reif(paths[3], 3, BOOL____00011) :: defines_var(BOOL____00011);
constraint int_eq_reif(paths[4], 3, BOOL____00012) :: defines_var(BOOL____00012);
constraint int_eq_reif(paths[5], 3, BOOL____00013) :: defines_var(BOOL____00013);
constraint int_lin_eq([-1, 5, 1], [INT____00001, paths[1], paths[2]], 5) :: defines_var(INT____00001) :: domain;
constraint int_lin_eq([-1, 5, 1], [INT____00003, paths[2], paths[3]], 5) :: defines_var(INT____00003) :: domain;
constraint int_lin_eq([-1, 5, 1], [INT____00005, paths[3], paths[4]], 5) :: defines_var(INT____00005) :: domain;
constraint int_lin_eq([-1, 5, 1], [INT____00007, paths[4], paths[5]], 5) :: defines_var(INT____00007) :: domain;
solve satisfy;
