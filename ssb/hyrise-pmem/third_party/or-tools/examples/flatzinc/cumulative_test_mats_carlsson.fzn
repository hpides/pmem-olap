predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var bool: BOOL____00001 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00004 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00007 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00010 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00013 :: is_defined_var :: var_is_introduced;
var 2..3: D1 :: output_var;
var 2..2: D2 :: output_var;
var 1..4: H1 :: output_var;
var 2..3: H2 :: output_var;
var 0..1: INT____00002 :: is_defined_var :: var_is_introduced;
var 0..4: INT____00003 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00005 :: is_defined_var :: var_is_introduced;
var 0..4: INT____00006 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00008 :: is_defined_var :: var_is_introduced;
var 0..4: INT____00009 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00011 :: is_defined_var :: var_is_introduced;
var 0..4: INT____00012 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00014 :: is_defined_var :: var_is_introduced;
var 0..3: INT____00015 :: is_defined_var :: var_is_introduced;
var 1..2: O1 :: output_var;
var 3..3: O2 :: output_var;
constraint bool2int(BOOL____00001, INT____00002) :: defines_var(INT____00002);
constraint bool2int(BOOL____00004, INT____00005) :: defines_var(INT____00005);
constraint bool2int(BOOL____00007, INT____00008) :: defines_var(INT____00008);
constraint bool2int(BOOL____00010, INT____00011) :: defines_var(INT____00011);
constraint bool2int(BOOL____00013, INT____00014) :: defines_var(INT____00014);
constraint int_le_reif(O1, 1, BOOL____00001) :: defines_var(BOOL____00001);
constraint int_lin_le([1, 1], [H2, INT____00006], 4);
constraint int_lin_le([1, 1], [H2, INT____00009], 4);
constraint int_lin_le([1, 1], [INT____00012, INT____00015], 4);
constraint int_lin_le_reif([-1, -1], [D1, O1], -6, BOOL____00010) :: defines_var(BOOL____00010);
constraint int_lin_le_reif([-1, -1], [D1, O1], -5, BOOL____00007) :: defines_var(BOOL____00007);
constraint int_lin_le_reif([-1, -1], [D1, O1], -4, BOOL____00004) :: defines_var(BOOL____00004);
constraint int_lin_le_reif([-1, -1], [D2, O2], -6, BOOL____00013) :: defines_var(BOOL____00013);
constraint int_times(INT____00002, H1, INT____00003) :: defines_var(INT____00003);
constraint int_times(INT____00005, H1, INT____00006) :: defines_var(INT____00006);
constraint int_times(INT____00008, H1, INT____00009) :: defines_var(INT____00009);
constraint int_times(INT____00011, H1, INT____00012) :: defines_var(INT____00012);
constraint int_times(INT____00014, H2, INT____00015) :: defines_var(INT____00015);
solve  :: int_search([O1, D1, H1, O2, D2, H2], first_fail, indomain, complete) satisfy;
