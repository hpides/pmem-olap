predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..81] of int: hints = [7, 2, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 3, 8, 0, 0, 0, 0, 0, 0, 4, 0, 0, 5, 0, 0, 0, 0, 3, 0, 0, 0, 9, 0, 0, 0, 0, 1, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 5, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 9];
array [1..81] of var 1..9: x :: output_array([1..9, 1..9]);
constraint all_different_int([x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9]]) :: domain;
constraint all_different_int([x[1], x[2], x[3], x[10], x[11], x[12], x[19], x[20], x[21]]) :: domain;
constraint all_different_int([x[1], x[10], x[19], x[28], x[37], x[46], x[55], x[64], x[73]]) :: domain;
constraint all_different_int([x[2], x[11], x[20], x[29], x[38], x[47], x[56], x[65], x[74]]) :: domain;
constraint all_different_int([x[3], x[12], x[21], x[30], x[39], x[48], x[57], x[66], x[75]]) :: domain;
constraint all_different_int([x[4], x[5], x[6], x[13], x[14], x[15], x[22], x[23], x[24]]) :: domain;
constraint all_different_int([x[4], x[13], x[22], x[31], x[40], x[49], x[58], x[67], x[76]]) :: domain;
constraint all_different_int([x[5], x[14], x[23], x[32], x[41], x[50], x[59], x[68], x[77]]) :: domain;
constraint all_different_int([x[6], x[15], x[24], x[33], x[42], x[51], x[60], x[69], x[78]]) :: domain;
constraint all_different_int([x[7], x[8], x[9], x[16], x[17], x[18], x[25], x[26], x[27]]) :: domain;
constraint all_different_int([x[7], x[16], x[25], x[34], x[43], x[52], x[61], x[70], x[79]]) :: domain;
constraint all_different_int([x[8], x[17], x[26], x[35], x[44], x[53], x[62], x[71], x[80]]) :: domain;
constraint all_different_int([x[9], x[18], x[27], x[36], x[45], x[54], x[63], x[72], x[81]]) :: domain;
constraint all_different_int([x[10], x[11], x[12], x[13], x[14], x[15], x[16], x[17], x[18]]) :: domain;
constraint all_different_int([x[19], x[20], x[21], x[22], x[23], x[24], x[25], x[26], x[27]]) :: domain;
constraint all_different_int([x[28], x[29], x[30], x[31], x[32], x[33], x[34], x[35], x[36]]) :: domain;
constraint all_different_int([x[28], x[29], x[30], x[37], x[38], x[39], x[46], x[47], x[48]]) :: domain;
constraint all_different_int([x[31], x[32], x[33], x[40], x[41], x[42], x[49], x[50], x[51]]) :: domain;
constraint all_different_int([x[34], x[35], x[36], x[43], x[44], x[45], x[52], x[53], x[54]]) :: domain;
constraint all_different_int([x[37], x[38], x[39], x[40], x[41], x[42], x[43], x[44], x[45]]) :: domain;
constraint all_different_int([x[46], x[47], x[48], x[49], x[50], x[51], x[52], x[53], x[54]]) :: domain;
constraint all_different_int([x[55], x[56], x[57], x[58], x[59], x[60], x[61], x[62], x[63]]) :: domain;
constraint all_different_int([x[55], x[56], x[57], x[64], x[65], x[66], x[73], x[74], x[75]]) :: domain;
constraint all_different_int([x[58], x[59], x[60], x[67], x[68], x[69], x[76], x[77], x[78]]) :: domain;
constraint all_different_int([x[61], x[62], x[63], x[70], x[71], x[72], x[79], x[80], x[81]]) :: domain;
constraint all_different_int([x[64], x[65], x[66], x[67], x[68], x[69], x[70], x[71], x[72]]) :: domain;
constraint all_different_int([x[73], x[74], x[75], x[76], x[77], x[78], x[79], x[80], x[81]]) :: domain;
constraint int_eq(x[1], 7);
constraint int_eq(x[2], 2);
constraint int_eq(x[11], 5);
constraint int_eq(x[15], 9);
constraint int_eq(x[23], 3);
constraint int_eq(x[24], 8);
constraint int_eq(x[31], 4);
constraint int_eq(x[34], 5);
constraint int_eq(x[39], 3);
constraint int_eq(x[43], 9);
constraint int_eq(x[48], 1);
constraint int_eq(x[51], 3);
constraint int_eq(x[58], 2);
constraint int_eq(x[59], 5);
constraint int_eq(x[67], 6);
constraint int_eq(x[71], 3);
constraint int_eq(x[80], 1);
constraint int_eq(x[81], 9);
solve  :: int_search([x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10], x[11], x[12], x[13], x[14], x[15], x[16], x[17], x[18], x[19], x[20], x[21], x[22], x[23], x[24], x[25], x[26], x[27], x[28], x[29], x[30], x[31], x[32], x[33], x[34], x[35], x[36], x[37], x[38], x[39], x[40], x[41], x[42], x[43], x[44], x[45], x[46], x[47], x[48], x[49], x[50], x[51], x[52], x[53], x[54], x[55], x[56], x[57], x[58], x[59], x[60], x[61], x[62], x[63], x[64], x[65], x[66], x[67], x[68], x[69], x[70], x[71], x[72], x[73], x[74], x[75], x[76], x[77], x[78], x[79], x[80], x[81]], first_fail, indomain_min, complete) satisfy;
