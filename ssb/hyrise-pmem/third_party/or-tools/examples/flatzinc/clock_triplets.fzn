predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var 3..21: triplet_sum :: output_var;
array [1..12] of var 1..12: x :: output_array([0..11]);
constraint all_different_int(x);
constraint int_eq(x[1], 12);
constraint int_lin_le([-1, 1, 1, 1], [triplet_sum, x[1], x[2], x[3]], 0);
constraint int_lin_le([-1, 1, 1, 1], [triplet_sum, x[1], x[2], x[12]], 0);
constraint int_lin_le([-1, 1, 1, 1], [triplet_sum, x[1], x[11], x[12]], 0);
constraint int_lin_le([-1, 1, 1, 1], [triplet_sum, x[2], x[3], x[4]], 0);
constraint int_lin_le([-1, 1, 1, 1], [triplet_sum, x[3], x[4], x[5]], 0);
constraint int_lin_le([-1, 1, 1, 1], [triplet_sum, x[4], x[5], x[6]], 0);
constraint int_lin_le([-1, 1, 1, 1], [triplet_sum, x[5], x[6], x[7]], 0);
constraint int_lin_le([-1, 1, 1, 1], [triplet_sum, x[6], x[7], x[8]], 0);
constraint int_lin_le([-1, 1, 1, 1], [triplet_sum, x[7], x[8], x[9]], 0);
constraint int_lin_le([-1, 1, 1, 1], [triplet_sum, x[8], x[9], x[10]], 0);
constraint int_lin_le([-1, 1, 1, 1], [triplet_sum, x[9], x[10], x[11]], 0);
constraint int_lin_le([-1, 1, 1, 1], [triplet_sum, x[10], x[11], x[12]], 0);
constraint int_lt(x[12], x[2]);
solve satisfy;
