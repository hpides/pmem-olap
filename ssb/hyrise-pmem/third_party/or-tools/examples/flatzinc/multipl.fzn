predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var 0..9: X1;
var 0..9: X10;
var 0..9: X11;
var 0..9: X12;
var 0..9: X13;
var 0..9: X14;
var 0..9: X15;
var 0..9: X16;
var 0..9: X17;
var 0..9: X18;
var 0..9: X19;
var 0..9: X2;
var 0..9: X20;
var 0..9: X3;
var 0..9: X4;
var 0..9: X5;
var 0..9: X6;
var 0..9: X7;
var 0..9: X8;
var 0..9: X9;
array [1..20] of var 0..9: LD :: output_array([1..20]) = [X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20];
var 0..999: Y;
var 0..999: Z1;
var 0..999: INT____00005 :: var_is_introduced = Z1;
var 0..999: Z2;
var 0..999: INT____00006 :: var_is_introduced = Z2;
var 0..999: Z3;
var 0..999: INT____00007 :: var_is_introduced = Z3;
constraint global_cardinality(LD, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]);
constraint int_lin_eq([-1, 100, 10, 1], [Y, X1, X2, X3], 0);
constraint int_lin_eq([-1, 100, 10, 1], [Z1, X7, X8, X9], 0);
constraint int_lin_eq([-1, 100, 10, 1], [Z2, X10, X11, X12], 0);
constraint int_lin_eq([-1, 100, 10, 1], [Z3, X13, X14, X15], 0);
constraint int_lin_eq([1000, 100, 10, 10000, 1000, 100, -10000, -1000, -100, -10, -1, 100, 10, 1], [X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X7, X8, X9], 0);
constraint int_times(X4, Y, INT____00007);
constraint int_times(X5, Y, INT____00006);
constraint int_times(X6, Y, INT____00005);
solve  :: int_search(LD, input_order, indomain_max, complete) satisfy;
