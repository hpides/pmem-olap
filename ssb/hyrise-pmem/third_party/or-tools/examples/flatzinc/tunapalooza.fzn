predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..4] of int: rock_band = [1, 2, 3, 4];
var bool: BOOL____00001 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00003 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00005 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00007 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00008 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00009 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00010 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00011 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00012 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00002 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00004 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00006 :: is_defined_var :: var_is_introduced;
var 1..4: T_shirt_vendor;
var 1..4: carnival_games;
var 1..4: country;
var 1..4: grunge;
var 1..4: information_booth;
var 1..4: mosh_pit;
var 1..4: reggae;
array [1..4] of var 1..4: rendevouz :: output_array([1..4]) = [carnival_games, information_booth, mosh_pit, T_shirt_vendor];
var 1..4: speed_metal;
array [1..4] of var 1..4: genre :: output_array([1..4]) = [country, grunge, reggae, speed_metal];
constraint all_different_int(genre);
constraint all_different_int(rendevouz);
constraint array_bool_and([BOOL____00007, BOOL____00008], BOOL____00011) :: defines_var(BOOL____00011);
constraint array_bool_and([BOOL____00009, BOOL____00010], BOOL____00012) :: defines_var(BOOL____00012);
constraint array_bool_or([BOOL____00011, BOOL____00012], true);
constraint bool2int(BOOL____00001, INT____00002) :: defines_var(INT____00002);
constraint bool2int(BOOL____00003, INT____00004) :: defines_var(INT____00004);
constraint bool2int(BOOL____00005, INT____00006) :: defines_var(INT____00006);
constraint int_eq_reif(1, grunge, BOOL____00001) :: defines_var(BOOL____00001);
constraint int_eq_reif(country, 3, BOOL____00007) :: defines_var(BOOL____00007);
constraint int_eq_reif(country, mosh_pit, BOOL____00010) :: defines_var(BOOL____00010);
constraint int_eq_reif(speed_metal, 3, BOOL____00009) :: defines_var(BOOL____00009);
constraint int_eq_reif(speed_metal, mosh_pit, BOOL____00008) :: defines_var(BOOL____00008);
constraint int_lin_eq([1, 1, 1], [INT____00002, INT____00004, INT____00006], 2);
constraint int_ne(1, carnival_games);
constraint int_ne(2, country);
constraint int_ne(2, grunge);
constraint int_ne(reggae, 2);
constraint int_ne(reggae, T_shirt_vendor);
constraint int_ne(reggae, information_booth);
constraint int_ne_reif(T_shirt_vendor, 4, BOOL____00005) :: defines_var(BOOL____00005);
constraint int_ne_reif(information_booth, 3, BOOL____00003) :: defines_var(BOOL____00003);
solve satisfy;
