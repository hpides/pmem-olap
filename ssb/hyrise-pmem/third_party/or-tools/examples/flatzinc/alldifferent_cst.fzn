predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..4] of int: cst = [0, 1, 0, 4];
var 2..10: INT____00001 :: is_defined_var :: var_is_introduced;
var 5..13: INT____00002 :: is_defined_var :: var_is_introduced;
array [1..4] of var 1..9: x :: output_array([1..4]);
constraint all_different_int([x[1], INT____00001, x[3], INT____00002]);
constraint int_eq(1, x[2]);
constraint int_eq(3, x[4]);
constraint int_eq(5, x[1]);
constraint int_eq(9, x[3]);
constraint int_lin_eq([-1, 1], [INT____00001, x[2]], -1) :: defines_var(INT____00001);
constraint int_lin_eq([-1, 1], [INT____00002, x[4]], -4) :: defines_var(INT____00002);
solve satisfy;
