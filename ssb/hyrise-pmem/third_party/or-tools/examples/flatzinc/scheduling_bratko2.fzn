predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..5] of int: Ds = [5, 7, 10, 2, 9];
array [1..5] of int: Rs = [1, 1, 1, 1, 1];
array [1..8] of int: prec = [1, 2, 1, 4, 2, 3, 4, 5];
var 1..1000: Capacity :: output_var;
var 10..50: End :: output_var;
array [1..5] of var 0..30: Ss :: output_array([1..5]);
constraint int_lin_le([-1, 1], [End, Ss[1]], -5);
constraint int_lin_le([-1, 1], [End, Ss[2]], -7);
constraint int_lin_le([-1, 1], [End, Ss[3]], -10);
constraint int_lin_le([-1, 1], [End, Ss[4]], -2);
constraint int_lin_le([-1, 1], [End, Ss[5]], -9);
constraint int_lin_le([1, -1], [Ss[1], Ss[2]], -5);
constraint int_lin_le([1, -1], [Ss[1], Ss[4]], -5);
constraint int_lin_le([1, -1], [Ss[2], Ss[3]], -7);
constraint int_lin_le([1, -1], [Ss[4], Ss[5]], -2);
constraint var_cumulative(Ss, Ds, Rs, Capacity);
solve minimize End;
