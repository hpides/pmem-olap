predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..12] of int: men = [3, 4, 1, 6, 1, 2, 3, 4, 5, 4, 1, 6];
array [1..12] of int: women = [1, 2, 3, 4, 5, 6, 5, 2, 3, 2, 5, 2];
var bool: BOOL____00003 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00007 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00011 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00015 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00019 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00023 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00027 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00031 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00035 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00039 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00043 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00047 :: is_defined_var :: var_is_introduced;
var 1..11: INT____00001 :: is_defined_var :: var_is_introduced;
var 1..6: INT____00002 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00004 :: is_defined_var :: var_is_introduced;
var 2..12: INT____00005 :: is_defined_var :: var_is_introduced;
var 1..6: INT____00006 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00008 :: is_defined_var :: var_is_introduced;
var 1..11: INT____00009 :: is_defined_var :: var_is_introduced;
var 1..6: INT____00010 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00012 :: is_defined_var :: var_is_introduced;
var 2..12: INT____00013 :: is_defined_var :: var_is_introduced;
var 1..6: INT____00014 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00016 :: is_defined_var :: var_is_introduced;
var 1..11: INT____00017 :: is_defined_var :: var_is_introduced;
var 1..6: INT____00018 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00020 :: is_defined_var :: var_is_introduced;
var 2..12: INT____00021 :: is_defined_var :: var_is_introduced;
var 1..6: INT____00022 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00024 :: is_defined_var :: var_is_introduced;
var 1..11: INT____00025 :: is_defined_var :: var_is_introduced;
var 1..6: INT____00026 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00028 :: is_defined_var :: var_is_introduced;
var 2..12: INT____00029 :: is_defined_var :: var_is_introduced;
var 1..6: INT____00030 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00032 :: is_defined_var :: var_is_introduced;
var 1..11: INT____00033 :: is_defined_var :: var_is_introduced;
var 1..6: INT____00034 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00036 :: is_defined_var :: var_is_introduced;
var 2..12: INT____00037 :: is_defined_var :: var_is_introduced;
var 1..6: INT____00038 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00040 :: is_defined_var :: var_is_introduced;
var 1..11: INT____00041 :: is_defined_var :: var_is_introduced;
var 1..6: INT____00042 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00044 :: is_defined_var :: var_is_introduced;
var 2..12: INT____00045 :: is_defined_var :: var_is_introduced;
var 1..6: INT____00046 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00048 :: is_defined_var :: var_is_introduced;
var 0..12: INT____00049 :: is_defined_var :: var_is_introduced;
array [1..6] of var 0..2: num_matches :: output_array([1..6]);
var 0..12: total :: output_var = INT____00049;
array [1..6] of var 1..6: x :: output_array([1..6]);
constraint all_different_int(x);
constraint array_int_element(INT____00001, men, INT____00002) :: defines_var(INT____00002);
constraint array_int_element(INT____00005, men, INT____00006) :: defines_var(INT____00006);
constraint array_int_element(INT____00009, men, INT____00010) :: defines_var(INT____00010);
constraint array_int_element(INT____00013, men, INT____00014) :: defines_var(INT____00014);
constraint array_int_element(INT____00017, men, INT____00018) :: defines_var(INT____00018);
constraint array_int_element(INT____00021, men, INT____00022) :: defines_var(INT____00022);
constraint array_int_element(INT____00025, men, INT____00026) :: defines_var(INT____00026);
constraint array_int_element(INT____00029, men, INT____00030) :: defines_var(INT____00030);
constraint array_int_element(INT____00033, men, INT____00034) :: defines_var(INT____00034);
constraint array_int_element(INT____00037, men, INT____00038) :: defines_var(INT____00038);
constraint array_int_element(INT____00041, men, INT____00042) :: defines_var(INT____00042);
constraint array_int_element(INT____00045, men, INT____00046) :: defines_var(INT____00046);
constraint bool2int(BOOL____00003, INT____00004) :: defines_var(INT____00004);
constraint bool2int(BOOL____00007, INT____00008) :: defines_var(INT____00008);
constraint bool2int(BOOL____00011, INT____00012) :: defines_var(INT____00012);
constraint bool2int(BOOL____00015, INT____00016) :: defines_var(INT____00016);
constraint bool2int(BOOL____00019, INT____00020) :: defines_var(INT____00020);
constraint bool2int(BOOL____00023, INT____00024) :: defines_var(INT____00024);
constraint bool2int(BOOL____00027, INT____00028) :: defines_var(INT____00028);
constraint bool2int(BOOL____00031, INT____00032) :: defines_var(INT____00032);
constraint bool2int(BOOL____00035, INT____00036) :: defines_var(INT____00036);
constraint bool2int(BOOL____00039, INT____00040) :: defines_var(INT____00040);
constraint bool2int(BOOL____00043, INT____00044) :: defines_var(INT____00044);
constraint bool2int(BOOL____00047, INT____00048) :: defines_var(INT____00048);
constraint int_eq_reif(1, INT____00002, BOOL____00003) :: defines_var(BOOL____00003);
constraint int_eq_reif(2, INT____00006, BOOL____00007) :: defines_var(BOOL____00007);
constraint int_eq_reif(2, INT____00030, BOOL____00031) :: defines_var(BOOL____00031);
constraint int_eq_reif(2, INT____00038, BOOL____00039) :: defines_var(BOOL____00039);
constraint int_eq_reif(2, INT____00046, BOOL____00047) :: defines_var(BOOL____00047);
constraint int_eq_reif(3, INT____00010, BOOL____00011) :: defines_var(BOOL____00011);
constraint int_eq_reif(3, INT____00034, BOOL____00035) :: defines_var(BOOL____00035);
constraint int_eq_reif(4, INT____00014, BOOL____00015) :: defines_var(BOOL____00015);
constraint int_eq_reif(5, INT____00018, BOOL____00019) :: defines_var(BOOL____00019);
constraint int_eq_reif(5, INT____00026, BOOL____00027) :: defines_var(BOOL____00027);
constraint int_eq_reif(5, INT____00042, BOOL____00043) :: defines_var(BOOL____00043);
constraint int_eq_reif(6, INT____00022, BOOL____00023) :: defines_var(BOOL____00023);
constraint int_le(1, num_matches[1]);
constraint int_le(1, num_matches[2]);
constraint int_le(1, num_matches[3]);
constraint int_le(1, num_matches[4]);
constraint int_le(1, num_matches[5]);
constraint int_le(1, num_matches[6]);
constraint int_lin_eq([-1, 2], [INT____00001, x[1]], 1) :: defines_var(INT____00001) :: domain;
constraint int_lin_eq([-1, 2], [INT____00005, x[1]], 0) :: defines_var(INT____00005) :: domain;
constraint int_lin_eq([-1, 2], [INT____00009, x[2]], 1) :: defines_var(INT____00009) :: domain;
constraint int_lin_eq([-1, 2], [INT____00013, x[2]], 0) :: defines_var(INT____00013) :: domain;
constraint int_lin_eq([-1, 2], [INT____00017, x[3]], 1) :: defines_var(INT____00017) :: domain;
constraint int_lin_eq([-1, 2], [INT____00021, x[3]], 0) :: defines_var(INT____00021) :: domain;
constraint int_lin_eq([-1, 2], [INT____00025, x[4]], 1) :: defines_var(INT____00025) :: domain;
constraint int_lin_eq([-1, 2], [INT____00029, x[4]], 0) :: defines_var(INT____00029) :: domain;
constraint int_lin_eq([-1, 2], [INT____00033, x[5]], 1) :: defines_var(INT____00033) :: domain;
constraint int_lin_eq([-1, 2], [INT____00037, x[5]], 0) :: defines_var(INT____00037) :: domain;
constraint int_lin_eq([-1, 2], [INT____00041, x[6]], 1) :: defines_var(INT____00041) :: domain;
constraint int_lin_eq([-1, 2], [INT____00045, x[6]], 0) :: defines_var(INT____00045) :: domain;
constraint int_lin_eq([-1, -1, 1], [INT____00004, INT____00008, num_matches[1]], 0);
constraint int_lin_eq([-1, -1, 1], [INT____00012, INT____00016, num_matches[2]], 0);
constraint int_lin_eq([-1, -1, 1], [INT____00020, INT____00024, num_matches[3]], 0);
constraint int_lin_eq([-1, -1, 1], [INT____00028, INT____00032, num_matches[4]], 0);
constraint int_lin_eq([-1, -1, 1], [INT____00036, INT____00040, num_matches[5]], 0);
constraint int_lin_eq([-1, -1, 1], [INT____00044, INT____00048, num_matches[6]], 0);
constraint int_lin_eq([-1, 1, 1, 1, 1, 1, 1], [INT____00049, num_matches[1], num_matches[2], num_matches[3], num_matches[4], num_matches[5], num_matches[6]], 0) :: defines_var(INT____00049);
solve satisfy;
