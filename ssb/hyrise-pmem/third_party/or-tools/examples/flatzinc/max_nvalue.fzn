predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..10] of var 0..10: occ____00001;
var 3..3: t_max :: output_var = 3;
array [1..10] of var 1..9: variables :: output_array([1..10]);
constraint global_cardinality(variables, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], occ____00001);
constraint int_eq(variables[1], 9);
constraint int_eq(variables[2], 1);
constraint int_eq(variables[3], 7);
constraint int_eq(variables[4], 1);
constraint int_eq(variables[5], 1);
constraint int_eq(variables[6], 6);
constraint int_eq(variables[7], 7);
constraint int_eq(variables[8], 7);
constraint int_eq(variables[9], 4);
constraint int_eq(variables[10], 9);
constraint maximum_int(3, occ____00001);
solve satisfy;
