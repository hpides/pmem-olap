predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var 1..5: abandoned;
var 2..2: cigarette = 2;
var 1..5: diary;
var 1..1: harassed = 1;
var 1..5: hate = diary;
var 1..5: leave;
var 1..5: letter;
var 1..5: murder;
var 1..5: pistol;
var 1..5: promotion;
var 1..5: argue = promotion;
var 1..5: rang;
var 1..5: sacked;
array [1..5] of var 1..5: motives :: output_array([1..5]) = [1, abandoned, sacked, argue, hate];
var 1..5: umbrella = leave;
array [1..5] of var 1..5: actions :: output_array([1..5]) = [argue, umbrella, rang, 4, murder];
array [1..5] of var 1..5: objects :: output_array([1..5]) = [pistol, umbrella, 2, hate, letter];
var 4..4: walk = 4;
constraint all_different_int(actions);
constraint all_different_int(motives);
constraint all_different_int(objects);
constraint int_ne(hate, 3);
constraint int_ne(letter, 1);
constraint int_ne(letter, 3);
constraint int_ne(murder, 1);
constraint int_ne(pistol, 3);
constraint int_ne(sacked, letter);
solve satisfy;
