var bool: BOOL____00001 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00002 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00003 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00004 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00005 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00006 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00007 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00008 :: is_defined_var :: var_is_introduced;
array [1..4] of var 1..9: element_table :: output_array([1..4]);
array [1..2] of var 1..9: items :: output_array([1..2]);
constraint array_bool_or([BOOL____00004, BOOL____00003, BOOL____00002, BOOL____00001], true);
constraint array_bool_or([BOOL____00008, BOOL____00007, BOOL____00006, BOOL____00005], true);
constraint int_eq(element_table[1], 6);
constraint int_eq(element_table[2], 9);
constraint int_eq(element_table[3], 2);
constraint int_eq(element_table[4], 9);
constraint int_eq(items[1], 9);
constraint int_eq(items[2], 6);
constraint int_eq_reif(items[1], element_table[1], BOOL____00001) :: defines_var(BOOL____00001);
constraint int_eq_reif(items[1], element_table[2], BOOL____00002) :: defines_var(BOOL____00002);
constraint int_eq_reif(items[1], element_table[3], BOOL____00003) :: defines_var(BOOL____00003);
constraint int_eq_reif(items[1], element_table[4], BOOL____00004) :: defines_var(BOOL____00004);
constraint int_eq_reif(items[2], element_table[1], BOOL____00005) :: defines_var(BOOL____00005);
constraint int_eq_reif(items[2], element_table[2], BOOL____00006) :: defines_var(BOOL____00006);
constraint int_eq_reif(items[2], element_table[3], BOOL____00007) :: defines_var(BOOL____00007);
constraint int_eq_reif(items[2], element_table[4], BOOL____00008) :: defines_var(BOOL____00008);
solve satisfy;
