predicate all_different_int(array [int] of var int: x);
predicate count_eq(array [int] of var int: x, var int: y, var int: c);
predicate count_reif(array [int] of var int: x, var int: y, var int: c, var bool: b);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate global_cardinality_closed(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate global_cardinality_low_up(array [int] of var int: x, array [int] of int: cover, array [int] of int: lbound, array [int] of int: ubound);
predicate global_cardinality_low_up_closed(array [int] of var int: x, array [int] of int: cover, array [int] of int: lbound, array [int] of int: ubound);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..10] of int: labels = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
array [1..10] of int: num_labels = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
array [1..2] of int: precedences = [1, 10];
array [1..10] of int: stock = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
var 55..550: INT____00001 :: is_defined_var :: var_is_introduced;
var 55..550: objective :: output_var = INT____00001;
array [1..10] of var 1..10: prices :: output_array([1..10]);
constraint global_cardinality_low_up_closed(prices, labels, num_labels, num_labels);
constraint int_le(prices[1], prices[10]);
constraint int_lin_eq([-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [INT____00001, prices[1], prices[2], prices[3], prices[4], prices[5], prices[6], prices[7], prices[8], prices[9], prices[10]], 0) :: defines_var(INT____00001);
solve minimize INT____00001;
