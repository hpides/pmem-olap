predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var 4..24: INT____00010 :: is_defined_var :: var_is_introduced;
array [1..4] of var 1..6: pos____00001;
var 4..6: j____00008 = pos____00001[4];
var 3..6: j____00006 = pos____00001[3];
var 2..6: j____00004 = pos____00001[2];
var 1..6: j____00002 = pos____00001[1];
var 4..24: ss_sum :: output_var = INT____00010;
array [1..6] of var 1..6: x :: output_array([1..6]);
array [1..4] of var 1..6: x_s :: output_array([1..4]);
constraint array_var_int_element(pos____00001[1], x, x_s[1]);
constraint array_var_int_element(pos____00001[2], x, x_s[2]);
constraint array_var_int_element(pos____00001[3], x, x_s[3]);
constraint array_var_int_element(pos____00001[4], x, x_s[4]);
constraint int_eq(x[1], 5);
constraint int_eq(x[2], 4);
constraint int_eq(x[3], 1);
constraint int_eq(x[4], 5);
constraint int_eq(x[5], 2);
constraint int_eq(x[6], 1);
constraint int_lin_eq([-1, 1, 1, 1, 1], [INT____00010, x_s[1], x_s[2], x_s[3], x_s[4]], 0) :: defines_var(INT____00010);
constraint int_lt(pos____00001[1], pos____00001[2]);
constraint int_lt(pos____00001[2], pos____00001[3]);
constraint int_lt(pos____00001[3], pos____00001[4]);
solve minimize INT____00010;
