predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..29] of int: segment_sums = [3, 15, 22, 4, 16, 15, 25, 17, 9, 8, 20, 17, 6, 14, 17, 13, 20, 12, 27, 6, 20, 6, 10, 14, 8, 16, 15, 13, 17];
array [1..81] of int: segments = [1, 1, 2, 2, 2, 3, 4, 5, 6, 7, 7, 8, 8, 3, 3, 4, 5, 6, 7, 7, 9, 9, 3, 10, 11, 11, 6, 13, 14, 14, 9, 15, 10, 11, 12, 6, 13, 16, 16, 17, 15, 10, 12, 12, 18, 19, 16, 20, 17, 15, 21, 22, 22, 18, 19, 20, 20, 17, 23, 21, 21, 24, 24, 19, 25, 26, 23, 23, 27, 27, 24, 24, 19, 25, 26, 23, 28, 28, 28, 29, 29];
array [1..81] of var 1..9: x :: output_array([1..9, 1..9]);
constraint all_different_int([x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9]]);
constraint all_different_int([x[1], x[2], x[3], x[10], x[11], x[12], x[19], x[20], x[21]]);
constraint all_different_int([x[1], x[10], x[19], x[28], x[37], x[46], x[55], x[64], x[73]]);
constraint all_different_int([x[2], x[11], x[20], x[29], x[38], x[47], x[56], x[65], x[74]]);
constraint all_different_int([x[3], x[12], x[21], x[30], x[39], x[48], x[57], x[66], x[75]]);
constraint all_different_int([x[4], x[5], x[6], x[13], x[14], x[15], x[22], x[23], x[24]]);
constraint all_different_int([x[4], x[13], x[22], x[31], x[40], x[49], x[58], x[67], x[76]]);
constraint all_different_int([x[5], x[14], x[23], x[32], x[41], x[50], x[59], x[68], x[77]]);
constraint all_different_int([x[6], x[15], x[24], x[33], x[42], x[51], x[60], x[69], x[78]]);
constraint all_different_int([x[7], x[8], x[9], x[16], x[17], x[18], x[25], x[26], x[27]]);
constraint all_different_int([x[7], x[16], x[25], x[34], x[43], x[52], x[61], x[70], x[79]]);
constraint all_different_int([x[8], x[17], x[26], x[35], x[44], x[53], x[62], x[71], x[80]]);
constraint all_different_int([x[9], x[18], x[27], x[36], x[45], x[54], x[63], x[72], x[81]]);
constraint all_different_int([x[10], x[11], x[12], x[13], x[14], x[15], x[16], x[17], x[18]]);
constraint all_different_int([x[19], x[20], x[21], x[22], x[23], x[24], x[25], x[26], x[27]]);
constraint all_different_int([x[28], x[29], x[30], x[31], x[32], x[33], x[34], x[35], x[36]]);
constraint all_different_int([x[28], x[29], x[30], x[37], x[38], x[39], x[46], x[47], x[48]]);
constraint all_different_int([x[31], x[32], x[33], x[40], x[41], x[42], x[49], x[50], x[51]]);
constraint all_different_int([x[34], x[35], x[36], x[43], x[44], x[45], x[52], x[53], x[54]]);
constraint all_different_int([x[37], x[38], x[39], x[40], x[41], x[42], x[43], x[44], x[45]]);
constraint all_different_int([x[46], x[47], x[48], x[49], x[50], x[51], x[52], x[53], x[54]]);
constraint all_different_int([x[55], x[56], x[57], x[58], x[59], x[60], x[61], x[62], x[63]]);
constraint all_different_int([x[55], x[56], x[57], x[64], x[65], x[66], x[73], x[74], x[75]]);
constraint all_different_int([x[58], x[59], x[60], x[67], x[68], x[69], x[76], x[77], x[78]]);
constraint all_different_int([x[61], x[62], x[63], x[70], x[71], x[72], x[79], x[80], x[81]]);
constraint all_different_int([x[64], x[65], x[66], x[67], x[68], x[69], x[70], x[71], x[72]]);
constraint all_different_int([x[73], x[74], x[75], x[76], x[77], x[78], x[79], x[80], x[81]]);
constraint int_lin_eq([-1, -1], [x[1], x[2]], -3);
constraint int_lin_eq([-1, -1], [x[7], x[16]], -4);
constraint int_lin_eq([-1, -1], [x[8], x[17]], -16);
constraint int_lin_eq([-1, -1], [x[12], x[13]], -17);
constraint int_lin_eq([-1, -1], [x[28], x[37]], -6);
constraint int_lin_eq([-1, -1], [x[29], x[30]], -14);
constraint int_lin_eq([-1, -1], [x[45], x[54]], -12);
constraint int_lin_eq([-1, -1], [x[52], x[53]], -6);
constraint int_lin_eq([-1, -1], [x[65], x[74]], -8);
constraint int_lin_eq([-1, -1], [x[66], x[75]], -16);
constraint int_lin_eq([-1, -1], [x[69], x[70]], -15);
constraint int_lin_eq([-1, -1], [x[80], x[81]], -17);
constraint int_lin_eq([-1, -1, -1], [x[3], x[4], x[5]], -15);
constraint int_lin_eq([-1, -1, -1], [x[21], x[22], x[31]], -9);
constraint int_lin_eq([-1, -1, -1], [x[24], x[33], x[42]], -8);
constraint int_lin_eq([-1, -1, -1], [x[25], x[26], x[34]], -20);
constraint int_lin_eq([-1, -1, -1], [x[32], x[41], x[50]], -17);
constraint int_lin_eq([-1, -1, -1], [x[35], x[43], x[44]], -17);
constraint int_lin_eq([-1, -1, -1], [x[38], x[39], x[47]], -13);
constraint int_lin_eq([-1, -1, -1], [x[40], x[49], x[58]], -20);
constraint int_lin_eq([-1, -1, -1], [x[48], x[56], x[57]], -6);
constraint int_lin_eq([-1, -1, -1], [x[51], x[60], x[61]], -20);
constraint int_lin_eq([-1, -1, -1], [x[77], x[78], x[79]], -13);
constraint int_lin_eq([-1, -1, -1, -1], [x[6], x[14], x[15], x[23]], -22);
constraint int_lin_eq([-1, -1, -1, -1], [x[9], x[18], x[27], x[36]], -15);
constraint int_lin_eq([-1, -1, -1, -1], [x[10], x[11], x[19], x[20]], -25);
constraint int_lin_eq([-1, -1, -1, -1], [x[46], x[55], x[64], x[73]], -27);
constraint int_lin_eq([-1, -1, -1, -1], [x[59], x[67], x[68], x[76]], -10);
constraint int_lin_eq([-1, -1, -1, -1], [x[62], x[63], x[71], x[72]], -14);
solve  :: int_search([x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10], x[11], x[12], x[13], x[14], x[15], x[16], x[17], x[18], x[19], x[20], x[21], x[22], x[23], x[24], x[25], x[26], x[27], x[28], x[29], x[30], x[31], x[32], x[33], x[34], x[35], x[36], x[37], x[38], x[39], x[40], x[41], x[42], x[43], x[44], x[45], x[46], x[47], x[48], x[49], x[50], x[51], x[52], x[53], x[54], x[55], x[56], x[57], x[58], x[59], x[60], x[61], x[62], x[63], x[64], x[65], x[66], x[67], x[68], x[69], x[70], x[71], x[72], x[73], x[74], x[75], x[76], x[77], x[78], x[79], x[80], x[81]], first_fail, indomain_min, complete) satisfy;
