predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..30] of int: placed = [2, 1, 1, 2, 3, 7, 2, 5, 6, 2, 7, 4, 3, 2, 7, 3, 6, 1, 4, 1, 4, 4, 7, 5, 5, 2, 2, 5, 6, 6];
array [1..49] of int: streams = [1, 1, 2, 2, 2, 2, 2, 1, 1, 2, 3, 3, 3, 2, 1, 4, 1, 3, 3, 5, 5, 4, 4, 3, 1, 3, 5, 5, 4, 6, 6, 6, 7, 7, 5, 6, 4, 6, 4, 5, 5, 7, 6, 6, 4, 7, 7, 7, 7];
array [1..49] of var 1..7: x :: output_array([1..7, 1..7]);
constraint all_different_int([x[1], x[2], x[3], x[4], x[5], x[6], x[7]]);
constraint all_different_int([x[1], x[2], x[8], x[9], x[15], x[17], x[25]]);
constraint all_different_int([x[1], x[8], x[15], x[22], x[29], x[36], x[43]]);
constraint all_different_int([x[2], x[9], x[16], x[23], x[30], x[37], x[44]]);
constraint all_different_int([x[3], x[4], x[5], x[6], x[7], x[10], x[14]]);
constraint all_different_int([x[3], x[10], x[17], x[24], x[31], x[38], x[45]]);
constraint all_different_int([x[4], x[11], x[18], x[25], x[32], x[39], x[46]]);
constraint all_different_int([x[5], x[12], x[19], x[26], x[33], x[40], x[47]]);
constraint all_different_int([x[6], x[13], x[20], x[27], x[34], x[41], x[48]]);
constraint all_different_int([x[7], x[14], x[21], x[28], x[35], x[42], x[49]]);
constraint all_different_int([x[8], x[9], x[10], x[11], x[12], x[13], x[14]]);
constraint all_different_int([x[11], x[12], x[13], x[18], x[19], x[24], x[26]]);
constraint all_different_int([x[15], x[16], x[17], x[18], x[19], x[20], x[21]]);
constraint all_different_int([x[16], x[22], x[23], x[29], x[37], x[39], x[45]]);
constraint all_different_int([x[20], x[21], x[27], x[28], x[35], x[40], x[41]]);
constraint all_different_int([x[22], x[23], x[24], x[25], x[26], x[27], x[28]]);
constraint all_different_int([x[29], x[30], x[31], x[32], x[33], x[34], x[35]]);
constraint all_different_int([x[30], x[31], x[32], x[36], x[38], x[43], x[44]]);
constraint all_different_int([x[33], x[34], x[42], x[46], x[47], x[48], x[49]]);
constraint all_different_int([x[36], x[37], x[38], x[39], x[40], x[41], x[42]]);
constraint all_different_int([x[43], x[44], x[45], x[46], x[47], x[48], x[49]]);
constraint int_eq(x[8], 1);
constraint int_eq(x[10], 7);
constraint int_eq(x[12], 6);
constraint int_eq(x[14], 4);
constraint int_eq(x[16], 7);
constraint int_eq(x[20], 1);
constraint int_eq(x[22], 4);
constraint int_eq(x[28], 5);
constraint int_eq(x[30], 2);
constraint int_eq(x[34], 6);
solve satisfy;
