predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var bool: BOOL____00002 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00004 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00006 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00008 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00010 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00012 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00014 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00016 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00018 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00020 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00001 :: is_defined_var :: var_is_introduced;
var 0..4: INT____00003 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00005 :: is_defined_var :: var_is_introduced;
var 0..4: INT____00007 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00009 :: is_defined_var :: var_is_introduced;
var 0..4: INT____00011 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00013 :: is_defined_var :: var_is_introduced;
var 0..4: INT____00015 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00017 :: is_defined_var :: var_is_introduced;
var 0..4: INT____00019 :: is_defined_var :: var_is_introduced;
array [1..5] of var 1..100: x :: output_array([1..5]);
constraint array_bool_or([BOOL____00002, BOOL____00004], true);
constraint array_bool_or([BOOL____00006, BOOL____00008], true);
constraint array_bool_or([BOOL____00010, BOOL____00012], true);
constraint array_bool_or([BOOL____00014, BOOL____00016], true);
constraint array_bool_or([BOOL____00018, BOOL____00020], true);
constraint int_eq_reif(INT____00001, 0, BOOL____00002) :: defines_var(BOOL____00002);
constraint int_eq_reif(INT____00003, 0, BOOL____00004) :: defines_var(BOOL____00004);
constraint int_eq_reif(INT____00005, 0, BOOL____00006) :: defines_var(BOOL____00006);
constraint int_eq_reif(INT____00007, 0, BOOL____00008) :: defines_var(BOOL____00008);
constraint int_eq_reif(INT____00009, 0, BOOL____00010) :: defines_var(BOOL____00010);
constraint int_eq_reif(INT____00011, 0, BOOL____00012) :: defines_var(BOOL____00012);
constraint int_eq_reif(INT____00013, 0, BOOL____00014) :: defines_var(BOOL____00014);
constraint int_eq_reif(INT____00015, 0, BOOL____00016) :: defines_var(BOOL____00016);
constraint int_eq_reif(INT____00017, 0, BOOL____00018) :: defines_var(BOOL____00018);
constraint int_eq_reif(INT____00019, 0, BOOL____00020) :: defines_var(BOOL____00020);
constraint int_le(x[1], x[2]);
constraint int_le(x[2], x[3]);
constraint int_le(x[3], x[4]);
constraint int_le(x[4], x[5]);
constraint int_lin_eq([1, 1, 1, 1, 1], [x[1], x[2], x[3], x[4], x[5]], 100);
constraint int_mod(x[1], 2, INT____00001) :: defines_var(INT____00001);
constraint int_mod(x[1], 5, INT____00003) :: defines_var(INT____00003);
constraint int_mod(x[2], 2, INT____00005) :: defines_var(INT____00005);
constraint int_mod(x[2], 5, INT____00007) :: defines_var(INT____00007);
constraint int_mod(x[3], 2, INT____00009) :: defines_var(INT____00009);
constraint int_mod(x[3], 5, INT____00011) :: defines_var(INT____00011);
constraint int_mod(x[4], 2, INT____00013) :: defines_var(INT____00013);
constraint int_mod(x[4], 5, INT____00015) :: defines_var(INT____00015);
constraint int_mod(x[5], 2, INT____00017) :: defines_var(INT____00017);
constraint int_mod(x[5], 5, INT____00019) :: defines_var(INT____00019);
solve  :: int_search(x, first_fail, indomain, complete) satisfy;
