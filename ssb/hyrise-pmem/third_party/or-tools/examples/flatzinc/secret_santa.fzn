predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..12] of int: family = [1, 1, 1, 1, 2, 3, 3, 3, 3, 3, 4, 4];
var 1..4: INT____00001 :: is_defined_var :: var_is_introduced;
var 1..4: INT____00002 :: is_defined_var :: var_is_introduced;
var 1..4: INT____00003 :: is_defined_var :: var_is_introduced;
var 1..4: INT____00004 :: is_defined_var :: var_is_introduced;
var 1..4: INT____00005 :: is_defined_var :: var_is_introduced;
var 1..4: INT____00006 :: is_defined_var :: var_is_introduced;
var 1..4: INT____00007 :: is_defined_var :: var_is_introduced;
var 1..4: INT____00008 :: is_defined_var :: var_is_introduced;
var 1..4: INT____00009 :: is_defined_var :: var_is_introduced;
var 1..4: INT____00010 :: is_defined_var :: var_is_introduced;
var 1..4: INT____00011 :: is_defined_var :: var_is_introduced;
var 1..4: INT____00012 :: is_defined_var :: var_is_introduced;
array [1..12] of var 1..12: x :: output_array([1..12]);
constraint all_different_int(x);
constraint array_int_element(x[1], family, INT____00001) :: defines_var(INT____00001);
constraint array_int_element(x[2], family, INT____00002) :: defines_var(INT____00002);
constraint array_int_element(x[3], family, INT____00003) :: defines_var(INT____00003);
constraint array_int_element(x[4], family, INT____00004) :: defines_var(INT____00004);
constraint array_int_element(x[5], family, INT____00005) :: defines_var(INT____00005);
constraint array_int_element(x[6], family, INT____00006) :: defines_var(INT____00006);
constraint array_int_element(x[7], family, INT____00007) :: defines_var(INT____00007);
constraint array_int_element(x[8], family, INT____00008) :: defines_var(INT____00008);
constraint array_int_element(x[9], family, INT____00009) :: defines_var(INT____00009);
constraint array_int_element(x[10], family, INT____00010) :: defines_var(INT____00010);
constraint array_int_element(x[11], family, INT____00011) :: defines_var(INT____00011);
constraint array_int_element(x[12], family, INT____00012) :: defines_var(INT____00012);
constraint int_ne(1, INT____00001);
constraint int_ne(1, INT____00002);
constraint int_ne(1, INT____00003);
constraint int_ne(1, INT____00004);
constraint int_ne(2, INT____00005);
constraint int_ne(3, INT____00006);
constraint int_ne(3, INT____00007);
constraint int_ne(3, INT____00008);
constraint int_ne(3, INT____00009);
constraint int_ne(3, INT____00010);
constraint int_ne(4, INT____00011);
constraint int_ne(4, INT____00012);
constraint int_ne(x[1], 1);
constraint int_ne(x[2], 2);
constraint int_ne(x[3], 3);
constraint int_ne(x[4], 4);
constraint int_ne(x[5], 5);
constraint int_ne(x[6], 6);
constraint int_ne(x[7], 7);
constraint int_ne(x[8], 8);
constraint int_ne(x[9], 9);
constraint int_ne(x[10], 10);
constraint int_ne(x[11], 11);
constraint int_ne(x[12], 12);
solve satisfy;
