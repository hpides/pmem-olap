predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var bool: BOOL____00006 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00007 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00008 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00009 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00010 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00011 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00012 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00013 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00014 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00015 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00016 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00017 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00018 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00019 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00020 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00021 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00022 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00023 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00024 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00025 :: is_defined_var :: var_is_introduced;
var 1..7: INT____00001 :: is_defined_var :: var_is_introduced;
var 1..7: INT____00002 :: is_defined_var :: var_is_introduced;
var 1..7: INT____00003 :: is_defined_var :: var_is_introduced;
var 1..7: INT____00004 :: is_defined_var :: var_is_introduced;
var 1..7: INT____00005 :: is_defined_var :: var_is_introduced;
var 1..5: min_ind :: output_var;
var 1..7: min_val :: output_var;
array [1..5] of var 1..7: variables :: output_array([1..5]);
constraint array_bool_and([BOOL____00008, BOOL____00006, BOOL____00007], BOOL____00021) :: defines_var(BOOL____00021);
constraint array_bool_and([BOOL____00011, BOOL____00009, BOOL____00010], BOOL____00022) :: defines_var(BOOL____00022);
constraint array_bool_and([BOOL____00014, BOOL____00012, BOOL____00013], BOOL____00023) :: defines_var(BOOL____00023);
constraint array_bool_and([BOOL____00017, BOOL____00015, BOOL____00016], BOOL____00024) :: defines_var(BOOL____00024);
constraint array_bool_and([BOOL____00020, BOOL____00018, BOOL____00019], BOOL____00025) :: defines_var(BOOL____00025);
constraint array_bool_or([BOOL____00025, BOOL____00024, BOOL____00023, BOOL____00021, BOOL____00022], true);
constraint int_eq(variables[1], 3);
constraint int_eq(variables[2], 2);
constraint int_eq(variables[3], 7);
constraint int_eq(variables[4], 2);
constraint int_eq(variables[5], 6);
constraint int_eq_reif(min_ind, 1, BOOL____00007) :: defines_var(BOOL____00007);
constraint int_eq_reif(min_ind, 2, BOOL____00010) :: defines_var(BOOL____00010);
constraint int_eq_reif(min_ind, 3, BOOL____00013) :: defines_var(BOOL____00013);
constraint int_eq_reif(min_ind, 4, BOOL____00016) :: defines_var(BOOL____00016);
constraint int_eq_reif(min_ind, 5, BOOL____00019) :: defines_var(BOOL____00019);
constraint int_eq_reif(min_val, variables[1], BOOL____00008) :: defines_var(BOOL____00008);
constraint int_eq_reif(min_val, variables[2], BOOL____00011) :: defines_var(BOOL____00011);
constraint int_eq_reif(min_val, variables[3], BOOL____00014) :: defines_var(BOOL____00014);
constraint int_eq_reif(min_val, variables[4], BOOL____00017) :: defines_var(BOOL____00017);
constraint int_eq_reif(min_val, variables[5], BOOL____00020) :: defines_var(BOOL____00020);
constraint int_eq_reif(variables[1], INT____00005, BOOL____00006) :: defines_var(BOOL____00006);
constraint int_eq_reif(variables[2], INT____00005, BOOL____00009) :: defines_var(BOOL____00009);
constraint int_eq_reif(variables[3], INT____00005, BOOL____00012) :: defines_var(BOOL____00012);
constraint int_eq_reif(variables[4], INT____00005, BOOL____00015) :: defines_var(BOOL____00015);
constraint int_eq_reif(variables[5], INT____00005, BOOL____00018) :: defines_var(BOOL____00018);
constraint int_min(variables[1], variables[1], INT____00001) :: defines_var(INT____00001);
constraint int_min(variables[2], INT____00001, INT____00002) :: defines_var(INT____00002);
constraint int_min(variables[3], INT____00002, INT____00003) :: defines_var(INT____00003);
constraint int_min(variables[4], INT____00003, INT____00004) :: defines_var(INT____00004);
constraint int_min(variables[5], INT____00004, INT____00005) :: defines_var(INT____00005);
solve  :: int_search([variables[1], variables[2], variables[3], variables[4], variables[5], min_ind, min_val], first_fail, indomain, complete) satisfy;
