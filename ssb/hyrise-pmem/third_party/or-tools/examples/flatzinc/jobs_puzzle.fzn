predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var bool: BOOL____00001 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00002 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00004 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00005 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00007 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00008 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00010 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00011 :: is_defined_var :: var_is_introduced;
array [1..4] of var 1..4: Persons = [1, 2, 3, 4];
var 1..4: actor;
var 1..4: boxer;
var 1..4: chef;
var 1..4: clerk;
var 1..4: guard;
var 1..4: nurse;
var 1..4: police_officer;
var 1..4: teacher;
array [1..8] of var 1..4: Jobs :: output_array([1..8]) = [chef, guard, nurse, clerk, police_officer, teacher, actor, boxer];
constraint array_bool_or([BOOL____00001, BOOL____00002], true);
constraint array_bool_or([BOOL____00004, BOOL____00005], true);
constraint array_bool_or([BOOL____00007, BOOL____00008], true);
constraint array_bool_or([BOOL____00010, BOOL____00011], true);
constraint global_cardinality(Jobs, [1, 2, 3, 4], [2, 2, 2, 2]);
constraint int_eq_reif(actor, 3, BOOL____00010) :: defines_var(BOOL____00010);
constraint int_eq_reif(actor, 4, BOOL____00011) :: defines_var(BOOL____00011);
constraint int_eq_reif(chef, 1, BOOL____00007) :: defines_var(BOOL____00007);
constraint int_eq_reif(chef, 2, BOOL____00008) :: defines_var(BOOL____00008);
constraint int_eq_reif(clerk, 3, BOOL____00004) :: defines_var(BOOL____00004);
constraint int_eq_reif(clerk, 4, BOOL____00005) :: defines_var(BOOL____00005);
constraint int_eq_reif(nurse, 3, BOOL____00001) :: defines_var(BOOL____00001);
constraint int_eq_reif(nurse, 4, BOOL____00002) :: defines_var(BOOL____00002);
constraint int_ne(1, boxer);
constraint int_ne(1, chef);
constraint int_ne(1, police_officer);
constraint int_ne(4, nurse);
constraint int_ne(4, police_officer);
constraint int_ne(4, teacher);
constraint int_ne(chef, clerk);
constraint int_ne(chef, police_officer);
solve satisfy;
