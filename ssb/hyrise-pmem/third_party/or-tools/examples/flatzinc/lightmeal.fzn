array [1..8] of int: calories = [1, 6, 5, 7, 2, 4, 2, 6];
var bool: BOOL____00001 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00002 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00003 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00004 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00005 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00006 :: is_defined_var :: var_is_introduced;
var 1..7: INT____00008 :: is_defined_var :: var_is_introduced;
var 1..7: INT____00009 :: is_defined_var :: var_is_introduced;
var 1..7: INT____00010 :: is_defined_var :: var_is_introduced;
var 3..10: INT____00011 :: is_defined_var :: var_is_introduced;
var 1..2: appetiser :: output_var;
var 7..8: dessert :: output_var;
var 0..6: fish;
var 1..8: main :: output_var;
var 0..4: meat;
var 3..21: sum_calories :: output_var = INT____00011;
constraint array_bool_and([BOOL____00001, BOOL____00002], BOOL____00005) :: defines_var(BOOL____00005);
constraint array_bool_and([BOOL____00003, BOOL____00004], BOOL____00006) :: defines_var(BOOL____00006);
constraint array_bool_or([BOOL____00005, BOOL____00006], true);
constraint array_int_element(appetiser, calories, INT____00008) :: defines_var(INT____00008);
constraint array_int_element(dessert, calories, INT____00010) :: defines_var(INT____00010);
constraint array_int_element(main, calories, INT____00009) :: defines_var(INT____00009);
constraint int_eq_reif(fish, 0, BOOL____00002) :: defines_var(BOOL____00002);
constraint int_eq_reif(main, fish, BOOL____00003) :: defines_var(BOOL____00003);
constraint int_eq_reif(main, meat, BOOL____00001) :: defines_var(BOOL____00001);
constraint int_eq_reif(meat, 0, BOOL____00004) :: defines_var(BOOL____00004);
constraint int_lin_eq([-1, 1, 1, 1], [INT____00011, INT____00008, INT____00009, INT____00010], 0) :: defines_var(INT____00011);
constraint set_in(fish, {0, 5, 6});
constraint set_in(meat, {0, 3, 4});
solve  :: int_search([appetiser, meat, fish, main, dessert, INT____00011], first_fail, indomain, complete) satisfy;
