predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var 1..9: E :: output_var;
var 0..9: G :: output_var;
var 0..9: H :: output_var;
var 0..9: I :: output_var;
var 0..9: N :: output_var;
var 0..9: T :: output_var;
var 1..9: X1 :: output_var;
var 0..9: X2 :: output_var;
var 0..9: X3 :: output_var;
var 0..9: X4 :: output_var;
array [1..8] of var 0..9: eighteen :: output_array([1..8]) = [E, I, G, H, T, E, E, N];
array [1..8] of var 0..9: nine :: output_array([1..8]) = [X1, X2, N, I, N, E, X3, X4];
array [1..10] of var 0..9: x :: output_array([1..10]) = [N, I, E, G, H, T, X1, X2, X3, X4];
constraint all_different_int([N, I, E, G, H, T]);
constraint int_lin_eq([-9999910, -100000, -10000, -980000, 201999, -1000, 20000000, 2000000, 20, 2], [E, G, H, I, N, T, X1, X2, X3, X4], 0);
solve  :: int_search(x, first_fail, indomain, complete) satisfy;
