var bool: BOOL____00001 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00003 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00005 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00007 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00010 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00012 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00014 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00016 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00002 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00004 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00006 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00008 :: is_defined_var :: var_is_introduced;
var 0..4: INT____00009 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00011 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00013 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00015 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00017 :: is_defined_var :: var_is_introduced;
var 0..4: INT____00018 :: is_defined_var :: var_is_introduced;
var 0..4: c_x :: output_var = INT____00009;
var 0..4: c_y :: output_var = INT____00018;
array [1..5] of var 1..4: x :: output_array([1..5]);
array [1..5] of var 1..7: y :: output_array([1..5]);
constraint bool2int(BOOL____00001, INT____00002) :: defines_var(INT____00002);
constraint bool2int(BOOL____00003, INT____00004) :: defines_var(INT____00004);
constraint bool2int(BOOL____00005, INT____00006) :: defines_var(INT____00006);
constraint bool2int(BOOL____00007, INT____00008) :: defines_var(INT____00008);
constraint bool2int(BOOL____00010, INT____00011) :: defines_var(INT____00011);
constraint bool2int(BOOL____00012, INT____00013) :: defines_var(INT____00013);
constraint bool2int(BOOL____00014, INT____00015) :: defines_var(INT____00015);
constraint bool2int(BOOL____00016, INT____00017) :: defines_var(INT____00017);
constraint int_eq(1, x[5]);
constraint int_eq(1, y[1]);
constraint int_eq(2, y[2]);
constraint int_eq(3, x[3]);
constraint int_eq(3, y[4]);
constraint int_eq(4, x[1]);
constraint int_eq(4, x[2]);
constraint int_eq(4, x[4]);
constraint int_eq(4, y[3]);
constraint int_eq(7, y[5]);
constraint int_lin_eq([-1, 1, 1, 1, 1], [INT____00009, INT____00002, INT____00004, INT____00006, INT____00008], 0) :: defines_var(INT____00009);
constraint int_lin_eq([-1, 1, 1, 1, 1], [INT____00018, INT____00011, INT____00013, INT____00015, INT____00017], 0) :: defines_var(INT____00018);
constraint int_lt_reif(y[2], y[1], BOOL____00010) :: defines_var(BOOL____00010);
constraint int_lt_reif(y[3], y[2], BOOL____00012) :: defines_var(BOOL____00012);
constraint int_lt_reif(y[4], y[3], BOOL____00014) :: defines_var(BOOL____00014);
constraint int_lt_reif(y[5], y[4], BOOL____00016) :: defines_var(BOOL____00016);
constraint int_ne_reif(x[1], x[2], BOOL____00001) :: defines_var(BOOL____00001);
constraint int_ne_reif(x[2], x[3], BOOL____00003) :: defines_var(BOOL____00003);
constraint int_ne_reif(x[3], x[4], BOOL____00005) :: defines_var(BOOL____00005);
constraint int_ne_reif(x[4], x[5], BOOL____00007) :: defines_var(BOOL____00007);
solve satisfy;
