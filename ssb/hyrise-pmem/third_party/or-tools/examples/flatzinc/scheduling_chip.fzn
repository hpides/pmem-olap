predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..7] of int: LD = [16, 6, 13, 7, 5, 18, 4];
array [1..7] of int: LR = [2, 9, 3, 7, 10, 1, 11];
var int: End :: output_var;
array [1..7] of var 1..30: LE :: output_array([1..7]);
array [1..7] of var 1..30: LO :: output_array([1..7]);
constraint fixed_cumulative(LO, LD, LR, 13);
constraint int_lin_eq([-1, 1], [LE[1], LO[1]], -16);
constraint int_lin_eq([-1, 1], [LE[2], LO[2]], -6);
constraint int_lin_eq([-1, 1], [LE[3], LO[3]], -13);
constraint int_lin_eq([-1, 1], [LE[4], LO[4]], -7);
constraint int_lin_eq([-1, 1], [LE[5], LO[5]], -5);
constraint int_lin_eq([-1, 1], [LE[6], LO[6]], -18);
constraint int_lin_eq([-1, 1], [LE[7], LO[7]], -4);
constraint maximum_int(End, LE);
solve  :: int_search(LE, anti_first_fail, indomain_min, complete) minimize End;
