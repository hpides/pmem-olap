predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var 0..9: A :: output_var;
var 0..9: E :: output_var;
var 0..9: H :: output_var;
var 100..999: INT____00001 :: is_defined_var :: var_is_introduced;
var 1..9: INT____00002 :: is_defined_var :: var_is_introduced;
var 1000..8991: INT____00003 :: is_defined_var :: var_is_introduced;
var 0..9: INT____00004 :: is_defined_var :: var_is_introduced;
var 1000..8991: INT____00005 :: is_defined_var :: var_is_introduced;
var 0..9: INT____00006 :: is_defined_var :: var_is_introduced;
var 0..99999: INT____00007 :: is_defined_var :: var_is_introduced;
var 100..999: INT____00009 :: is_defined_var :: var_is_introduced;
var 1..9: INT____00010 :: is_defined_var :: var_is_introduced;
var 1000..8991: INT____00011 :: is_defined_var :: var_is_introduced;
var 0..9: INT____00012 :: is_defined_var :: var_is_introduced;
var 1000..8991: INT____00013 :: is_defined_var :: var_is_introduced;
var 0..9: INT____00014 :: is_defined_var :: var_is_introduced;
var 20000..199998: INT____00016 :: is_defined_var :: var_is_introduced;
var 10000..98901: INT____00017 :: is_defined_var :: var_is_introduced;
var 10000..98901: INT____00018 :: is_defined_var :: var_is_introduced;
var 0..9: M :: output_var;
var 100..999: MON :: output_var = INT____00001;
var 1000..8991: MON1 :: output_var = INT____00005;
var 1000..8991: MON2 :: output_var = INT____00003;
var 0..99999: MONTH :: output_var = INT____00007;
var 10..99: MON_tmp :: output_var;
var 0..9: N :: output_var;
var 0..9: O :: output_var;
var 1..9: S :: output_var;
var 100..999: SAT :: output_var = INT____00009;
var 1000..8991: SAT1 :: output_var = INT____00013;
var 1000..8991: SAT2 :: output_var = INT____00011;
var 10..99: SAT_tmp :: output_var;
var 10000..99999: SUNab :: output_var = INT____00017;
var 1..9: T :: output_var;
var 10000..99999: TUEcd :: output_var = INT____00018;
var 0..9: U :: output_var;
var 0..9: a :: output_var;
var 0..9: b :: output_var = INT____00014;
var 0..9: c :: output_var;
var 0..9: d :: output_var = INT____00006;
var 20000..199998: total :: output_var = INT____00016;
array [1..8] of var 0..9: x :: output_array([1..8]) = [S, A, T, M, O, N, U, E];
constraint all_different_int(x);
constraint int_div(MON_tmp, 10, INT____00002) :: defines_var(INT____00002);
constraint int_div(SAT_tmp, 10, INT____00010) :: defines_var(INT____00010);
constraint int_lin_eq([-10, -1, 1], [INT____00003, INT____00005, INT____00018], 0);
constraint int_lin_eq([-10, -1, 1], [INT____00011, INT____00013, INT____00017], 0);
constraint int_lin_eq([-1, 10, 100, 1], [INT____00009, A, S, T], 0) :: defines_var(INT____00009);
constraint int_lin_eq([-1, 100, 1, 10], [INT____00001, M, N, O], 0) :: defines_var(INT____00001);
constraint int_lin_eq([-1, 1, 100, 10000, 1000, 10], [INT____00017, INT____00014, N, S, U, a], 0);
constraint int_lin_eq([-1, 1, 10000, 100, 1000, 10], [INT____00007, H, M, N, O, T], 0) :: defines_var(INT____00007);
constraint int_lin_eq([-1, 100, 1, 10000, 1000, 10], [INT____00018, E, INT____00006, T, U, c], 0);
constraint int_mod(INT____00005, 10, INT____00006) :: defines_var(INT____00006);
constraint int_mod(INT____00007, 28, 0);
constraint int_mod(INT____00007, 30, 0);
constraint int_mod(INT____00007, 31, 0);
constraint int_mod(INT____00013, 10, INT____00014) :: defines_var(INT____00014);
constraint int_mod(MON_tmp, 10, INT____00004) :: defines_var(INT____00004);
constraint int_mod(SAT_tmp, 10, INT____00012) :: defines_var(INT____00012);
constraint int_plus(INT____00018, INT____00017, INT____00016) :: defines_var(INT____00016);
constraint int_times(INT____00001, INT____00002, INT____00003) :: defines_var(INT____00003);
constraint int_times(INT____00001, INT____00004, INT____00005) :: defines_var(INT____00005);
constraint int_times(INT____00001, MON_tmp, INT____00018) :: defines_var(INT____00018);
constraint int_times(INT____00009, INT____00010, INT____00011) :: defines_var(INT____00011);
constraint int_times(INT____00009, INT____00012, INT____00013) :: defines_var(INT____00013);
constraint int_times(INT____00009, SAT_tmp, INT____00017) :: defines_var(INT____00017);
solve  :: int_search(x, first_fail, indomain_min, complete) satisfy;
