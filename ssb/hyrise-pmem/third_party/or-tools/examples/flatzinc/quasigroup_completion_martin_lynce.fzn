predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..25] of var 1..5: x :: output_array([1..5, 1..5]);
var 1..5: X____00017 = x[24];
var 1..5: X____00016 = x[22];
var 1..5: X____00015 = x[21];
var 1..5: X____00014 = x[20];
var 1..5: X____00013 = x[19];
var 1..5: X____00012 = x[18];
var 1..5: X____00011 = x[16];
var 1..5: X____00010 = x[15];
var 1..5: X____00009 = x[13];
var 1..5: X____00008 = x[12];
var 1..5: X____00007 = x[10];
var 1..5: X____00006 = x[9];
var 1..5: X____00005 = x[8];
var 1..5: X____00004 = x[6];
var 1..5: X____00003 = x[4];
var 1..5: X____00002 = x[3];
var 1..5: X____00001 = x[2];
constraint all_different_int([x[1], x[2], x[3], x[4], x[5]]);
constraint all_different_int([x[1], x[6], x[11], x[16], x[21]]);
constraint all_different_int([x[2], x[7], x[12], x[17], x[22]]);
constraint all_different_int([x[3], x[8], x[13], x[18], x[23]]);
constraint all_different_int([x[4], x[9], x[14], x[19], x[24]]);
constraint all_different_int([x[5], x[10], x[15], x[20], x[25]]);
constraint all_different_int([x[6], x[7], x[8], x[9], x[10]]);
constraint all_different_int([x[11], x[12], x[13], x[14], x[15]]);
constraint all_different_int([x[16], x[17], x[18], x[19], x[20]]);
constraint all_different_int([x[21], x[22], x[23], x[24], x[25]]);
constraint int_eq(1, x[1]);
constraint int_eq(1, x[25]);
constraint int_eq(2, x[14]);
constraint int_eq(4, x[5]);
constraint int_eq(4, x[11]);
constraint int_eq(4, x[17]);
constraint int_eq(5, x[7]);
constraint int_eq(5, x[23]);
solve satisfy;
