predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var bool: BOOL____00001 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00003 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00004 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00005 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00006 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00007 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00008 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00009 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00010 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00011 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00013 :: is_defined_var :: var_is_introduced;
var 1..5: INT____00002 :: is_defined_var :: var_is_introduced;
var 1..1: pos :: output_var = 1;
array [1..5] of var 1..5: x :: output_array([1..5]);
constraint all_different_int(x);
constraint array_var_int_element(pos, x, INT____00002) :: defines_var(INT____00002);
constraint bool_le(BOOL____00001, BOOL____00003);
constraint bool_le(BOOL____00004, BOOL____00005);
constraint bool_le(BOOL____00006, BOOL____00007);
constraint bool_le(BOOL____00008, BOOL____00009);
constraint bool_le(BOOL____00010, BOOL____00011);
constraint int_lt_reif(x[1], INT____00002, BOOL____00003) :: defines_var(BOOL____00003);
constraint int_lt_reif(x[2], INT____00002, BOOL____00005) :: defines_var(BOOL____00005);
constraint int_lt_reif(x[2], x[1], true);
constraint int_lt_reif(x[2], x[2], BOOL____00013) :: defines_var(BOOL____00013);
constraint int_lt_reif(x[2], x[3], true);
constraint int_lt_reif(x[2], x[4], true);
constraint int_lt_reif(x[2], x[5], true);
constraint int_lt_reif(x[3], INT____00002, BOOL____00007) :: defines_var(BOOL____00007);
constraint int_lt_reif(x[4], INT____00002, BOOL____00009) :: defines_var(BOOL____00009);
constraint int_lt_reif(x[5], INT____00002, BOOL____00011) :: defines_var(BOOL____00011);
constraint int_ne_reif(pos, 1, BOOL____00001) :: defines_var(BOOL____00001);
constraint int_ne_reif(pos, 2, BOOL____00004) :: defines_var(BOOL____00004);
constraint int_ne_reif(pos, 3, BOOL____00006) :: defines_var(BOOL____00006);
constraint int_ne_reif(pos, 4, BOOL____00008) :: defines_var(BOOL____00008);
constraint int_ne_reif(pos, 5, BOOL____00010) :: defines_var(BOOL____00010);
solve satisfy;
