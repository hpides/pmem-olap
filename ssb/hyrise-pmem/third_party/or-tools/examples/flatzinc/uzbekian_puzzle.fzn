predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..5] of var 1..5: mtTrader :: output_array([1..5]);
array [1..5] of var 1..5: vstCty :: output_array([1..5]);
constraint all_different_int(mtTrader);
constraint all_different_int(vstCty);
constraint int_eq(vstCty[5], 3);
constraint int_lin_eq([-1, 1], [mtTrader[2], vstCty[3]], 2);
constraint int_lin_eq([1, -1], [mtTrader[1], vstCty[1]], 1);
constraint int_lin_eq([1, -1], [vstCty[2], vstCty[4]], 2);
constraint int_lt(mtTrader[3], mtTrader[4]);
constraint int_lt(vstCty[4], mtTrader[3]);
solve satisfy;
