predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..6] of int: input = [4, 5, 7, 10, 12, 13];
var 0..13: INT____00003 :: is_defined_var :: var_is_introduced;
var 0..13: INT____00004 :: is_defined_var :: var_is_introduced;
var 0..13: INT____00007 :: is_defined_var :: var_is_introduced;
var 0..13: INT____00008 :: is_defined_var :: var_is_introduced;
var 0..13: INT____00011 :: is_defined_var :: var_is_introduced;
var 0..13: INT____00012 :: is_defined_var :: var_is_introduced;
var 0..13: INT____00015 :: is_defined_var :: var_is_introduced;
var 0..13: INT____00016 :: is_defined_var :: var_is_introduced;
var 0..13: INT____00019 :: is_defined_var :: var_is_introduced;
var 0..13: INT____00020 :: is_defined_var :: var_is_introduced;
var 0..13: INT____00023 :: is_defined_var :: var_is_introduced;
var 0..13: INT____00024 :: is_defined_var :: var_is_introduced;
var 1..3: i____00001;
var 1..3: i____00005;
var 1..3: i____00009;
var 1..3: i____00013;
var 1..3: i____00017;
var 1..3: i____00021;
var 2..4: j____00002;
var 2..4: j____00006;
var 2..4: j____00010;
var 2..4: j____00014;
var 2..4: j____00018;
var 2..4: j____00022;
array [1..4] of var 0..13: x :: output_array([1..4]);
constraint array_var_int_element(i____00001, x, INT____00003) :: defines_var(INT____00003);
constraint array_var_int_element(i____00005, x, INT____00007) :: defines_var(INT____00007);
constraint array_var_int_element(i____00009, x, INT____00011) :: defines_var(INT____00011);
constraint array_var_int_element(i____00013, x, INT____00015) :: defines_var(INT____00015);
constraint array_var_int_element(i____00017, x, INT____00019) :: defines_var(INT____00019);
constraint array_var_int_element(i____00021, x, INT____00023) :: defines_var(INT____00023);
constraint array_var_int_element(j____00002, x, INT____00004) :: defines_var(INT____00004);
constraint array_var_int_element(j____00006, x, INT____00008) :: defines_var(INT____00008);
constraint array_var_int_element(j____00010, x, INT____00012) :: defines_var(INT____00012);
constraint array_var_int_element(j____00014, x, INT____00016) :: defines_var(INT____00016);
constraint array_var_int_element(j____00018, x, INT____00020) :: defines_var(INT____00020);
constraint array_var_int_element(j____00022, x, INT____00024) :: defines_var(INT____00024);
constraint int_le(x[1], x[2]);
constraint int_le(x[2], x[3]);
constraint int_le(x[3], x[4]);
constraint int_lin_eq([1, 1], [INT____00003, INT____00004], 4);
constraint int_lin_eq([1, 1], [INT____00007, INT____00008], 5);
constraint int_lin_eq([1, 1], [INT____00011, INT____00012], 7);
constraint int_lin_eq([1, 1], [INT____00015, INT____00016], 10);
constraint int_lin_eq([1, 1], [INT____00019, INT____00020], 12);
constraint int_lin_eq([1, 1], [INT____00023, INT____00024], 13);
constraint int_lt(i____00001, j____00002);
constraint int_lt(i____00005, j____00006);
constraint int_lt(i____00009, j____00010);
constraint int_lt(i____00013, j____00014);
constraint int_lt(i____00017, j____00018);
constraint int_lt(i____00021, j____00022);
solve  :: int_search(x, anti_first_fail, indomain_split, complete) satisfy;
