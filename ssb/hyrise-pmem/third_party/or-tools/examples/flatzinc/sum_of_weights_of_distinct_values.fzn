var bool: BOOL____00001 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00002 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00003 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00004 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00007 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00008 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00009 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00010 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00013 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00014 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00015 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00016 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00005 :: is_defined_var :: var_is_introduced;
var 0..7: INT____00006 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00011 :: is_defined_var :: var_is_introduced;
var 0..7: INT____00012 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00017 :: is_defined_var :: var_is_introduced;
var 0..7: INT____00018 :: is_defined_var :: var_is_introduced;
var 12..12: cost :: output_var = 12;
array [1..6] of var 1..7: values :: output_array([1..3, 1..2]);
array [1..3] of var 1..6: variables :: output_array([1..3]);
constraint array_bool_or([BOOL____00003, BOOL____00002, BOOL____00001], BOOL____00004) :: defines_var(BOOL____00004);
constraint array_bool_or([BOOL____00009, BOOL____00008, BOOL____00007], BOOL____00010) :: defines_var(BOOL____00010);
constraint array_bool_or([BOOL____00015, BOOL____00014, BOOL____00013], BOOL____00016) :: defines_var(BOOL____00016);
constraint bool2int(BOOL____00004, INT____00005) :: defines_var(INT____00005);
constraint bool2int(BOOL____00010, INT____00011) :: defines_var(INT____00011);
constraint bool2int(BOOL____00016, INT____00017) :: defines_var(INT____00017);
constraint int_eq(1, values[1]);
constraint int_eq(2, values[3]);
constraint int_eq(3, values[4]);
constraint int_eq(5, values[2]);
constraint int_eq(6, values[5]);
constraint int_eq(7, values[6]);
constraint int_eq(variables[1], 1);
constraint int_eq(variables[2], 6);
constraint int_eq(variables[3], 1);
constraint int_eq_reif(variables[1], values[1], BOOL____00001) :: defines_var(BOOL____00001);
constraint int_eq_reif(variables[1], values[3], BOOL____00007) :: defines_var(BOOL____00007);
constraint int_eq_reif(variables[1], values[5], BOOL____00013) :: defines_var(BOOL____00013);
constraint int_eq_reif(variables[2], values[1], BOOL____00002) :: defines_var(BOOL____00002);
constraint int_eq_reif(variables[2], values[3], BOOL____00008) :: defines_var(BOOL____00008);
constraint int_eq_reif(variables[2], values[5], BOOL____00014) :: defines_var(BOOL____00014);
constraint int_eq_reif(variables[3], values[1], BOOL____00003) :: defines_var(BOOL____00003);
constraint int_eq_reif(variables[3], values[3], BOOL____00009) :: defines_var(BOOL____00009);
constraint int_eq_reif(variables[3], values[5], BOOL____00015) :: defines_var(BOOL____00015);
constraint int_lin_eq([-1, -1, -1], [INT____00006, INT____00012, INT____00018], -12);
constraint int_times(values[2], INT____00005, INT____00006) :: defines_var(INT____00006);
constraint int_times(values[4], INT____00011, INT____00012) :: defines_var(INT____00012);
constraint int_times(values[6], INT____00017, INT____00018) :: defines_var(INT____00018);
solve satisfy;
