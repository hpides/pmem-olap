predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var bool: BOOL____00004 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00005 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00007 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00008 :: is_defined_var :: var_is_introduced;
var 0..9: D0 :: output_var;
var 0..9: D1 :: output_var;
var 0..9: D2 :: output_var;
var 0..9: D3 :: output_var;
var 0..9999: INT____00003 :: is_defined_var :: var_is_introduced;
var 0..198: Sum;
constraint all_different_int([D0, D1, D2, D3]);
constraint array_bool_or([BOOL____00004, BOOL____00005], false);
constraint array_bool_or([BOOL____00007, BOOL____00008], false);
constraint int_lin_eq([-1, 1, 10, 1, 10], [Sum, D0, D1, D2, D3], 0);
constraint int_lin_eq([-1, 1, 10, 100, 1000], [INT____00003, D0, D1, D2, D3], 0) :: defines_var(INT____00003);
constraint int_lin_eq_reif([-1, -10], [D0, D1], -30, BOOL____00005) :: defines_var(BOOL____00005);
constraint int_lin_eq_reif([-1, -10], [D0, D1], -25, BOOL____00008) :: defines_var(BOOL____00008);
constraint int_lin_eq_reif([-1, -10], [D2, D3], -30, BOOL____00004) :: defines_var(BOOL____00004);
constraint int_lin_eq_reif([-1, -10], [D2, D3], -25, BOOL____00007) :: defines_var(BOOL____00007);
constraint int_ne(D3, 0);
constraint int_times(Sum, Sum, INT____00003);
solve satisfy;
