array [1..8] of int: N = [8, 14, 21, 8, 0, 0, 0, 0];
var 0..512: INT____00001 :: is_defined_var :: var_is_introduced;
array [1..64] of var 0..10: res :: output_array([1..8, 1..8]);
array [1..1152] of var 0..1: x;
var 0..512: z :: output_var = INT____00001;
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6, -7, -8], [res[1], x[209], x[210], x[211], x[212], x[213], x[214], x[215], x[216]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6, -7, -8], [res[2], x[217], x[218], x[219], x[220], x[221], x[222], x[223], x[224]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6, -7, -8], [res[3], x[225], x[226], x[227], x[228], x[229], x[230], x[231], x[232]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6, -7, -8], [res[4], x[233], x[234], x[235], x[236], x[237], x[238], x[239], x[240]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6, -7, -8], [res[5], x[241], x[242], x[243], x[244], x[245], x[246], x[247], x[248]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6, -7, -8], [res[6], x[249], x[250], x[251], x[252], x[253], x[254], x[255], x[256]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6, -7, -8], [res[7], x[257], x[258], x[259], x[260], x[261], x[262], x[263], x[264]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6, -7, -8], [res[8], x[265], x[266], x[267], x[268], x[269], x[270], x[271], x[272]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6, -7, -8], [res[9], x[305], x[306], x[307], x[308], x[309], x[310], x[311], x[312]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6, -7, -8], [res[10], x[313], x[314], x[315], x[316], x[317], x[318], x[319], x[320]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6, -7, -8], [res[11], x[321], x[322], x[323], x[324], x[325], x[326], x[327], x[328]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6, -7, -8], [res[12], x[329], x[330], x[331], x[332], x[333], x[334], x[335], x[336]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6, -7, -8], [res[13], x[337], x[338], x[339], x[340], x[341], x[342], x[343], x[344]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6, -7, -8], [res[14], x[345], x[346], x[347], x[348], x[349], x[350], x[351], x[352]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6, -7, -8], [res[15], x[353], x[354], x[355], x[356], x[357], x[358], x[359], x[360]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6, -7, -8], [res[16], x[361], x[362], x[363], x[364], x[365], x[366], x[367], x[368]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6, -7, -8], [res[17], x[401], x[402], x[403], x[404], x[405], x[406], x[407], x[408]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6, -7, -8], [res[18], x[409], x[410], x[411], x[412], x[413], x[414], x[415], x[416]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6, -7, -8], [res[19], x[417], x[418], x[419], x[420], x[421], x[422], x[423], x[424]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6, -7, -8], [res[20], x[425], x[426], x[427], x[428], x[429], x[430], x[431], x[432]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6, -7, -8], [res[21], x[433], x[434], x[435], x[436], x[437], x[438], x[439], x[440]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6, -7, -8], [res[22], x[441], x[442], x[443], x[444], x[445], x[446], x[447], x[448]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6, -7, -8], [res[23], x[449], x[450], x[451], x[452], x[453], x[454], x[455], x[456]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6, -7, -8], [res[24], x[457], x[458], x[459], x[460], x[461], x[462], x[463], x[464]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6, -7, -8], [res[25], x[497], x[498], x[499], x[500], x[501], x[502], x[503], x[504]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6, -7, -8], [res[26], x[505], x[506], x[507], x[508], x[509], x[510], x[511], x[512]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6, -7, -8], [res[27], x[513], x[514], x[515], x[516], x[517], x[518], x[519], x[520]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6, -7, -8], [res[28], x[521], x[522], x[523], x[524], x[525], x[526], x[527], x[528]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6, -7, -8], [res[29], x[529], x[530], x[531], x[532], x[533], x[534], x[535], x[536]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6, -7, -8], [res[30], x[537], x[538], x[539], x[540], x[541], x[542], x[543], x[544]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6, -7, -8], [res[31], x[545], x[546], x[547], x[548], x[549], x[550], x[551], x[552]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6, -7, -8], [res[32], x[553], x[554], x[555], x[556], x[557], x[558], x[559], x[560]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6, -7, -8], [res[33], x[593], x[594], x[595], x[596], x[597], x[598], x[599], x[600]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6, -7, -8], [res[34], x[601], x[602], x[603], x[604], x[605], x[606], x[607], x[608]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6, -7, -8], [res[35], x[609], x[610], x[611], x[612], x[613], x[614], x[615], x[616]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6, -7, -8], [res[36], x[617], x[618], x[619], x[620], x[621], x[622], x[623], x[624]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6, -7, -8], [res[37], x[625], x[626], x[627], x[628], x[629], x[630], x[631], x[632]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6, -7, -8], [res[38], x[633], x[634], x[635], x[636], x[637], x[638], x[639], x[640]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6, -7, -8], [res[39], x[641], x[642], x[643], x[644], x[645], x[646], x[647], x[648]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6, -7, -8], [res[40], x[649], x[650], x[651], x[652], x[653], x[654], x[655], x[656]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6, -7, -8], [res[41], x[689], x[690], x[691], x[692], x[693], x[694], x[695], x[696]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6, -7, -8], [res[42], x[697], x[698], x[699], x[700], x[701], x[702], x[703], x[704]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6, -7, -8], [res[43], x[705], x[706], x[707], x[708], x[709], x[710], x[711], x[712]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6, -7, -8], [res[44], x[713], x[714], x[715], x[716], x[717], x[718], x[719], x[720]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6, -7, -8], [res[45], x[721], x[722], x[723], x[724], x[725], x[726], x[727], x[728]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6, -7, -8], [res[46], x[729], x[730], x[731], x[732], x[733], x[734], x[735], x[736]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6, -7, -8], [res[47], x[737], x[738], x[739], x[740], x[741], x[742], x[743], x[744]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6, -7, -8], [res[48], x[745], x[746], x[747], x[748], x[749], x[750], x[751], x[752]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6, -7, -8], [res[49], x[785], x[786], x[787], x[788], x[789], x[790], x[791], x[792]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6, -7, -8], [res[50], x[793], x[794], x[795], x[796], x[797], x[798], x[799], x[800]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6, -7, -8], [res[51], x[801], x[802], x[803], x[804], x[805], x[806], x[807], x[808]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6, -7, -8], [res[52], x[809], x[810], x[811], x[812], x[813], x[814], x[815], x[816]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6, -7, -8], [res[53], x[817], x[818], x[819], x[820], x[821], x[822], x[823], x[824]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6, -7, -8], [res[54], x[825], x[826], x[827], x[828], x[829], x[830], x[831], x[832]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6, -7, -8], [res[55], x[833], x[834], x[835], x[836], x[837], x[838], x[839], x[840]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6, -7, -8], [res[56], x[841], x[842], x[843], x[844], x[845], x[846], x[847], x[848]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6, -7, -8], [res[57], x[881], x[882], x[883], x[884], x[885], x[886], x[887], x[888]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6, -7, -8], [res[58], x[889], x[890], x[891], x[892], x[893], x[894], x[895], x[896]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6, -7, -8], [res[59], x[897], x[898], x[899], x[900], x[901], x[902], x[903], x[904]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6, -7, -8], [res[60], x[905], x[906], x[907], x[908], x[909], x[910], x[911], x[912]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6, -7, -8], [res[61], x[913], x[914], x[915], x[916], x[917], x[918], x[919], x[920]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6, -7, -8], [res[62], x[921], x[922], x[923], x[924], x[925], x[926], x[927], x[928]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6, -7, -8], [res[63], x[929], x[930], x[931], x[932], x[933], x[934], x[935], x[936]], 0);
constraint int_lin_eq([1, -1, -2, -3, -4, -5, -6, -7, -8], [res[64], x[937], x[938], x[939], x[940], x[941], x[942], x[943], x[944]], 0);
constraint int_lin_eq([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [x[209], x[217], x[225], x[233], x[241], x[249], x[257], x[265], x[305], x[313], x[321], x[329], x[337], x[345], x[353], x[361], x[401], x[409], x[417], x[425], x[433], x[441], x[449], x[457], x[497], x[505], x[513], x[521], x[529], x[537], x[545], x[553], x[593], x[601], x[609], x[617], x[625], x[633], x[641], x[649], x[689], x[697], x[705], x[713], x[721], x[729], x[737], x[745], x[785], x[793], x[801], x[809], x[817], x[825], x[833], x[841], x[881], x[889], x[897], x[905], x[913], x[921], x[929], x[937]], 8);
constraint int_lin_eq([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [x[210], x[218], x[226], x[234], x[242], x[250], x[258], x[266], x[306], x[314], x[322], x[330], x[338], x[346], x[354], x[362], x[402], x[410], x[418], x[426], x[434], x[442], x[450], x[458], x[498], x[506], x[514], x[522], x[530], x[538], x[546], x[554], x[594], x[602], x[610], x[618], x[626], x[634], x[642], x[650], x[690], x[698], x[706], x[714], x[722], x[730], x[738], x[746], x[786], x[794], x[802], x[810], x[818], x[826], x[834], x[842], x[882], x[890], x[898], x[906], x[914], x[922], x[930], x[938]], 14);
constraint int_lin_eq([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [x[211], x[219], x[227], x[235], x[243], x[251], x[259], x[267], x[307], x[315], x[323], x[331], x[339], x[347], x[355], x[363], x[403], x[411], x[419], x[427], x[435], x[443], x[451], x[459], x[499], x[507], x[515], x[523], x[531], x[539], x[547], x[555], x[595], x[603], x[611], x[619], x[627], x[635], x[643], x[651], x[691], x[699], x[707], x[715], x[723], x[731], x[739], x[747], x[787], x[795], x[803], x[811], x[819], x[827], x[835], x[843], x[883], x[891], x[899], x[907], x[915], x[923], x[931], x[939]], 21);
constraint int_lin_eq([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [x[212], x[220], x[228], x[236], x[244], x[252], x[260], x[268], x[308], x[316], x[324], x[332], x[340], x[348], x[356], x[364], x[404], x[412], x[420], x[428], x[436], x[444], x[452], x[460], x[500], x[508], x[516], x[524], x[532], x[540], x[548], x[556], x[596], x[604], x[612], x[620], x[628], x[636], x[644], x[652], x[692], x[700], x[708], x[716], x[724], x[732], x[740], x[748], x[788], x[796], x[804], x[812], x[820], x[828], x[836], x[844], x[884], x[892], x[900], x[908], x[916], x[924], x[932], x[940]], 8);
constraint int_lin_eq([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [x[213], x[221], x[229], x[237], x[245], x[253], x[261], x[269], x[309], x[317], x[325], x[333], x[341], x[349], x[357], x[365], x[405], x[413], x[421], x[429], x[437], x[445], x[453], x[461], x[501], x[509], x[517], x[525], x[533], x[541], x[549], x[557], x[597], x[605], x[613], x[621], x[629], x[637], x[645], x[653], x[693], x[701], x[709], x[717], x[725], x[733], x[741], x[749], x[789], x[797], x[805], x[813], x[821], x[829], x[837], x[845], x[885], x[893], x[901], x[909], x[917], x[925], x[933], x[941]], 0);
constraint int_lin_eq([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [x[214], x[222], x[230], x[238], x[246], x[254], x[262], x[270], x[310], x[318], x[326], x[334], x[342], x[350], x[358], x[366], x[406], x[414], x[422], x[430], x[438], x[446], x[454], x[462], x[502], x[510], x[518], x[526], x[534], x[542], x[550], x[558], x[598], x[606], x[614], x[622], x[630], x[638], x[646], x[654], x[694], x[702], x[710], x[718], x[726], x[734], x[742], x[750], x[790], x[798], x[806], x[814], x[822], x[830], x[838], x[846], x[886], x[894], x[902], x[910], x[918], x[926], x[934], x[942]], 0);
constraint int_lin_eq([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [x[215], x[223], x[231], x[239], x[247], x[255], x[263], x[271], x[311], x[319], x[327], x[335], x[343], x[351], x[359], x[367], x[407], x[415], x[423], x[431], x[439], x[447], x[455], x[463], x[503], x[511], x[519], x[527], x[535], x[543], x[551], x[559], x[599], x[607], x[615], x[623], x[631], x[639], x[647], x[655], x[695], x[703], x[711], x[719], x[727], x[735], x[743], x[751], x[791], x[799], x[807], x[815], x[823], x[831], x[839], x[847], x[887], x[895], x[903], x[911], x[919], x[927], x[935], x[943]], 0);
constraint int_lin_eq([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [x[216], x[224], x[232], x[240], x[248], x[256], x[264], x[272], x[312], x[320], x[328], x[336], x[344], x[352], x[360], x[368], x[408], x[416], x[424], x[432], x[440], x[448], x[456], x[464], x[504], x[512], x[520], x[528], x[536], x[544], x[552], x[560], x[600], x[608], x[616], x[624], x[632], x[640], x[648], x[656], x[696], x[704], x[712], x[720], x[728], x[736], x[744], x[752], x[792], x[800], x[808], x[816], x[824], x[832], x[840], x[848], x[888], x[896], x[904], x[912], x[920], x[928], x[936], x[944]], 0);
constraint int_lin_eq([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [x[1], x[2], x[3], x[4], x[9], x[10], x[11], x[12], x[17], x[18], x[19], x[20], x[25], x[26], x[27], x[28], x[33], x[34], x[35], x[36], x[41], x[42], x[43], x[44], x[49], x[50], x[51], x[52], x[57], x[58], x[59], x[60], x[65], x[66], x[67], x[68], x[73], x[74], x[75], x[76], x[81], x[82], x[83], x[84], x[89], x[90], x[91], x[92], x[97], x[98], x[99], x[100], x[105], x[106], x[107], x[108], x[113], x[114], x[115], x[116], x[121], x[122], x[123], x[124], x[129], x[130], x[131], x[132], x[137], x[138], x[139], x[140], x[145], x[146], x[147], x[148], x[153], x[154], x[155], x[156], x[161], x[162], x[163], x[164], x[169], x[170], x[171], x[172], x[177], x[178], x[179], x[180], x[185], x[186], x[187], x[188], x[193], x[194], x[195], x[196], x[201], x[202], x[203], x[204], x[273], x[274], x[275], x[276], x[281], x[282], x[283], x[284], x[289], x[290], x[291], x[292], x[297], x[298], x[299], x[300], x[369], x[370], x[371], x[372], x[377], x[378], x[379], x[380], x[385], x[386], x[387], x[388], x[393], x[394], x[395], x[396], x[465], x[466], x[467], x[468], x[473], x[474], x[475], x[476], x[481], x[482], x[483], x[484], x[489], x[490], x[491], x[492], x[561], x[562], x[563], x[564], x[569], x[570], x[571], x[572], x[577], x[578], x[579], x[580], x[585], x[586], x[587], x[588], x[657], x[658], x[659], x[660], x[665], x[666], x[667], x[668], x[673], x[674], x[675], x[676], x[681], x[682], x[683], x[684], x[753], x[754], x[755], x[756], x[761], x[762], x[763], x[764], x[769], x[770], x[771], x[772], x[777], x[778], x[779], x[780], x[849], x[850], x[851], x[852], x[857], x[858], x[859], x[860], x[865], x[866], x[867], x[868], x[873], x[874], x[875], x[876], x[945], x[946], x[947], x[948], x[953], x[954], x[955], x[956], x[961], x[962], x[963], x[964], x[969], x[970], x[971], x[972], x[977], x[978], x[979], x[980], x[985], x[986], x[987], x[988], x[993], x[994], x[995], x[996], x[1001], x[1002], x[1003], x[1004], x[1009], x[1010], x[1011], x[1012], x[1017], x[1018], x[1019], x[1020], x[1025], x[1026], x[1027], x[1028], x[1033], x[1034], x[1035], x[1036], x[1041], x[1042], x[1043], x[1044], x[1049], x[1050], x[1051], x[1052], x[1057], x[1058], x[1059], x[1060], x[1065], x[1066], x[1067], x[1068], x[1073], x[1074], x[1075], x[1076], x[1081], x[1082], x[1083], x[1084], x[1089], x[1090], x[1091], x[1092], x[1097], x[1098], x[1099], x[1100], x[1105], x[1106], x[1107], x[1108], x[1113], x[1114], x[1115], x[1116], x[1121], x[1122], x[1123], x[1124], x[1129], x[1130], x[1131], x[1132], x[1137], x[1138], x[1139], x[1140], x[1145], x[1146], x[1147], x[1148]], 0);
constraint int_lin_eq([-1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [INT____00001, x[209], x[210], x[211], x[212], x[213], x[214], x[215], x[216], x[217], x[218], x[219], x[220], x[221], x[222], x[223], x[224], x[225], x[226], x[227], x[228], x[229], x[230], x[231], x[232], x[233], x[234], x[235], x[236], x[237], x[238], x[239], x[240], x[241], x[242], x[243], x[244], x[245], x[246], x[247], x[248], x[249], x[250], x[251], x[252], x[253], x[254], x[255], x[256], x[257], x[258], x[259], x[260], x[261], x[262], x[263], x[264], x[265], x[266], x[267], x[268], x[269], x[270], x[271], x[272], x[305], x[306], x[307], x[308], x[309], x[310], x[311], x[312], x[313], x[314], x[315], x[316], x[317], x[318], x[319], x[320], x[321], x[322], x[323], x[324], x[325], x[326], x[327], x[328], x[329], x[330], x[331], x[332], x[333], x[334], x[335], x[336], x[337], x[338], x[339], x[340], x[341], x[342], x[343], x[344], x[345], x[346], x[347], x[348], x[349], x[350], x[351], x[352], x[353], x[354], x[355], x[356], x[357], x[358], x[359], x[360], x[361], x[362], x[363], x[364], x[365], x[366], x[367], x[368], x[401], x[402], x[403], x[404], x[405], x[406], x[407], x[408], x[409], x[410], x[411], x[412], x[413], x[414], x[415], x[416], x[417], x[418], x[419], x[420], x[421], x[422], x[423], x[424], x[425], x[426], x[427], x[428], x[429], x[430], x[431], x[432], x[433], x[434], x[435], x[436], x[437], x[438], x[439], x[440], x[441], x[442], x[443], x[444], x[445], x[446], x[447], x[448], x[449], x[450], x[451], x[452], x[453], x[454], x[455], x[456], x[457], x[458], x[459], x[460], x[461], x[462], x[463], x[464], x[497], x[498], x[499], x[500], x[501], x[502], x[503], x[504], x[505], x[506], x[507], x[508], x[509], x[510], x[511], x[512], x[513], x[514], x[515], x[516], x[517], x[518], x[519], x[520], x[521], x[522], x[523], x[524], x[525], x[526], x[527], x[528], x[529], x[530], x[531], x[532], x[533], x[534], x[535], x[536], x[537], x[538], x[539], x[540], x[541], x[542], x[543], x[544], x[545], x[546], x[547], x[548], x[549], x[550], x[551], x[552], x[553], x[554], x[555], x[556], x[557], x[558], x[559], x[560], x[593], x[594], x[595], x[596], x[597], x[598], x[599], x[600], x[601], x[602], x[603], x[604], x[605], x[606], x[607], x[608], x[609], x[610], x[611], x[612], x[613], x[614], x[615], x[616], x[617], x[618], x[619], x[620], x[621], x[622], x[623], x[624], x[625], x[626], x[627], x[628], x[629], x[630], x[631], x[632], x[633], x[634], x[635], x[636], x[637], x[638], x[639], x[640], x[641], x[642], x[643], x[644], x[645], x[646], x[647], x[648], x[649], x[650], x[651], x[652], x[653], x[654], x[655], x[656], x[689], x[690], x[691], x[692], x[693], x[694], x[695], x[696], x[697], x[698], x[699], x[700], x[701], x[702], x[703], x[704], x[705], x[706], x[707], x[708], x[709], x[710], x[711], x[712], x[713], x[714], x[715], x[716], x[717], x[718], x[719], x[720], x[721], x[722], x[723], x[724], x[725], x[726], x[727], x[728], x[729], x[730], x[731], x[732], x[733], x[734], x[735], x[736], x[737], x[738], x[739], x[740], x[741], x[742], x[743], x[744], x[745], x[746], x[747], x[748], x[749], x[750], x[751], x[752], x[785], x[786], x[787], x[788], x[789], x[790], x[791], x[792], x[793], x[794], x[795], x[796], x[797], x[798], x[799], x[800], x[801], x[802], x[803], x[804], x[805], x[806], x[807], x[808], x[809], x[810], x[811], x[812], x[813], x[814], x[815], x[816], x[817], x[818], x[819], x[820], x[821], x[822], x[823], x[824], x[825], x[826], x[827], x[828], x[829], x[830], x[831], x[832], x[833], x[834], x[835], x[836], x[837], x[838], x[839], x[840], x[841], x[842], x[843], x[844], x[845], x[846], x[847], x[848], x[881], x[882], x[883], x[884], x[885], x[886], x[887], x[888], x[889], x[890], x[891], x[892], x[893], x[894], x[895], x[896], x[897], x[898], x[899], x[900], x[901], x[902], x[903], x[904], x[905], x[906], x[907], x[908], x[909], x[910], x[911], x[912], x[913], x[914], x[915], x[916], x[917], x[918], x[919], x[920], x[921], x[922], x[923], x[924], x[925], x[926], x[927], x[928], x[929], x[930], x[931], x[932], x[933], x[934], x[935], x[936], x[937], x[938], x[939], x[940], x[941], x[942], x[943], x[944]], 0) :: defines_var(INT____00001);
constraint int_lin_le([1, 1], [x[9], x[97]], 1);
constraint int_lin_le([1, 1], [x[10], x[98]], 1);
constraint int_lin_le([1, 1], [x[81], x[185]], 1);
constraint int_lin_le([1, 1], [x[82], x[186]], 1);
constraint int_lin_le([1, 1], [x[961], x[1065]], 1);
constraint int_lin_le([1, 1], [x[962], x[1066]], 1);
constraint int_lin_le([1, 1], [x[1049], x[1137]], 1);
constraint int_lin_le([1, 1], [x[1050], x[1138]], 1);
constraint int_lin_le([1, 1, 1], [x[17], x[105], x[193]], 1);
constraint int_lin_le([1, 1, 1], [x[18], x[106], x[194]], 1);
constraint int_lin_le([1, 1, 1], [x[73], x[177], x[281]], 1);
constraint int_lin_le([1, 1, 1], [x[74], x[178], x[282]], 1);
constraint int_lin_le([1, 1, 1], [x[865], x[969], x[1073]], 1);
constraint int_lin_le([1, 1, 1], [x[866], x[970], x[1074]], 1);
constraint int_lin_le([1, 1, 1], [x[953], x[1041], x[1129]], 1);
constraint int_lin_le([1, 1, 1], [x[954], x[1042], x[1130]], 1);
constraint int_lin_le([1, 1, 1, 1], [x[25], x[113], x[201], x[289]], 1);
constraint int_lin_le([1, 1, 1, 1], [x[26], x[114], x[202], x[290]], 1);
constraint int_lin_le([1, 1, 1, 1], [x[65], x[169], x[273], x[377]], 1);
constraint int_lin_le([1, 1, 1, 1], [x[66], x[170], x[274], x[378]], 1);
constraint int_lin_le([1, 1, 1, 1], [x[769], x[873], x[977], x[1081]], 1);
constraint int_lin_le([1, 1, 1, 1], [x[770], x[874], x[978], x[1082]], 1);
constraint int_lin_le([1, 1, 1, 1], [x[857], x[945], x[1033], x[1121]], 1);
constraint int_lin_le([1, 1, 1, 1], [x[858], x[946], x[1034], x[1122]], 1);
constraint int_lin_le([1, 1, 1, 1, 1], [x[33], x[121], x[209], x[297], x[385]], 1);
constraint int_lin_le([1, 1, 1, 1, 1], [x[34], x[122], x[210], x[298], x[386]], 1);
constraint int_lin_le([1, 1, 1, 1, 1], [x[57], x[161], x[265], x[369], x[473]], 1);
constraint int_lin_le([1, 1, 1, 1, 1], [x[58], x[162], x[266], x[370], x[474]], 1);
constraint int_lin_le([1, 1, 1, 1, 1], [x[673], x[777], x[881], x[985], x[1089]], 1);
constraint int_lin_le([1, 1, 1, 1, 1], [x[674], x[778], x[882], x[986], x[1090]], 1);
constraint int_lin_le([1, 1, 1, 1, 1], [x[761], x[849], x[937], x[1025], x[1113]], 1);
constraint int_lin_le([1, 1, 1, 1, 1], [x[762], x[850], x[938], x[1026], x[1114]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1], [x[41], x[129], x[217], x[305], x[393], x[481]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1], [x[42], x[130], x[218], x[306], x[394], x[482]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1], [x[49], x[153], x[257], x[361], x[465], x[569]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1], [x[50], x[154], x[258], x[362], x[466], x[570]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1], [x[577], x[681], x[785], x[889], x[993], x[1097]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1], [x[578], x[682], x[786], x[890], x[994], x[1098]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1], [x[665], x[753], x[841], x[929], x[1017], x[1105]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1], [x[666], x[754], x[842], x[930], x[1018], x[1106]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1], [x[41], x[145], x[249], x[353], x[457], x[561], x[665]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1], [x[42], x[146], x[250], x[354], x[458], x[562], x[666]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1], [x[49], x[137], x[225], x[313], x[401], x[489], x[577]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1], [x[50], x[138], x[226], x[314], x[402], x[490], x[578]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1], [x[481], x[585], x[689], x[793], x[897], x[1001], x[1105]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1], [x[482], x[586], x[690], x[794], x[898], x[1002], x[1106]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1], [x[569], x[657], x[745], x[833], x[921], x[1009], x[1097]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1], [x[570], x[658], x[746], x[834], x[922], x[1010], x[1098]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[33], x[137], x[241], x[345], x[449], x[553], x[657], x[761]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[34], x[138], x[242], x[346], x[450], x[554], x[658], x[762]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[57], x[145], x[233], x[321], x[409], x[497], x[585], x[673]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[58], x[146], x[234], x[322], x[410], x[498], x[586], x[674]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[209], x[210], x[211], x[212], x[213], x[214], x[215], x[216]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[209], x[217], x[225], x[233], x[241], x[249], x[257], x[265]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[209], x[305], x[401], x[497], x[593], x[689], x[785], x[881]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[212], x[220], x[228], x[236], x[244], x[252], x[260], x[268]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[212], x[308], x[404], x[500], x[596], x[692], x[788], x[884]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[217], x[218], x[219], x[220], x[221], x[222], x[223], x[224]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[217], x[313], x[409], x[505], x[601], x[697], x[793], x[889]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[220], x[316], x[412], x[508], x[604], x[700], x[796], x[892]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[225], x[226], x[227], x[228], x[229], x[230], x[231], x[232]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[225], x[321], x[417], x[513], x[609], x[705], x[801], x[897]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[228], x[324], x[420], x[516], x[612], x[708], x[804], x[900]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[233], x[234], x[235], x[236], x[237], x[238], x[239], x[240]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[233], x[329], x[425], x[521], x[617], x[713], x[809], x[905]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[236], x[332], x[428], x[524], x[620], x[716], x[812], x[908]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[241], x[242], x[243], x[244], x[245], x[246], x[247], x[248]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[241], x[337], x[433], x[529], x[625], x[721], x[817], x[913]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[244], x[340], x[436], x[532], x[628], x[724], x[820], x[916]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[249], x[250], x[251], x[252], x[253], x[254], x[255], x[256]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[249], x[345], x[441], x[537], x[633], x[729], x[825], x[921]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[252], x[348], x[444], x[540], x[636], x[732], x[828], x[924]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[257], x[258], x[259], x[260], x[261], x[262], x[263], x[264]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[257], x[353], x[449], x[545], x[641], x[737], x[833], x[929]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[260], x[356], x[452], x[548], x[644], x[740], x[836], x[932]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[265], x[266], x[267], x[268], x[269], x[270], x[271], x[272]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[265], x[361], x[457], x[553], x[649], x[745], x[841], x[937]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[268], x[364], x[460], x[556], x[652], x[748], x[844], x[940]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[305], x[306], x[307], x[308], x[309], x[310], x[311], x[312]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[305], x[313], x[321], x[329], x[337], x[345], x[353], x[361]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[308], x[316], x[324], x[332], x[340], x[348], x[356], x[364]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[313], x[314], x[315], x[316], x[317], x[318], x[319], x[320]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[321], x[322], x[323], x[324], x[325], x[326], x[327], x[328]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[329], x[330], x[331], x[332], x[333], x[334], x[335], x[336]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[337], x[338], x[339], x[340], x[341], x[342], x[343], x[344]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[345], x[346], x[347], x[348], x[349], x[350], x[351], x[352]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[353], x[354], x[355], x[356], x[357], x[358], x[359], x[360]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[361], x[362], x[363], x[364], x[365], x[366], x[367], x[368]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[385], x[489], x[593], x[697], x[801], x[905], x[1009], x[1113]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[386], x[490], x[594], x[698], x[802], x[906], x[1010], x[1114]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[401], x[402], x[403], x[404], x[405], x[406], x[407], x[408]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[401], x[409], x[417], x[425], x[433], x[441], x[449], x[457]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[404], x[412], x[420], x[428], x[436], x[444], x[452], x[460]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[409], x[410], x[411], x[412], x[413], x[414], x[415], x[416]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[417], x[418], x[419], x[420], x[421], x[422], x[423], x[424]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[425], x[426], x[427], x[428], x[429], x[430], x[431], x[432]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[433], x[434], x[435], x[436], x[437], x[438], x[439], x[440]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[441], x[442], x[443], x[444], x[445], x[446], x[447], x[448]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[449], x[450], x[451], x[452], x[453], x[454], x[455], x[456]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[457], x[458], x[459], x[460], x[461], x[462], x[463], x[464]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[473], x[561], x[649], x[737], x[825], x[913], x[1001], x[1089]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[474], x[562], x[650], x[738], x[826], x[914], x[1002], x[1090]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[497], x[498], x[499], x[500], x[501], x[502], x[503], x[504]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[497], x[505], x[513], x[521], x[529], x[537], x[545], x[553]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[500], x[508], x[516], x[524], x[532], x[540], x[548], x[556]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[505], x[506], x[507], x[508], x[509], x[510], x[511], x[512]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[513], x[514], x[515], x[516], x[517], x[518], x[519], x[520]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[521], x[522], x[523], x[524], x[525], x[526], x[527], x[528]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[529], x[530], x[531], x[532], x[533], x[534], x[535], x[536]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[537], x[538], x[539], x[540], x[541], x[542], x[543], x[544]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[545], x[546], x[547], x[548], x[549], x[550], x[551], x[552]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[553], x[554], x[555], x[556], x[557], x[558], x[559], x[560]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[593], x[594], x[595], x[596], x[597], x[598], x[599], x[600]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[593], x[601], x[609], x[617], x[625], x[633], x[641], x[649]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[596], x[604], x[612], x[620], x[628], x[636], x[644], x[652]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[601], x[602], x[603], x[604], x[605], x[606], x[607], x[608]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[609], x[610], x[611], x[612], x[613], x[614], x[615], x[616]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[617], x[618], x[619], x[620], x[621], x[622], x[623], x[624]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[625], x[626], x[627], x[628], x[629], x[630], x[631], x[632]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[633], x[634], x[635], x[636], x[637], x[638], x[639], x[640]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[641], x[642], x[643], x[644], x[645], x[646], x[647], x[648]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[649], x[650], x[651], x[652], x[653], x[654], x[655], x[656]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[689], x[690], x[691], x[692], x[693], x[694], x[695], x[696]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[689], x[697], x[705], x[713], x[721], x[729], x[737], x[745]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[692], x[700], x[708], x[716], x[724], x[732], x[740], x[748]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[697], x[698], x[699], x[700], x[701], x[702], x[703], x[704]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[705], x[706], x[707], x[708], x[709], x[710], x[711], x[712]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[713], x[714], x[715], x[716], x[717], x[718], x[719], x[720]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[721], x[722], x[723], x[724], x[725], x[726], x[727], x[728]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[729], x[730], x[731], x[732], x[733], x[734], x[735], x[736]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[737], x[738], x[739], x[740], x[741], x[742], x[743], x[744]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[745], x[746], x[747], x[748], x[749], x[750], x[751], x[752]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[785], x[786], x[787], x[788], x[789], x[790], x[791], x[792]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[785], x[793], x[801], x[809], x[817], x[825], x[833], x[841]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[788], x[796], x[804], x[812], x[820], x[828], x[836], x[844]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[793], x[794], x[795], x[796], x[797], x[798], x[799], x[800]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[801], x[802], x[803], x[804], x[805], x[806], x[807], x[808]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[809], x[810], x[811], x[812], x[813], x[814], x[815], x[816]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[817], x[818], x[819], x[820], x[821], x[822], x[823], x[824]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[825], x[826], x[827], x[828], x[829], x[830], x[831], x[832]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[833], x[834], x[835], x[836], x[837], x[838], x[839], x[840]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[841], x[842], x[843], x[844], x[845], x[846], x[847], x[848]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[881], x[882], x[883], x[884], x[885], x[886], x[887], x[888]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[881], x[889], x[897], x[905], x[913], x[921], x[929], x[937]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[884], x[892], x[900], x[908], x[916], x[924], x[932], x[940]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[889], x[890], x[891], x[892], x[893], x[894], x[895], x[896]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[897], x[898], x[899], x[900], x[901], x[902], x[903], x[904]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[905], x[906], x[907], x[908], x[909], x[910], x[911], x[912]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[913], x[914], x[915], x[916], x[917], x[918], x[919], x[920]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[921], x[922], x[923], x[924], x[925], x[926], x[927], x[928]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[929], x[930], x[931], x[932], x[933], x[934], x[935], x[936]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [x[937], x[938], x[939], x[940], x[941], x[942], x[943], x[944]], 1);
constraint int_lin_le([2, 1, 1, 99, 1, 1, 1, 1], [x[27], x[115], x[147], x[227], x[307], x[339], x[411], x[427]], 99);
constraint int_lin_le([2, 1, 1, 99, 1, 1, 1, 1], [x[131], x[219], x[251], x[331], x[411], x[443], x[515], x[531]], 99);
constraint int_lin_le([2, 1, 1, 99, 1, 1, 1, 1], [x[235], x[323], x[355], x[435], x[515], x[547], x[619], x[635]], 99);
constraint int_lin_le([2, 1, 1, 99, 1, 1, 1, 1], [x[339], x[427], x[459], x[539], x[619], x[651], x[723], x[739]], 99);
constraint int_lin_le([2, 1, 1, 99, 1, 1, 1, 1], [x[443], x[531], x[563], x[643], x[723], x[755], x[827], x[843]], 99);
constraint int_lin_le([2, 1, 1, 99, 1, 1, 1, 1], [x[547], x[635], x[667], x[747], x[827], x[859], x[931], x[947]], 99);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1, 1], [x[25], x[129], x[233], x[337], x[441], x[545], x[649], x[753], x[857]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1, 1], [x[26], x[130], x[234], x[338], x[442], x[546], x[650], x[754], x[858]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1, 1], [x[65], x[153], x[241], x[329], x[417], x[505], x[593], x[681], x[769]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1, 1], [x[66], x[154], x[242], x[330], x[418], x[506], x[594], x[682], x[770]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1, 1], [x[289], x[393], x[497], x[601], x[705], x[809], x[913], x[1017], x[1121]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1, 1], [x[290], x[394], x[498], x[602], x[706], x[810], x[914], x[1018], x[1122]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1, 1], [x[377], x[465], x[553], x[641], x[729], x[817], x[905], x[993], x[1081]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1, 1], [x[378], x[466], x[554], x[642], x[730], x[818], x[906], x[994], x[1082]], 1);
constraint int_lin_le([1, 1, 1, 1, 99, 1, 1, 1, 1], [x[11], x[27], x[99], x[131], x[211], x[291], x[323], x[395], x[411]], 99);
constraint int_lin_le([1, 1, 1, 1, 99, 1, 1, 1, 1], [x[19], x[27], x[107], x[139], x[219], x[299], x[331], x[403], x[419]], 99);
constraint int_lin_le([1, 1, 1, 1, 99, 1, 1, 1, 1], [x[27], x[35], x[123], x[155], x[235], x[315], x[347], x[419], x[435]], 99);
constraint int_lin_le([1, 1, 1, 1, 99, 1, 1, 1, 1], [x[27], x[43], x[131], x[163], x[243], x[323], x[355], x[427], x[443]], 99);
constraint int_lin_le([1, 1, 1, 1, 99, 1, 1, 1, 1], [x[27], x[51], x[139], x[171], x[251], x[331], x[363], x[435], x[451]], 99);
constraint int_lin_le([1, 1, 1, 1, 99, 1, 1, 1, 1], [x[27], x[59], x[147], x[179], x[259], x[339], x[371], x[443], x[459]], 99);
constraint int_lin_le([1, 1, 1, 1, 99, 1, 1, 1, 1], [x[27], x[67], x[155], x[187], x[267], x[347], x[379], x[451], x[467]], 99);
constraint int_lin_le([1, 1, 1, 1, 99, 1, 1, 1, 1], [x[107], x[131], x[195], x[227], x[307], x[387], x[419], x[491], x[507]], 99);
constraint int_lin_le([1, 1, 1, 1, 99, 1, 1, 1, 1], [x[115], x[131], x[203], x[235], x[315], x[395], x[427], x[499], x[515]], 99);
constraint int_lin_le([1, 1, 1, 1, 99, 1, 1, 1, 1], [x[123], x[131], x[211], x[243], x[323], x[403], x[435], x[507], x[523]], 99);
constraint int_lin_le([1, 1, 1, 1, 99, 1, 1, 1, 1], [x[131], x[139], x[227], x[259], x[339], x[419], x[451], x[523], x[539]], 99);
constraint int_lin_le([1, 1, 1, 1, 99, 1, 1, 1, 1], [x[131], x[147], x[235], x[267], x[347], x[427], x[459], x[531], x[547]], 99);
constraint int_lin_le([1, 1, 1, 1, 99, 1, 1, 1, 1], [x[131], x[155], x[243], x[275], x[355], x[435], x[467], x[539], x[555]], 99);
constraint int_lin_le([1, 1, 1, 1, 99, 1, 1, 1, 1], [x[131], x[163], x[251], x[283], x[363], x[443], x[475], x[547], x[563]], 99);
constraint int_lin_le([1, 1, 1, 1, 99, 1, 1, 1, 1], [x[203], x[235], x[291], x[323], x[403], x[483], x[515], x[587], x[603]], 99);
constraint int_lin_le([1, 1, 1, 1, 99, 1, 1, 1, 1], [x[211], x[235], x[299], x[331], x[411], x[491], x[523], x[595], x[611]], 99);
constraint int_lin_le([1, 1, 1, 1, 99, 1, 1, 1, 1], [x[219], x[235], x[307], x[339], x[419], x[499], x[531], x[603], x[619]], 99);
constraint int_lin_le([1, 1, 1, 1, 99, 1, 1, 1, 1], [x[227], x[235], x[315], x[347], x[427], x[507], x[539], x[611], x[627]], 99);
constraint int_lin_le([1, 1, 1, 1, 99, 1, 1, 1, 1], [x[235], x[243], x[331], x[363], x[443], x[523], x[555], x[627], x[643]], 99);
constraint int_lin_le([1, 1, 1, 1, 99, 1, 1, 1, 1], [x[235], x[251], x[339], x[371], x[451], x[531], x[563], x[635], x[651]], 99);
constraint int_lin_le([1, 1, 1, 1, 99, 1, 1, 1, 1], [x[235], x[259], x[347], x[379], x[459], x[539], x[571], x[643], x[659]], 99);
constraint int_lin_le([1, 1, 1, 1, 99, 1, 1, 1, 1], [x[299], x[339], x[387], x[419], x[499], x[579], x[611], x[683], x[699]], 99);
constraint int_lin_le([1, 1, 1, 1, 99, 1, 1, 1, 1], [x[307], x[339], x[395], x[427], x[507], x[587], x[619], x[691], x[707]], 99);
constraint int_lin_le([1, 1, 1, 1, 99, 1, 1, 1, 1], [x[315], x[339], x[403], x[435], x[515], x[595], x[627], x[699], x[715]], 99);
constraint int_lin_le([1, 1, 1, 1, 99, 1, 1, 1, 1], [x[323], x[339], x[411], x[443], x[523], x[603], x[635], x[707], x[723]], 99);
constraint int_lin_le([1, 1, 1, 1, 99, 1, 1, 1, 1], [x[331], x[339], x[419], x[451], x[531], x[611], x[643], x[715], x[731]], 99);
constraint int_lin_le([1, 1, 1, 1, 99, 1, 1, 1, 1], [x[339], x[347], x[435], x[467], x[547], x[627], x[659], x[731], x[747]], 99);
constraint int_lin_le([1, 1, 1, 1, 99, 1, 1, 1, 1], [x[339], x[355], x[443], x[475], x[555], x[635], x[667], x[739], x[755]], 99);
constraint int_lin_le([1, 1, 1, 1, 99, 1, 1, 1, 1], [x[395], x[443], x[483], x[515], x[595], x[675], x[707], x[779], x[795]], 99);
constraint int_lin_le([1, 1, 1, 1, 99, 1, 1, 1, 1], [x[403], x[443], x[491], x[523], x[603], x[683], x[715], x[787], x[803]], 99);
constraint int_lin_le([1, 1, 1, 1, 99, 1, 1, 1, 1], [x[411], x[443], x[499], x[531], x[611], x[691], x[723], x[795], x[811]], 99);
constraint int_lin_le([1, 1, 1, 1, 99, 1, 1, 1, 1], [x[419], x[443], x[507], x[539], x[619], x[699], x[731], x[803], x[819]], 99);
constraint int_lin_le([1, 1, 1, 1, 99, 1, 1, 1, 1], [x[427], x[443], x[515], x[547], x[627], x[707], x[739], x[811], x[827]], 99);
constraint int_lin_le([1, 1, 1, 1, 99, 1, 1, 1, 1], [x[435], x[443], x[523], x[555], x[635], x[715], x[747], x[819], x[835]], 99);
constraint int_lin_le([1, 1, 1, 1, 99, 1, 1, 1, 1], [x[443], x[451], x[539], x[571], x[651], x[731], x[763], x[835], x[851]], 99);
constraint int_lin_le([1, 1, 1, 1, 99, 1, 1, 1, 1], [x[491], x[547], x[579], x[611], x[691], x[771], x[803], x[875], x[891]], 99);
constraint int_lin_le([1, 1, 1, 1, 99, 1, 1, 1, 1], [x[499], x[547], x[587], x[619], x[699], x[779], x[811], x[883], x[899]], 99);
constraint int_lin_le([1, 1, 1, 1, 99, 1, 1, 1, 1], [x[507], x[547], x[595], x[627], x[707], x[787], x[819], x[891], x[907]], 99);
constraint int_lin_le([1, 1, 1, 1, 99, 1, 1, 1, 1], [x[515], x[547], x[603], x[635], x[715], x[795], x[827], x[899], x[915]], 99);
constraint int_lin_le([1, 1, 1, 1, 99, 1, 1, 1, 1], [x[523], x[547], x[611], x[643], x[723], x[803], x[835], x[907], x[923]], 99);
constraint int_lin_le([1, 1, 1, 1, 99, 1, 1, 1, 1], [x[531], x[547], x[619], x[651], x[731], x[811], x[843], x[915], x[931]], 99);
constraint int_lin_le([1, 1, 1, 1, 99, 1, 1, 1, 1], [x[539], x[547], x[627], x[659], x[739], x[819], x[851], x[923], x[939]], 99);
constraint int_lin_le([1, 1, 1, 1, 99, 1, 1, 1, 1], [x[587], x[651], x[675], x[707], x[787], x[867], x[899], x[971], x[987]], 99);
constraint int_lin_le([1, 1, 1, 1, 99, 1, 1, 1, 1], [x[595], x[651], x[683], x[715], x[795], x[875], x[907], x[979], x[995]], 99);
constraint int_lin_le([1, 1, 1, 1, 99, 1, 1, 1, 1], [x[603], x[651], x[691], x[723], x[803], x[883], x[915], x[987], x[1003]], 99);
constraint int_lin_le([1, 1, 1, 1, 99, 1, 1, 1, 1], [x[611], x[651], x[699], x[731], x[811], x[891], x[923], x[995], x[1011]], 99);
constraint int_lin_le([1, 1, 1, 1, 99, 1, 1, 1, 1], [x[619], x[651], x[707], x[739], x[819], x[899], x[931], x[1003], x[1019]], 99);
constraint int_lin_le([1, 1, 1, 1, 99, 1, 1, 1, 1], [x[627], x[651], x[715], x[747], x[827], x[907], x[939], x[1011], x[1027]], 99);
constraint int_lin_le([1, 1, 1, 1, 99, 1, 1, 1, 1], [x[635], x[651], x[723], x[755], x[835], x[915], x[947], x[1019], x[1035]], 99);
constraint int_lin_le([1, 1, 1, 1, 99, 1, 1, 1, 1], [x[643], x[651], x[731], x[763], x[843], x[923], x[955], x[1027], x[1043]], 99);
constraint int_lin_le([1, 1, 1, 1, 99, 1, 1, 1, 1], [x[683], x[755], x[771], x[803], x[883], x[963], x[995], x[1067], x[1083]], 99);
constraint int_lin_le([1, 1, 1, 1, 99, 1, 1, 1, 1], [x[691], x[755], x[779], x[811], x[891], x[971], x[1003], x[1075], x[1091]], 99);
constraint int_lin_le([1, 1, 1, 1, 99, 1, 1, 1, 1], [x[699], x[755], x[787], x[819], x[899], x[979], x[1011], x[1083], x[1099]], 99);
constraint int_lin_le([1, 1, 1, 1, 99, 1, 1, 1, 1], [x[707], x[755], x[795], x[827], x[907], x[987], x[1019], x[1091], x[1107]], 99);
constraint int_lin_le([1, 1, 1, 1, 99, 1, 1, 1, 1], [x[715], x[755], x[803], x[835], x[915], x[995], x[1027], x[1099], x[1115]], 99);
constraint int_lin_le([1, 1, 1, 1, 99, 1, 1, 1, 1], [x[723], x[755], x[811], x[843], x[923], x[1003], x[1035], x[1107], x[1123]], 99);
constraint int_lin_le([1, 1, 1, 1, 99, 1, 1, 1, 1], [x[731], x[755], x[819], x[851], x[931], x[1011], x[1043], x[1115], x[1131]], 99);
constraint int_lin_le([1, 1, 1, 1, 99, 1, 1, 1, 1], [x[739], x[755], x[827], x[859], x[939], x[1019], x[1051], x[1123], x[1139]], 99);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [x[17], x[121], x[225], x[329], x[433], x[537], x[641], x[745], x[849], x[953]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [x[18], x[122], x[226], x[330], x[434], x[538], x[642], x[746], x[850], x[954]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [x[73], x[161], x[249], x[337], x[425], x[513], x[601], x[689], x[777], x[865]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [x[74], x[162], x[250], x[338], x[426], x[514], x[602], x[690], x[778], x[866]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [x[193], x[297], x[401], x[505], x[609], x[713], x[817], x[921], x[1025], x[1129]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [x[194], x[298], x[402], x[506], x[610], x[714], x[818], x[922], x[1026], x[1130]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [x[281], x[369], x[457], x[545], x[633], x[721], x[809], x[897], x[985], x[1073]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [x[282], x[370], x[458], x[546], x[634], x[722], x[810], x[898], x[986], x[1074]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [x[9], x[113], x[217], x[321], x[425], x[529], x[633], x[737], x[841], x[945], x[1049]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [x[10], x[114], x[218], x[322], x[426], x[530], x[634], x[738], x[842], x[946], x[1050]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [x[81], x[169], x[257], x[345], x[433], x[521], x[609], x[697], x[785], x[873], x[961]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [x[82], x[170], x[258], x[346], x[434], x[522], x[610], x[698], x[786], x[874], x[962]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [x[97], x[201], x[305], x[409], x[513], x[617], x[721], x[825], x[929], x[1033], x[1137]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [x[98], x[202], x[306], x[410], x[514], x[618], x[722], x[826], x[930], x[1034], x[1138]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [x[185], x[273], x[361], x[449], x[537], x[625], x[713], x[801], x[889], x[977], x[1065]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [x[186], x[274], x[362], x[450], x[538], x[626], x[714], x[802], x[890], x[978], x[1066]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [x[1], x[105], x[209], x[313], x[417], x[521], x[625], x[729], x[833], x[937], x[1041], x[1145]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [x[2], x[106], x[210], x[314], x[418], x[522], x[626], x[730], x[834], x[938], x[1042], x[1146]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [x[89], x[177], x[265], x[353], x[441], x[529], x[617], x[705], x[793], x[881], x[969], x[1057]], 1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [x[90], x[178], x[266], x[354], x[442], x[530], x[618], x[706], x[794], x[882], x[970], x[1058]], 1);
solve  :: int_search([x[209], x[210], x[211], x[212], x[213], x[214], x[215], x[216], x[217], x[218], x[219], x[220], x[221], x[222], x[223], x[224], x[225], x[226], x[227], x[228], x[229], x[230], x[231], x[232], x[233], x[234], x[235], x[236], x[237], x[238], x[239], x[240], x[241], x[242], x[243], x[244], x[245], x[246], x[247], x[248], x[249], x[250], x[251], x[252], x[253], x[254], x[255], x[256], x[257], x[258], x[259], x[260], x[261], x[262], x[263], x[264], x[265], x[266], x[267], x[268], x[269], x[270], x[271], x[272], x[305], x[306], x[307], x[308], x[309], x[310], x[311], x[312], x[313], x[314], x[315], x[316], x[317], x[318], x[319], x[320], x[321], x[322], x[323], x[324], x[325], x[326], x[327], x[328], x[329], x[330], x[331], x[332], x[333], x[334], x[335], x[336], x[337], x[338], x[339], x[340], x[341], x[342], x[343], x[344], x[345], x[346], x[347], x[348], x[349], x[350], x[351], x[352], x[353], x[354], x[355], x[356], x[357], x[358], x[359], x[360], x[361], x[362], x[363], x[364], x[365], x[366], x[367], x[368], x[401], x[402], x[403], x[404], x[405], x[406], x[407], x[408], x[409], x[410], x[411], x[412], x[413], x[414], x[415], x[416], x[417], x[418], x[419], x[420], x[421], x[422], x[423], x[424], x[425], x[426], x[427], x[428], x[429], x[430], x[431], x[432], x[433], x[434], x[435], x[436], x[437], x[438], x[439], x[440], x[441], x[442], x[443], x[444], x[445], x[446], x[447], x[448], x[449], x[450], x[451], x[452], x[453], x[454], x[455], x[456], x[457], x[458], x[459], x[460], x[461], x[462], x[463], x[464], x[497], x[498], x[499], x[500], x[501], x[502], x[503], x[504], x[505], x[506], x[507], x[508], x[509], x[510], x[511], x[512], x[513], x[514], x[515], x[516], x[517], x[518], x[519], x[520], x[521], x[522], x[523], x[524], x[525], x[526], x[527], x[528], x[529], x[530], x[531], x[532], x[533], x[534], x[535], x[536], x[537], x[538], x[539], x[540], x[541], x[542], x[543], x[544], x[545], x[546], x[547], x[548], x[549], x[550], x[551], x[552], x[553], x[554], x[555], x[556], x[557], x[558], x[559], x[560], x[593], x[594], x[595], x[596], x[597], x[598], x[599], x[600], x[601], x[602], x[603], x[604], x[605], x[606], x[607], x[608], x[609], x[610], x[611], x[612], x[613], x[614], x[615], x[616], x[617], x[618], x[619], x[620], x[621], x[622], x[623], x[624], x[625], x[626], x[627], x[628], x[629], x[630], x[631], x[632], x[633], x[634], x[635], x[636], x[637], x[638], x[639], x[640], x[641], x[642], x[643], x[644], x[645], x[646], x[647], x[648], x[649], x[650], x[651], x[652], x[653], x[654], x[655], x[656], x[689], x[690], x[691], x[692], x[693], x[694], x[695], x[696], x[697], x[698], x[699], x[700], x[701], x[702], x[703], x[704], x[705], x[706], x[707], x[708], x[709], x[710], x[711], x[712], x[713], x[714], x[715], x[716], x[717], x[718], x[719], x[720], x[721], x[722], x[723], x[724], x[725], x[726], x[727], x[728], x[729], x[730], x[731], x[732], x[733], x[734], x[735], x[736], x[737], x[738], x[739], x[740], x[741], x[742], x[743], x[744], x[745], x[746], x[747], x[748], x[749], x[750], x[751], x[752], x[785], x[786], x[787], x[788], x[789], x[790], x[791], x[792], x[793], x[794], x[795], x[796], x[797], x[798], x[799], x[800], x[801], x[802], x[803], x[804], x[805], x[806], x[807], x[808], x[809], x[810], x[811], x[812], x[813], x[814], x[815], x[816], x[817], x[818], x[819], x[820], x[821], x[822], x[823], x[824], x[825], x[826], x[827], x[828], x[829], x[830], x[831], x[832], x[833], x[834], x[835], x[836], x[837], x[838], x[839], x[840], x[841], x[842], x[843], x[844], x[845], x[846], x[847], x[848], x[881], x[882], x[883], x[884], x[885], x[886], x[887], x[888], x[889], x[890], x[891], x[892], x[893], x[894], x[895], x[896], x[897], x[898], x[899], x[900], x[901], x[902], x[903], x[904], x[905], x[906], x[907], x[908], x[909], x[910], x[911], x[912], x[913], x[914], x[915], x[916], x[917], x[918], x[919], x[920], x[921], x[922], x[923], x[924], x[925], x[926], x[927], x[928], x[929], x[930], x[931], x[932], x[933], x[934], x[935], x[936], x[937], x[938], x[939], x[940], x[941], x[942], x[943], x[944]], first_fail, indomain_split, complete) minimize INT____00001;
