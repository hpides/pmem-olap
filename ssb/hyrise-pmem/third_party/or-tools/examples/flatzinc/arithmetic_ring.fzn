predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var bool: BOOL____00001 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00002 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00003 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00004 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00005 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00006 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00007 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00008 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00011 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00012 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00013 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00014 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00015 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00016 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00017 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00018 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00021 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00022 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00023 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00024 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00025 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00026 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00027 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00028 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00031 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00032 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00033 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00034 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00035 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00036 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00037 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00038 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00041 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00042 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00043 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00044 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00045 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00046 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00047 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00048 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00051 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00052 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00053 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00054 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00055 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00056 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00057 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00058 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00061 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00062 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00063 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00064 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00065 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00066 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00067 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00068 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00071 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00072 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00073 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00074 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00075 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00076 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00079 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00080 :: is_defined_var :: var_is_introduced;
var -7..7: INT____00009 :: is_defined_var :: var_is_introduced;
var 0..7: INT____00010 :: is_defined_var :: var_is_introduced;
var -7..7: INT____00019 :: is_defined_var :: var_is_introduced;
var 0..7: INT____00020 :: is_defined_var :: var_is_introduced;
var -7..7: INT____00029 :: is_defined_var :: var_is_introduced;
var 0..7: INT____00030 :: is_defined_var :: var_is_introduced;
var -7..7: INT____00039 :: is_defined_var :: var_is_introduced;
var 0..7: INT____00040 :: is_defined_var :: var_is_introduced;
var -7..7: INT____00049 :: is_defined_var :: var_is_introduced;
var 0..7: INT____00050 :: is_defined_var :: var_is_introduced;
var -7..7: INT____00059 :: is_defined_var :: var_is_introduced;
var 0..7: INT____00060 :: is_defined_var :: var_is_introduced;
var -7..7: INT____00069 :: is_defined_var :: var_is_introduced;
var 0..7: INT____00070 :: is_defined_var :: var_is_introduced;
var -7..7: INT____00077 :: is_defined_var :: var_is_introduced;
var 0..7: INT____00078 :: is_defined_var :: var_is_introduced;
array [1..8] of var 1..8: x :: output_array([1..8]);
constraint all_different_int(x);
constraint array_bool_and([BOOL____00001, BOOL____00002], BOOL____00003) :: defines_var(BOOL____00003);
constraint array_bool_and([BOOL____00002, BOOL____00016], BOOL____00017) :: defines_var(BOOL____00017);
constraint array_bool_and([BOOL____00004, BOOL____00008], BOOL____00012) :: defines_var(BOOL____00012);
constraint array_bool_and([BOOL____00005, BOOL____00006], BOOL____00007) :: defines_var(BOOL____00007);
constraint array_bool_and([BOOL____00006, BOOL____00013], BOOL____00014) :: defines_var(BOOL____00014);
constraint array_bool_and([BOOL____00013, BOOL____00026], BOOL____00027) :: defines_var(BOOL____00027);
constraint array_bool_and([BOOL____00015, BOOL____00018], BOOL____00022) :: defines_var(BOOL____00022);
constraint array_bool_and([BOOL____00016, BOOL____00023], BOOL____00024) :: defines_var(BOOL____00024);
constraint array_bool_and([BOOL____00023, BOOL____00036], BOOL____00037) :: defines_var(BOOL____00037);
constraint array_bool_and([BOOL____00025, BOOL____00028], BOOL____00032) :: defines_var(BOOL____00032);
constraint array_bool_and([BOOL____00026, BOOL____00033], BOOL____00034) :: defines_var(BOOL____00034);
constraint array_bool_and([BOOL____00033, BOOL____00046], BOOL____00047) :: defines_var(BOOL____00047);
constraint array_bool_and([BOOL____00035, BOOL____00038], BOOL____00042) :: defines_var(BOOL____00042);
constraint array_bool_and([BOOL____00036, BOOL____00043], BOOL____00044) :: defines_var(BOOL____00044);
constraint array_bool_and([BOOL____00043, BOOL____00056], BOOL____00057) :: defines_var(BOOL____00057);
constraint array_bool_and([BOOL____00045, BOOL____00048], BOOL____00052) :: defines_var(BOOL____00052);
constraint array_bool_and([BOOL____00046, BOOL____00053], BOOL____00054) :: defines_var(BOOL____00054);
constraint array_bool_and([BOOL____00053, BOOL____00066], BOOL____00067) :: defines_var(BOOL____00067);
constraint array_bool_and([BOOL____00055, BOOL____00058], BOOL____00062) :: defines_var(BOOL____00062);
constraint array_bool_and([BOOL____00056, BOOL____00063], BOOL____00064) :: defines_var(BOOL____00064);
constraint array_bool_and([BOOL____00063, BOOL____00001], BOOL____00075) :: defines_var(BOOL____00075);
constraint array_bool_and([BOOL____00065, BOOL____00068], BOOL____00072) :: defines_var(BOOL____00072);
constraint array_bool_and([BOOL____00066, BOOL____00005], BOOL____00073) :: defines_var(BOOL____00073);
constraint array_bool_and([BOOL____00074, BOOL____00076], BOOL____00080) :: defines_var(BOOL____00080);
constraint array_bool_or([BOOL____00064, BOOL____00067, BOOL____00054, BOOL____00057, BOOL____00044, BOOL____00047, BOOL____00034, BOOL____00037, BOOL____00024, BOOL____00027, BOOL____00014, BOOL____00017], true);
constraint bool_eq_reif(BOOL____00003, false, BOOL____00004) :: defines_var(BOOL____00004);
constraint bool_eq_reif(BOOL____00007, false, BOOL____00008) :: defines_var(BOOL____00008);
constraint bool_eq_reif(BOOL____00014, false, BOOL____00015) :: defines_var(BOOL____00015);
constraint bool_eq_reif(BOOL____00017, false, BOOL____00018) :: defines_var(BOOL____00018);
constraint bool_eq_reif(BOOL____00024, false, BOOL____00025) :: defines_var(BOOL____00025);
constraint bool_eq_reif(BOOL____00027, false, BOOL____00028) :: defines_var(BOOL____00028);
constraint bool_eq_reif(BOOL____00034, false, BOOL____00035) :: defines_var(BOOL____00035);
constraint bool_eq_reif(BOOL____00037, false, BOOL____00038) :: defines_var(BOOL____00038);
constraint bool_eq_reif(BOOL____00044, false, BOOL____00045) :: defines_var(BOOL____00045);
constraint bool_eq_reif(BOOL____00047, false, BOOL____00048) :: defines_var(BOOL____00048);
constraint bool_eq_reif(BOOL____00054, false, BOOL____00055) :: defines_var(BOOL____00055);
constraint bool_eq_reif(BOOL____00057, false, BOOL____00058) :: defines_var(BOOL____00058);
constraint bool_eq_reif(BOOL____00064, false, BOOL____00065) :: defines_var(BOOL____00065);
constraint bool_eq_reif(BOOL____00067, false, BOOL____00068) :: defines_var(BOOL____00068);
constraint bool_eq_reif(BOOL____00073, false, BOOL____00074) :: defines_var(BOOL____00074);
constraint bool_eq_reif(BOOL____00075, false, BOOL____00076) :: defines_var(BOOL____00076);
constraint bool_le(BOOL____00012, BOOL____00011);
constraint bool_le(BOOL____00022, BOOL____00021);
constraint bool_le(BOOL____00032, BOOL____00031);
constraint bool_le(BOOL____00042, BOOL____00041);
constraint bool_le(BOOL____00052, BOOL____00051);
constraint bool_le(BOOL____00062, BOOL____00061);
constraint bool_le(BOOL____00072, BOOL____00071);
constraint bool_le(BOOL____00080, BOOL____00079);
constraint int_abs(INT____00009, INT____00010) :: defines_var(INT____00010);
constraint int_abs(INT____00019, INT____00020) :: defines_var(INT____00020);
constraint int_abs(INT____00029, INT____00030) :: defines_var(INT____00030);
constraint int_abs(INT____00039, INT____00040) :: defines_var(INT____00040);
constraint int_abs(INT____00049, INT____00050) :: defines_var(INT____00050);
constraint int_abs(INT____00059, INT____00060) :: defines_var(INT____00060);
constraint int_abs(INT____00069, INT____00070) :: defines_var(INT____00070);
constraint int_abs(INT____00077, INT____00078) :: defines_var(INT____00078);
constraint int_eq(x[1], 1);
constraint int_eq_reif(x[1], 6, BOOL____00001) :: defines_var(BOOL____00001);
constraint int_eq_reif(x[1], 7, BOOL____00005) :: defines_var(BOOL____00005);
constraint int_eq_reif(x[2], 6, BOOL____00006) :: defines_var(BOOL____00006);
constraint int_eq_reif(x[2], 7, BOOL____00002) :: defines_var(BOOL____00002);
constraint int_eq_reif(x[3], 6, BOOL____00016) :: defines_var(BOOL____00016);
constraint int_eq_reif(x[3], 7, BOOL____00013) :: defines_var(BOOL____00013);
constraint int_eq_reif(x[4], 6, BOOL____00026) :: defines_var(BOOL____00026);
constraint int_eq_reif(x[4], 7, BOOL____00023) :: defines_var(BOOL____00023);
constraint int_eq_reif(x[5], 6, BOOL____00036) :: defines_var(BOOL____00036);
constraint int_eq_reif(x[5], 7, BOOL____00033) :: defines_var(BOOL____00033);
constraint int_eq_reif(x[6], 6, BOOL____00046) :: defines_var(BOOL____00046);
constraint int_eq_reif(x[6], 7, BOOL____00043) :: defines_var(BOOL____00043);
constraint int_eq_reif(x[7], 6, BOOL____00056) :: defines_var(BOOL____00056);
constraint int_eq_reif(x[7], 7, BOOL____00053) :: defines_var(BOOL____00053);
constraint int_eq_reif(x[8], 6, BOOL____00066) :: defines_var(BOOL____00066);
constraint int_eq_reif(x[8], 7, BOOL____00063) :: defines_var(BOOL____00063);
constraint int_le_reif(2, INT____00010, BOOL____00011) :: defines_var(BOOL____00011);
constraint int_le_reif(2, INT____00020, BOOL____00021) :: defines_var(BOOL____00021);
constraint int_le_reif(2, INT____00030, BOOL____00031) :: defines_var(BOOL____00031);
constraint int_le_reif(2, INT____00040, BOOL____00041) :: defines_var(BOOL____00041);
constraint int_le_reif(2, INT____00050, BOOL____00051) :: defines_var(BOOL____00051);
constraint int_le_reif(2, INT____00060, BOOL____00061) :: defines_var(BOOL____00061);
constraint int_le_reif(2, INT____00070, BOOL____00071) :: defines_var(BOOL____00071);
constraint int_le_reif(2, INT____00078, BOOL____00079) :: defines_var(BOOL____00079);
constraint int_lin_eq([-1, -1, 1], [INT____00077, x[1], x[8]], 0) :: defines_var(INT____00077);
constraint int_plus(INT____00009, x[2], x[1]) :: defines_var(INT____00009);
constraint int_plus(INT____00019, x[3], x[2]) :: defines_var(INT____00019);
constraint int_plus(INT____00029, x[4], x[3]) :: defines_var(INT____00029);
constraint int_plus(INT____00039, x[5], x[4]) :: defines_var(INT____00039);
constraint int_plus(INT____00049, x[6], x[5]) :: defines_var(INT____00049);
constraint int_plus(INT____00059, x[7], x[6]) :: defines_var(INT____00059);
constraint int_plus(INT____00069, x[8], x[7]) :: defines_var(INT____00069);
solve  :: int_search(x, first_fail, indomain_min, complete) satisfy;
