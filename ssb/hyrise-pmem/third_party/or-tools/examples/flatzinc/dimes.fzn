predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var bool: BOOL____00008 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00009 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00010 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00011 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00012 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00013 :: is_defined_var :: var_is_introduced;
var 3..40: INT____00001 :: is_defined_var :: var_is_introduced;
var 3..40: INT____00002 :: is_defined_var :: var_is_introduced;
var 3..40: INT____00003 :: is_defined_var :: var_is_introduced;
var 3..40: INT____00004 :: is_defined_var :: var_is_introduced;
var 3..40: INT____00005 :: is_defined_var :: var_is_introduced;
var 15..200: INT____00006 :: is_defined_var :: var_is_introduced;
array [1..5] of var 3..4: amount :: output_array([1..5]);
array [1..2] of var 0..4: amount_gcc :: output_array([3..4]);
var 15..200: cents :: output_var = INT____00006;
array [1..5] of var 1..10: values;
constraint all_different_int(values);
constraint array_bool_and([BOOL____00009, BOOL____00008], BOOL____00012) :: defines_var(BOOL____00012);
constraint array_bool_and([BOOL____00011, BOOL____00010], BOOL____00013) :: defines_var(BOOL____00013);
constraint array_bool_or([BOOL____00012, BOOL____00013], true);
constraint global_cardinality(amount, [3, 4], amount_gcc);
constraint int_eq(values[1], 1);
constraint int_eq(values[2], 2);
constraint int_eq(values[3], 3);
constraint int_eq(values[4], 5);
constraint int_eq(values[5], 10);
constraint int_eq_reif(amount_gcc[1], 2, BOOL____00008) :: defines_var(BOOL____00008);
constraint int_eq_reif(amount_gcc[1], 3, BOOL____00010) :: defines_var(BOOL____00010);
constraint int_eq_reif(amount_gcc[2], 2, BOOL____00011) :: defines_var(BOOL____00011);
constraint int_eq_reif(amount_gcc[2], 3, BOOL____00009) :: defines_var(BOOL____00009);
constraint int_le(values[1], values[2]);
constraint int_le(values[2], values[3]);
constraint int_le(values[3], values[4]);
constraint int_le(values[4], values[5]);
constraint int_lin_eq([-1, 1, 1, 1, 1, 1], [INT____00006, INT____00001, INT____00002, INT____00003, INT____00004, INT____00005], 0) :: defines_var(INT____00006);
constraint int_mod(INT____00006, 10, 0);
constraint int_times(values[1], amount[1], INT____00001) :: defines_var(INT____00001);
constraint int_times(values[2], amount[2], INT____00002) :: defines_var(INT____00002);
constraint int_times(values[3], amount[3], INT____00003) :: defines_var(INT____00003);
constraint int_times(values[4], amount[4], INT____00004) :: defines_var(INT____00004);
constraint int_times(values[5], amount[5], INT____00005) :: defines_var(INT____00005);
solve  :: int_search([values[1], values[2], values[3], values[4], values[5], amount[1], amount[2], amount[3], amount[4], amount[5], amount_gcc[1], amount_gcc[2]], first_fail, indomain_max, complete) satisfy;
