predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var 1..36: col_sum;
array [1..4] of var 1000..9999: row_squares;
var 1..36: row_sum;
array [1..16] of var 0..9: x :: output_array([1..4, 1..4]);
var 1000..9999: y____00005;
var 0..100: y____00007;
var 1000..9999: y____00009;
var 0..100: y____00011;
var 1000..9999: y____00013;
var 0..100: y____00015;
var 1000..9999: y____00017;
var 0..100: y____00019;
constraint all_different_int([x[1], x[2], x[3], x[4]]);
constraint all_different_int([x[5], x[6], x[7], x[8]]);
constraint all_different_int([x[9], x[10], x[11], x[12]]);
constraint all_different_int([x[13], x[14], x[15], x[16]]);
constraint all_different_int(row_squares);
constraint int_eq(row_squares[1], y____00005);
constraint int_eq(row_squares[2], y____00009);
constraint int_eq(row_squares[3], y____00013);
constraint int_eq(row_squares[4], y____00017);
constraint int_le(row_squares[1], row_squares[2]);
constraint int_le(row_squares[2], row_squares[3]);
constraint int_le(row_squares[3], row_squares[4]);
constraint int_lin_eq([-1, 1, 1, 1, 1], [col_sum, x[1], x[5], x[9], x[13]], 0);
constraint int_lin_eq([-1, 1, 1, 1, 1], [col_sum, x[2], x[6], x[10], x[14]], 0);
constraint int_lin_eq([-1, 1, 1, 1, 1], [col_sum, x[3], x[7], x[11], x[15]], 0);
constraint int_lin_eq([-1, 1, 1, 1, 1], [col_sum, x[4], x[8], x[12], x[16]], 0);
constraint int_lin_eq([-1, 1, 1, 1, 1], [row_sum, x[1], x[2], x[3], x[4]], 0);
constraint int_lin_eq([-1, 1, 1, 1, 1], [row_sum, x[5], x[6], x[7], x[8]], 0);
constraint int_lin_eq([-1, 1, 1, 1, 1], [row_sum, x[9], x[10], x[11], x[12]], 0);
constraint int_lin_eq([-1, 1, 1, 1, 1], [row_sum, x[13], x[14], x[15], x[16]], 0);
constraint int_lin_eq([-1, 1000, 100, 10, 1], [y____00005, x[1], x[2], x[3], x[4]], 0);
constraint int_lin_eq([-1, 1000, 100, 10, 1], [y____00009, x[5], x[6], x[7], x[8]], 0);
constraint int_lin_eq([-1, 1000, 100, 10, 1], [y____00013, x[9], x[10], x[11], x[12]], 0);
constraint int_lin_eq([-1, 1000, 100, 10, 1], [y____00017, x[13], x[14], x[15], x[16]], 0);
constraint int_times(y____00007, y____00007, y____00005);
constraint int_times(y____00011, y____00011, y____00009);
constraint int_times(y____00015, y____00015, y____00013);
constraint int_times(y____00019, y____00019, y____00017);
solve  :: int_search([x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10], x[11], x[12], x[13], x[14], x[15], x[16]], occurrence, indomain_min, complete) satisfy;
