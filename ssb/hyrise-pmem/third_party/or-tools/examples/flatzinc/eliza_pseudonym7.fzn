predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var bool: BOOL____00001 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00003 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00005 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00007 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00009 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00011 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00016 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00017 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00018 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00019 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00002 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00004 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00006 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00008 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00010 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00012 :: is_defined_var :: var_is_introduced;
var 1..4: INT____00014 :: is_defined_var :: var_is_introduced;
var 2..6: INT____00015 :: is_defined_var :: var_is_introduced;
var 4..6: INT____00021 :: is_defined_var :: var_is_introduced;
var 1..6: abulia :: output_var;
var 2..6: anna :: output_var = INT____00015;
var 4..6: barbra :: output_var = INT____00021;
var 1..6: betise :: output_var;
var 5..5: carla :: output_var = 5;
var 1..4: caryatid :: output_var = INT____00014;
var 1..6: dehisce :: output_var;
var 1..6: delilah :: output_var;
var 1..6: eliza :: output_var;
var 1..6: euhemerism :: output_var;
var 1..6: fiona :: output_var;
var 1..6: floruit :: output_var;
array [1..6] of var 1..6: all_words :: output_array([1..6]) = [abulia, betise, caryatid, dehisce, euhemerism, floruit];
array [1..6] of var 1..6: friends :: output_array([1..6]) = [anna, barbra, carla, delilah, eliza, fiona];
var 1..1: sum_beginnings = 1;
constraint all_different_int(all_words);
constraint all_different_int(friends);
constraint array_bool_or([BOOL____00019, BOOL____00018, BOOL____00016, BOOL____00017], true);
constraint bool2int(BOOL____00001, INT____00002) :: defines_var(INT____00002);
constraint bool2int(BOOL____00003, INT____00004) :: defines_var(INT____00004);
constraint bool2int(BOOL____00005, INT____00006) :: defines_var(INT____00006);
constraint bool2int(BOOL____00007, INT____00008) :: defines_var(INT____00008);
constraint bool2int(BOOL____00009, INT____00010) :: defines_var(INT____00010);
constraint bool2int(BOOL____00011, INT____00012) :: defines_var(INT____00012);
constraint int_eq_reif(3, INT____00014, BOOL____00017) :: defines_var(BOOL____00017);
constraint int_eq_reif(3, abulia, BOOL____00016) :: defines_var(BOOL____00016);
constraint int_eq_reif(3, euhemerism, BOOL____00018) :: defines_var(BOOL____00018);
constraint int_eq_reif(3, floruit, BOOL____00019) :: defines_var(BOOL____00019);
constraint int_eq_reif(anna, abulia, BOOL____00001) :: defines_var(BOOL____00001);
constraint int_eq_reif(barbra, betise, BOOL____00003) :: defines_var(BOOL____00003);
constraint int_eq_reif(caryatid, carla, BOOL____00005) :: defines_var(BOOL____00005);
constraint int_eq_reif(dehisce, delilah, BOOL____00007) :: defines_var(BOOL____00007);
constraint int_eq_reif(eliza, euhemerism, BOOL____00009) :: defines_var(BOOL____00009);
constraint int_eq_reif(fiona, floruit, BOOL____00011) :: defines_var(BOOL____00011);
constraint int_lin_eq([-1, 1], [INT____00014, fiona], 2) :: defines_var(INT____00014);
constraint int_lin_eq([-1, 1], [INT____00015, euhemerism], -1) :: defines_var(INT____00015);
constraint int_lin_eq([-1, 1], [INT____00021, dehisce], -3) :: defines_var(INT____00021);
constraint int_lin_eq([-1, 1, 1, 1, 1, 1, 1], [1, INT____00002, INT____00004, INT____00006, INT____00008, INT____00010, INT____00012], 0);
solve  :: int_search([anna, barbra, carla, delilah, eliza, fiona, abulia, betise, caryatid, dehisce, euhemerism, floruit, 1], first_fail, indomain, complete) satisfy;
