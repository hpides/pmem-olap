predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..9] of var 0..9: gcc1____00001;
array [1..9] of var 0..9: gcc2____00002;
array [1..6] of var 1..9: variables1 :: output_array([1..6]);
array [1..6] of var 1..9: variables2 :: output_array([1..6]);
constraint global_cardinality(variables1, [1, 2, 3, 4, 5, 6, 7, 8, 9], gcc1____00001);
constraint global_cardinality(variables2, [1, 2, 3, 4, 5, 6, 7, 8, 9], gcc2____00002);
constraint int_eq(gcc1____00001[1], gcc2____00002[1]);
constraint int_eq(gcc1____00001[2], gcc2____00002[2]);
constraint int_eq(gcc1____00001[3], gcc2____00002[3]);
constraint int_eq(gcc1____00001[4], gcc2____00002[4]);
constraint int_eq(gcc1____00001[5], gcc2____00002[5]);
constraint int_eq(gcc1____00001[6], gcc2____00002[6]);
constraint int_eq(gcc1____00001[7], gcc2____00002[7]);
constraint int_eq(gcc1____00001[8], gcc2____00002[8]);
constraint int_eq(gcc1____00001[9], gcc2____00002[9]);
constraint int_eq(variables1[1], 1);
constraint int_eq(variables1[2], 9);
constraint int_eq(variables1[3], 1);
constraint int_eq(variables1[4], 5);
constraint int_eq(variables1[5], 2);
constraint int_eq(variables1[6], 1);
constraint int_eq(variables2[1], 9);
constraint int_eq(variables2[2], 1);
constraint int_eq(variables2[3], 1);
constraint int_eq(variables2[4], 2);
constraint int_eq(variables2[5], 5);
constraint int_eq(variables2[6], 1);
solve satisfy;
