predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
array [1..9] of int: salary = [46, 43, 47, 36, 43, 55, 68, 64, 60];
array [1..27] of int: skills = [3, 5, 1, 1, 2, 5, 3, 4, 2, 4, 3, 1, 4, 2, 2, 1, 3, 4, 3, 1, 5, 5, 4, 2, 3, 3, 3];
var 0..462: INT____00001 :: is_defined_var :: var_is_introduced;
var 0..27: INT____00002 :: is_defined_var :: var_is_introduced;
var 0..27: INT____00003 :: is_defined_var :: var_is_introduced;
var 0..25: INT____00004 :: is_defined_var :: var_is_introduced;
array [1..3] of var 0..27: sum_skills :: output_array([1..3]) = [INT____00002, INT____00003, INT____00004];
var 0..462: total_cost :: output_var = INT____00001;
array [1..9] of var 0..1: x :: output_array([1..9]);
constraint int_lin_eq([-1, 1, 5, 2, 1, 2, 4, 5, 2, 3], [INT____00004, x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9]], 0) :: defines_var(INT____00004);
constraint int_lin_eq([-1, 3, 1, 3, 4, 4, 1, 3, 5, 3], [INT____00002, x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9]], 0) :: defines_var(INT____00002);
constraint int_lin_eq([-1, 5, 2, 4, 3, 2, 3, 1, 4, 3], [INT____00003, x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9]], 0) :: defines_var(INT____00003);
constraint int_lin_eq([-1, 46, 43, 47, 36, 43, 55, 68, 64, 60], [INT____00001, x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9]], 0) :: defines_var(INT____00001);
constraint int_lin_le([-5, -2, -4, -3, -2, -3, -1, -4, -3], [x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9]], -15);
constraint int_lin_le([-3, -1, -3, -4, -4, -1, -3, -5, -3], [x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9]], -15);
constraint int_lin_le([-1, -5, -2, -1, -2, -4, -5, -2, -3], [x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9]], -15);
solve minimize INT____00001;
